[
    {
        "id": "5aaca332.83ed4c",
        "type": "tab",
        "label": "Login API "
    },
    {
        "id": "1bc13036.e3b82",
        "type": "tab",
        "label": "Generic Save"
    },
    {
        "id": "5e22f743.a6a0b8",
        "type": "tab",
        "label": "Generic Get"
    },
    {
        "id": "3d6329c5.e74616",
        "type": "tab",
        "label": "Chatbot Flow"
    },
    {
        "id": "15a80fee.a1bde",
        "type": "tab",
        "label": "Push notification Test"
    },
    {
        "id": "bd3a143c.e87078",
        "type": "subflow",
        "name": "F to C",
        "info": "",
        "in": [
            {
                "x": 44,
                "y": 63,
                "wires": [
                    {
                        "id": "ba4d189b.79c998"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 309,
                "y": 57,
                "wires": [
                    {
                        "id": "ba4d189b.79c998",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "e079261f.947b38",
        "type": "subflow",
        "name": "dimmer to switch",
        "info": "",
        "in": [
            {
                "x": 25,
                "y": 86,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 437,
                "y": 83,
                "wires": [
                    {
                        "id": "6627c2e.5b9263c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "94340f78.707da",
        "type": "subflow",
        "name": "currState to payload",
        "info": "",
        "in": [
            {
                "x": 139,
                "y": 133,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 448,
                "y": 131,
                "wires": [
                    {
                        "id": "22848c23.6f9ff4",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "23a4aa90.edeb06",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "2ff3abf2.78fcf4",
        "type": "twilio-api",
        "z": "5aaca332.83ed4c",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DoMeNowApp Twilio Service"
    },
    {
        "id": "7bfcbfb0.b23e8",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": ""
    },
    {
        "id": "515a1f24.d62ec",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/chat",
        "wholemsg": "false"
    },
    {
        "id": "80db99b9.2656f8",
        "type": "twilio-api",
        "z": "3d6329c5.e74616",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "DriList Sms Service for chatbot"
    },
    {
        "id": "90ba38c0.44c918",
        "type": "twilio-api",
        "z": "",
        "sid": "AC909f1981261f4461abbc7985bd202897",
        "from": "12312259665 ",
        "name": "Drilist SMS service"
    },
    {
        "id": "ba4d189b.79c998",
        "type": "function",
        "z": "bd3a143c.e87078",
        "name": "F to C",
        "func": "msg.payload = (Math.round((msg.payload - 32) * 50 / 9)/10)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 158,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6627c2e.5b9263c",
        "type": "function",
        "z": "e079261f.947b38",
        "name": "Dimmer value to switch",
        "func": "if(msg.payload === 0) {\n    msg.payload = false;\n}\nelse {\n    msg.payload = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 85,
        "wires": [
            []
        ]
    },
    {
        "id": "22848c23.6f9ff4",
        "type": "function",
        "z": "94340f78.707da",
        "name": "currState to payload",
        "func": "msg.payload = JSON.parse(msg.payload)\nvar msg2 = {}\nmsg2.payload = msg.payload.currState;\nreturn msg2;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 289,
        "y": 132,
        "wires": [
            []
        ]
    },
    {
        "id": "e355d2e6.ae2c5",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "phone",
        "func": "msg.payload = {\n    query: \"table:users AND virtual_phone:\" + msg.user_data.phone\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "cec4c6e5.f78928"
            ]
        ]
    },
    {
        "id": "64c8860.929b27c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Going to save user if not found in db",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 489,
        "y": 287,
        "wires": []
    },
    {
        "id": "b5b302a.6e2f",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_output, user_data = msg.user_data, payload = {};\n\nmsg.verification_code = rand();\n\nif(isEmpty(db_data)) {\n    var userObj = {\n        table       : \"users\",\n        access_token:  null,\n        phone       :  parseInt(user_data.phone),\n        virtual_phone: parseInt(user_data.phone),\n        security_level: 0,\n        firstname         : parseInt(user_data.phone) || \"\",\n        lastname          : \"\",\n        code:         msg.verification_code,\n        type: {\n            \"public\": \"public\"\n        },\n        data: {},\n        device_id: msg.user_data.device_id || \"\",\n        push_accepted: msg.push_accepted || 1\n    };\n}else {\n    var userObj = db_data[0];\n    \n    userObj.phone           = userObj.phone || parseInt(user_data.phone) ;\n    userObj.virtual_phone   = userObj.virtual_phone || parseInt(user_data.phone) ;\n    userObj.long_url        = userObj.long_url || \"\";\n    userObj.access_token    = userObj.access_token ;\n    userObj.security_level  = userObj.security_level;\n    userObj.email           = userObj.email || \"\";\n    userObj.firstname       = userObj.firstname || \"\";\n    userObj.lastname        = userObj.lastname || \"\";\n    userObj.code            = msg.verification_code;\n    userObj.data            = userObj.data;\n    userObj.image           = userObj.image || \"\";\n    userObj.device_id       = msg.user_data.device_id || userObj.device_id;\n    userObj.push_accepted   = msg.push_accepted || userObj.push_accepted;\n}\n\n\n\nmsg.security_level = userObj.security_level ;\nmsg.payload = userObj;\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "64c8860.929b27c",
                "236b0354.22847c",
                "822b5d66.8ac45"
            ]
        ]
    },
    {
        "id": "9b820297.38aa",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/login",
        "method": "post",
        "swaggerDoc": "",
        "x": 98.00000381469727,
        "y": 181.00000095367432,
        "wires": [
            [
                "e30cf75b.3c38b8",
                "9f3abd51.1122b"
            ]
        ]
    },
    {
        "id": "e30cf75b.3c38b8",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to user_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "e355d2e6.ae2c5"
            ]
        ]
    },
    {
        "id": "cec4c6e5.f78928",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by phone",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 668.9999694824219,
        "y": 178.99999237060547,
        "wires": [
            [
                "13e799d.77bd166"
            ]
        ]
    },
    {
        "id": "13e799d.77bd166",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_output",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 180,
        "wires": [
            [
                "b5b302a.6e2f"
            ]
        ]
    },
    {
        "id": "822b5d66.8ac45",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "save user to db",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 418.00001525878906,
        "y": 362.00002002716064,
        "wires": []
    },
    {
        "id": "82bc720b.688b",
        "type": "http in",
        "z": "5aaca332.83ed4c",
        "name": "",
        "url": "/api/verify",
        "method": "get",
        "swaggerDoc": "",
        "x": 102,
        "y": 763,
        "wires": [
            [
                "d934be59.31d7e",
                "2bb50a4e.e465a6"
            ]
        ]
    },
    {
        "id": "d934be59.31d7e",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to request_data",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "request_data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 327,
        "y": 764,
        "wires": [
            [
                "53591a00.2eb7c8"
            ]
        ]
    },
    {
        "id": "53591a00.2eb7c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. user_phone",
        "func": "if(isEmpty(msg.request_data.phone)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`phone` is required to fullfil request\", data: null};\n}else if(isEmpty(msg.request_data.code)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`code` is required to fullfil request\", data: null};\n }\n//else if(isEmpty(msg.request_data.device_id)){\n//     msg.api_status = \"API_ERROR\";\n//     msg.payload    = {status: 400, error: true, msg: \"`device_id` is required to fullfil request\", data: null};\n//}\nelse if(isEmpty(msg.request_data.push_accepted)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"`push_accepted` is required to fullfil request\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table: users AND virtual_phone:\"+ msg.request_data.phone\n    };    \n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 527,
        "y": 764,
        "wires": [
            [
                "6e9ce6fa.adc298"
            ]
        ]
    },
    {
        "id": "236b0354.22847c",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "security_level",
        "property": "security_level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 422.00001525878906,
        "y": 423.0000247955322,
        "wires": [
            [
                "93b10df0.8c22c"
            ],
            [
                "6b8489f9.54ef98"
            ]
        ]
    },
    {
        "id": "3d8a6f38.8353d",
        "type": "cloudant in",
        "z": "5aaca332.83ed4c",
        "name": "get user by token",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 908.9999694824219,
        "y": 802.0000305175781,
        "wires": [
            [
                "cd6b4c5.0a66ab"
            ]
        ]
    },
    {
        "id": "cd6b4c5.0a66ab",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "Move to db_user",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 209,
        "y": 844,
        "wires": [
            [
                "589646ee.f417c8"
            ]
        ]
    },
    {
        "id": "589646ee.f417c8",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "check verify code",
        "func": "var db_data = msg.db_user, request_data = msg.request_data;\nvar response = {};\n\nfunction check_obj(obj){\n    if(obj === null || obj === undefined){\n        return 0;\n    }else{\n        return Object.keys(obj).length;\n    }\n}\n\nif(check_obj(db_data) > 0) {\n    var db_code = db_data[0].code;\n    //db_code = \"1234\";\n    if(String(db_data[0].virtual_phone).length == 5){\n        if(request_data.code == 2882){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else if(String(db_data[0].virtual_phone).length > 7 &&  String(db_data[0].virtual_phone).length <= 12){\n        if(parseInt(request_data.code) == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        } \n    }else{\n        if(request_data.code == db_code){\n            response.status = \"success\";\n        }else{\n            response.status = \"fail\";\n            response.msg = \"Invalid Code\";\n        }    \n    }\n}\nelse{\n    response.status = \"fail\";\n    response.msg = \"Invalid Token\";\n}\n\nmsg.payload = response;\n\nnode.warn(\"inside check verify code method\");\nnode.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 844,
        "wires": [
            [
                "95e69443.affee8"
            ]
        ]
    },
    {
        "id": "d2d9371d.8c8668",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 1029.0000305175781,
        "y": 980.0000381469727,
        "wires": []
    },
    {
        "id": "95e69443.affee8",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "Status",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 249,
        "y": 924,
        "wires": [
            [
                "6844749e.b18e1c"
            ],
            [
                "4be9133b.06943c"
            ]
        ]
    },
    {
        "id": "9ad2cef2.8181e",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "2. return menu page",
        "func": "var response = {\n    \"page_id\":  return_page_id(msg.payload.virtual_phone),\n    \"access_token\": msg.access_token,\n    \"user_id\":  msg.payload._id,\n    \"status\":   \"valid\"\n};\nmsg.payload = response;\nreturn msg;\n\nfunction return_page_id(number){\n    if(number){\n        if( ( Number(number) === 12313426657) || (Number(number) === 12068835352) ){ //Jessica Rohloff/Kyle  Number then return 26\n            return 26 ;//stumped category page......\n        }else{\n            return 2; //category page \n        }\n    }else{\n        node.warn(\"When user virtual_phone is undefined in verification process.\");\n        return 1; //else login page\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 759,
        "y": 944,
        "wires": [
            [
                "d2d9371d.8c8668",
                "2e62384d.25baa8"
            ]
        ]
    },
    {
        "id": "b83750a7.3dda8",
        "type": "cloudant out",
        "z": "5aaca332.83ed4c",
        "name": "update security level",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 779,
        "y": 884,
        "wires": []
    },
    {
        "id": "6844749e.b18e1c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "Merge data for update",
        "func": "var db_data = msg.db_user[0] ,\n    body    = msg.request_data ;\n    \nmsg.access_token = token();\n\ndb_data.access_token   = msg.access_token;\ndb_data.security_level = 1 ;\ndb_data.device_id = body.device_id ;\ndb_data.push_accepted = parseInt(body.push_accepted) || 1 ;\n\nmsg.payload = db_data;\nreturn msg;\n\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 924,
        "wires": [
            [
                "9ad2cef2.8181e",
                "b83750a7.3dda8"
            ]
        ]
    },
    {
        "id": "4be9133b.06943c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "1. return login page",
        "func": "var payload = {\n    \"page_id\":  1,\n    \"status\":   \"invalid\"\n};\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 479,
        "y": 1004,
        "wires": [
            [
                "42ea84ba.4a481c",
                "9caf7b90.abc7a8"
            ]
        ]
    },
    {
        "id": "9f3abd51.1122b",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "API Login ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 269,
        "y": 142.99999237060547,
        "wires": []
    },
    {
        "id": "2bb50a4e.e465a6",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Verify screeen",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326,
        "y": 703,
        "wires": []
    },
    {
        "id": "93b10df0.8c22c",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "11. return verify page & ac",
        "func": "var req_body = msg.user_data ;\nif(msg.user_data.phone){\n  \n    if(String(msg.user_data.phone).length === 4){\n        msg.sendverification = \"no_need_to_send\";\n        msg.api_response = {\n            \"page_id\":      11,\n            \"code\" : msg.verification_code\n        };\n    }else{\n        if(String(msg.user_data.phone).length >= 7 && String(msg.user_data.phone).length <= 12){\n            msg.sendverification = \"need_to_send_verification\" ;\n            msg.api_response = {\n                \"page_id\":      11,\n                \"code\" : msg.verification_code\n            };    \n        }else{\n            msg.sendverification = \"no_need_to_send\" ;\n            msg.api_response = {\n                \"page_id\":      1,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n        }\n    }\n}else{\n    msg.sendverification = \"no_need_to_send\" ;\n    msg.api_response = {\n                \"page_id\":      1,\n                \"code\" : msg.verification_code,\n                \"msg\"  : \"Invalid phone number\"\n            };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 675.88671875,
        "y": 343.48828125,
        "wires": [
            [
                "9b48d0d1.3a54"
            ]
        ]
    },
    {
        "id": "9b48d0d1.3a54",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "sendverification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "need_to_send_verification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 937.515625,
        "y": 361.25,
        "wires": [
            [
                "8c93eeec.15939"
            ],
            [
                "8e617e0a.63d52"
            ]
        ]
    },
    {
        "id": "8c93eeec.15939",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "send sms code",
        "func": "var user_data = msg.user_data;\nvar code = msg.verification_code || 1234;\nmsg.topic = user_data.phone || 12145644732;\nmsg.payload = \"Your verification code for the DoMeNow app is : \" + code;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120.515625,
        "y": 313,
        "wires": [
            [
                "316ae0bc.6e9f3",
                "e2bc87de.c17e78",
                "130f89b6.e85346"
            ]
        ]
    },
    {
        "id": "e2bc87de.c17e78",
        "type": "twilio out",
        "z": "5aaca332.83ed4c",
        "service": "_ext_",
        "twilio": "2ff3abf2.78fcf4",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 1399.515625,
        "y": 292,
        "wires": []
    },
    {
        "id": "316ae0bc.6e9f3",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1410.515625,
        "y": 336,
        "wires": []
    },
    {
        "id": "5e5d801a.231d",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 1545.515625,
        "y": 236.25,
        "wires": []
    },
    {
        "id": "130f89b6.e85346",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1367.3828125,
        "y": 236.16796875,
        "wires": [
            [
                "5e5d801a.231d"
            ]
        ]
    },
    {
        "id": "8e617e0a.63d52",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1099.640625,
        "y": 370.1640625,
        "wires": [
            [
                "d3dc7932.f1f3a8",
                "3495d52.1d45a2a"
            ]
        ]
    },
    {
        "id": "d3dc7932.f1f3a8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "Api result",
        "x": 1371.62499076128,
        "y": 387.15234177559614,
        "wires": []
    },
    {
        "id": "3495d52.1d45a2a",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "api_response ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1385,
        "y": 432,
        "wires": []
    },
    {
        "id": "7c9bd36a.800dfc",
        "type": "http in",
        "z": "1bc13036.e3b82",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "post",
        "swaggerDoc": "",
        "x": 85,
        "y": 131.00001525878906,
        "wires": [
            [
                "6ee54ff6.df69e"
            ]
        ]
    },
    {
        "id": "6ee54ff6.df69e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Handler",
        "func": "var req = msg.payload;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req body must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n    // if(!(\"api\" in req)){\n    //     msg.api_response = \"API_ERROR\";\n    //     msg.payload = {status: 400, error: true, msg: \"Body must must be wrapped with `api` key.\", data: null};\n    // }else{\n    //     msg.req_body = req.api;\n    // }\n    msg.req_body = populate_content(req.app) ;\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    return obj.api;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 245.00001525878906,
        "y": 248.00001525878906,
        "wires": [
            [
                "7d44e24.4d6b11c"
            ]
        ]
    },
    {
        "id": "7d44e24.4d6b11c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 371.0000305175781,
        "y": 389.0000305175781,
        "wires": [
            [
                "25d70d09.b4fa42"
            ],
            [
                "863d36a6.9affc8"
            ]
        ]
    },
    {
        "id": "25d70d09.b4fa42",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 525,
        "y": 266.00001525878906,
        "wires": []
    },
    {
        "id": "863d36a6.9affc8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate body",
        "func": "var body = msg.req_body;\n\nif(isEmpty(body.table)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table` parameter must be set to save record\", data: null};\n}else if(isEmpty(body.table_data)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`table_data` parameter must be set to save record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n    msg.payload_table = body.table ;\n    msg.payload_data  = body.table_data ;\n    msg.access_token  = body.access_token ;\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 548,
        "y": 530.0000305175781,
        "wires": [
            [
                "2da8026d.28dc2e"
            ]
        ]
    },
    {
        "id": "2da8026d.28dc2e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 668,
        "y": 673.0000305175781,
        "wires": [
            [
                "a2ccf1f4.33b25"
            ],
            [
                "d6ab12c2.6dc92"
            ]
        ]
    },
    {
        "id": "a2ccf1f4.33b25",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 784,
        "y": 590.0000152587891,
        "wires": []
    },
    {
        "id": "d6ab12c2.6dc92",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "payload_table",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_user",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_short_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_detail_to_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_assistant",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_group_detail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_to_groups",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "add_assistant_into_group",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_message_schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete_schedule_message",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 16,
        "x": 815.0001831054688,
        "y": 940.0001220703125,
        "wires": [
            [
                "5a40e3c0.6a7c7c"
            ],
            [
                "7a1fa12a.ae0fc"
            ],
            [
                "af77daa4.7a3808"
            ],
            [
                "1ea39368.4d2cbd"
            ],
            [
                "910f835e.b1997"
            ],
            [
                "8047b1c2.00b14"
            ],
            [
                "b43c0e6e.e29ac"
            ],
            [
                "f22f6e7b.b09f7"
            ],
            [
                "d5a7251d.86fb18"
            ],
            [
                "408043d6.f202ec"
            ],
            [
                "239a4a3b.ed4ef6"
            ],
            [
                "2c021dd8.471292"
            ],
            [
                "6ba779a9.034fd8"
            ],
            [
                "c824032e.2a235"
            ],
            [
                "ff7f2320.a0c9c"
            ],
            [
                "9e907e9.bafc48"
            ]
        ]
    },
    {
        "id": "5a40e3c0.6a7c7c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Create Detail",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 158.00003051757812,
        "wires": [
            [
                "8340ddf2.852ea"
            ]
        ]
    },
    {
        "id": "9e907e9.bafc48",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "UnExpacted Case",
        "func": "msg.payload = {status: 400, error: true, msg: \"`table` field value is unexpacted.\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1277.000373840332,
        "y": 2459.001091003418,
        "wires": [
            [
                "4925e8a7.371308"
            ]
        ]
    },
    {
        "id": "4925e8a7.371308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1470.0005569458008,
        "y": 2459.001009941101,
        "wires": []
    },
    {
        "id": "fc1044e8.8cfd28",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "detail_calculation",
        "func": "var big_record_tables   = {} , \n    detail              = {},\n    templates_arr       = msg.templates_arr ,\n    child_task          = isEmpty(msg.child_task_obj) ? null : msg.child_task_obj,\n    timeout             = isEmpty(msg.timeout_obj) ? null : msg.timeout_obj ,\n    location            = isEmpty(msg.location_obj) ? null : msg.location_obj,\n    user                = isEmpty(msg.user_obj) ? null : msg.user_obj,\n    task                = isEmpty(msg.task_obj) ? null : msg.task_obj,\n    user_arr            = msg.users_arr ,\n    form_data           = msg.form_data ,\n    details_arr         = [];\n    msg.doCreate_optional_detail = false ;\n \n     \n    //sort the detail_arr as by created at\n    details_arr =  msg.details_arr.sort(function(a,b){\n        details_arr = details_arr.sort(function(a,b){\n        \treturn (a.createdAt - b.createdAt);\t\n        });\n    });\n    \nbig_record_tables.user  = user ;\nbig_record_tables.task  = task ;\n\n//setting up some obj from big_record_tables\nbig_record_tables.task.details = {\n    timeout : create_timeout_list_obj(timeout, templates_arr, user_arr, \"timeout\") ,\n    user_calculated: create_timeout_list_obj(timeout, templates_arr, user_arr, \"user_calculated\"),\n    location : get_location_obj(location) \n} ;\n\n\n//create detail obj to save into master_table;\ndetail.table                            = \"details\";\ndetail.task_id                          = task._id ? [task._id] : null ;\ndetail.intent_task_id                   = task._id ;\ndetail.child_task_id                    = task.child_default_task_id || null;\ndetail.user_id                          = user._id || null;\ndetail.from_user_id                     = set_from_user(form_data.from_user_id) ;\n\ndetail.page_id                          = check_number(form_data.page_id) || generate_page_id();\ndetail.from_page_id                     = check_number(form_data.from_page_id) || generate_page_id();\ndetail.to_page_id                       = task.child_default_task_id ? return_page_id(form_data.page_id) : 0;\n\ndetail.synchronized                     = 0 ;\ndetail.processed                        = 0 ;\ndetail.status                           = 0 ;\ndetail.read                             = 0 ;\ndetail.display_if_empty                 = task.display_if_empty || 1;\ndetail.date_created                     = new Date().toJSON() ;\ndetail.due_date                         = big_record_tables.task.details.user_calculated.delivery_due;\ndetail.offline_expiration_seconds       = task.offline_expiration_time ;\ndetail.priority                         = 1;\ndetail.type                             = {\"private\": \"private\"};\ndetail.image                            = task.image ;\ndetail.from_user                        = {\n                                            firstname   : user.firstname || \"\" ,\n                                            lastname    : user.lastname || \"\" ,\n                                            email       : user.email || \"\",\n                                            phone       : user.phone || \"\"\n                                        };\ndetail.user_incoming                    = {\n                                            note    :   form_data.note ,\n                                            message :   form_data.note\n                                        } ;\n\n//as per discussion with client on 11th August evening and on Google doc(DoMeNow) Item 8.0 there is no need of \n//detail.watson_incoming messages. so just commneted here may be nedded in future.\n// detail.watson_incoming                  = { \n//                                             message :   \"Watson response to : \" + form_data.note,\n//                                             response : {},\n                                            \n//                                         } ;\ndetail.template                         = {\n                                            details : get_template(task.detail_template_id, templates_arr)\n                                        };\n\ndetail.timeout                          = big_record_tables.task.details.timeout ;\ndetail.user_calculate                   = big_record_tables.task.details.user_calculated ;\ndetail.location                         = big_record_tables.task.details.location ;\ndetail.default                          = {\n                                            parent : null,\n                                            allchildren: null\n                                        };\ndetail.count_status\t                    = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.count\t                        = {\n                                            active : 1,\n                                            unread : 1\n                                        };\ndetail.count_if                         = {\n                                            active : 1,\n                                            unread : 0\n                                        };\ndetail.createdAt                        = Number(new Date().getTime()) ;\n\nmsg.template_arr = templates_arr ;\nmsg.payload      = detail ;\n\nif(check_need_to_create_second_detail(form_data.from_user_id)){\n    var second_detail  = JSON.parse(JSON.stringify(detail));\n        second_detail.from_user_id  = form_data.from_user_id[1];\n        second_detail.user_incoming = {\n            note    :   form_data.to_note ,\n            message :   form_data.to_note\n        } ;\n\n        second_detail.watson_incoming = {\n            message :   \"Watson response to : \" + form_data.to_note,\n            response : {},\n        } ;\n        msg.doCreate_optional_detail = true;\n        msg.option_detail = second_detail;\n}\n\nmsg.api_response = {status:200, error: false, msg: \"Record created successfully\", data: detail};\nreturn msg;\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    if(timeout_obj === undefined || timeout_obj === null){\n        return {};\n    }\n    \n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                var update_obj = JSON.parse(JSON.stringify(timeout_obj)) ;\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(list !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        update_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        update_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        update_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                delete update_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return update_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(key == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    if(typeof obj === \"object\"){\n        return Object.keys(obj).length;\n    }else{\n        return 0 ;\n    }\n}\n\nfunction get_location_obj(locations){\n    if(locations === undefined || locations === null){\n        return {};\n    }\n    var obj = {};\n\n    if(locations !== null && locations !== undefined){\n        for(var i=0; i< locations.length; i++){\n            if(locations[i]){\n                obj[locations[i]._id] = locations[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_template(id, template){\n    if(template === undefined || template === null){\n        return {};\n    }\n    \n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction check_number(n){\n    if(typeof n === \"string\" && n !== \"\"){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n\nfunction generate_page_id(){\n    return new Date().getTime();\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return attr;\n    }\n    i++;\n  }\n  return null;\n}\n\nfunction get_obj_from_array(id, arr){\n    if(arr === null || arr === undefined){\n        return {};\n    }\n\n    if(id instanceof Object){\n        return id ;    \n    }\n\n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction calculate_to_page_id(task_obj, details_arr){\n\n    var page_id = false ;\n    if(task_obj !== null && details_arr !== undefined){\n        var task_id = task_obj._id ;\n        if(details_arr.length){\n            for(var i=0; i < details_arr.length; i++){\n                if(details_arr[i].task_id === task_id){\n                  page_id = details_arr[i].to_page_id ;\n                }\n            }\n            if(!page_id){\n              return generate_page_id(6);\n            }else{\n              return page_id;\n            }\n        }else{\n            page_id = task_obj.page_id ;\n        }\n    }else{\n        return generate_page_id(6);\n    }\n}\n\n\nfunction return_page_id(page_id){\n    return generate_page_id() ;\n}\n\nfunction set_from_user(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return item[0] ;\n    }else{\n        return item || null;\n    }\n}\n\nfunction check_need_to_create_second_detail(item){\n    if(Object.prototype.toString.call(item) === \"[object Array]\"){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2599.0006408691406,
        "y": 126.62107467651367,
        "wires": [
            [
                "27237117.a1f3ce",
                "72b3a1c3.d8c1",
                "3a83b028.174ce",
                "d4893bd6.73baf8",
                "b9ef6f80.eb9b1",
                "aa6e064d.f28708"
            ]
        ]
    },
    {
        "id": "27237117.a1f3ce",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "property": "child_task_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2832.0001678466797,
        "y": 275.6211438179016,
        "wires": [
            [
                "76034db8.945264"
            ],
            [
                "fb3e5d3b.f550e"
            ]
        ]
    },
    {
        "id": "76034db8.945264",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "log",
        "func": "node.warn(\"No need to create optional task\");\nmsg.detail = msg.payload ;\nmsg.isCreateOptionalTask = false ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3029.000175476074,
        "y": 255.62113344669342,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "fb3e5d3b.f550e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "optional task",
        "func": "var default_task        = msg.child_task ? msg.child_task[0] : null ,\n    detail              = msg.payload ,\n    user_obj            = msg.user_obj ? msg.user_obj[0]: {} ,\n    optional_task       = {}; \n    \nif(!isEmpty(default_task)){\n    optional_task = {\n        table                   : \"task_table\",\n        task_name               : detail.user_incoming.message, \n        user_id                 : user_obj._id || detail.user_id,\n        page_id                 : detail.to_page_id, \n        from_page_id            : detail.page_id,\n        parent_id               : detail.task_id, \n        header_template_id      : default_task.header_template_id || null,\n        detail_template_id      : default_task.detail_template_id || null,\n        footer_template_id      : default_task.footer_template_id || null,\n        timeout_id              : default_task.timeout_id || null,\n        location_id             : default_task.location_id || null,\n        child_default_task_id   : default_task.child_default_task_id || null,\n        child_default_task_name : default_task.child_default_task_name || null,\n        date_created            : new Date().toJSON(),\n        type                    : default_task.type || \"private\",\n        status                  : default_task.status || 0,\n        category                : default_task.category || null,\n        additional_data_fn      : default_task.additional_data_fn || null,\n        optional_data           : default_task.optional_data || {},\n        required_data           : default_task.required_data || {},\n        offline_expiration_time : default_task.offline_expiration_time || 0,\n        display_if_empty        : default_task.display_if_empty || 1 ,\n        count_status : {\n            active : 1,\n            unread : 0,\n        },\n        count : {\n            active : 1,\n            unread : 0,\n        },\n        count_if : {\n            active : 1,\n            unread : 0,\n        }\n    };\n    msg.isCreateOptionalTask = true ;\n    msg.detail = detail ;\n    msg.payload = optional_task ;\n}else{\n    msg.isCreateOptionalTask = false ;\n    msg.detail = detail ;\n    msg.payload = \"No need to create optional task\";\n}\n\nnode.warn(\"Before going to init loop method\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n    if(obj instanceof Object){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(obj instanceof Array){\n        if(obj.length){\n            return false ;\n        }else {\n            return true ;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3050.000175476074,
        "y": 297.6211334466934,
        "wires": [
            [
                "aa1ef719.92f148"
            ]
        ]
    },
    {
        "id": "aa1ef719.92f148",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "isCreateOptionalTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3254.000762939453,
        "y": 256.6211395263672,
        "wires": [
            [
                "f667d3d1.e4d44",
                "4aaf74bf.3f4cac",
                "79a95d3b.fee184"
            ],
            [
                "f667d3d1.e4d44"
            ]
        ]
    },
    {
        "id": "f667d3d1.e4d44",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "init loop",
        "func": "var detail_obj = msg.detail ;\nif(isEmpty(detail_obj.timeout)){\n    msg.timeoutLength = 0;\n}else{\n    msg.timeoutLength = check_obj(detail_obj.timeout.timeout_list) ;    \n}\nmsg.count = 0;\nreturn msg;\n\n\nfunction check_obj(obj){\n    if(obj !== undefined && obj !== null && obj !== \"\"){\n        return Object.keys(obj).length ;\n    }else{\n        return 0;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3446.000778198242,
        "y": 300.62116146087646,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "183d69a0.d38bf6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "counter",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "timeoutLength",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3722.1968307495117,
        "y": 294.62118434906006,
        "wires": [
            [
                "65c98f5a.2f37d"
            ],
            [
                "36a38d76.bf4c62"
            ]
        ]
    },
    {
        "id": "7894a745.f32498",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "count++",
        "func": "msg.count++ ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3825.1970748901367,
        "y": 189.62118339538574,
        "wires": [
            [
                "183d69a0.d38bf6"
            ]
        ]
    },
    {
        "id": "65c98f5a.2f37d",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Timeout Processor",
        "func": "var detail_obj      = msg.payload ,\n    template_arr    = msg.templates,\n    users_arr       = msg.user_arr;\n\nif(compare_dates(detail_obj.due_date)){\n    msg.payload = create_detail_by_timeout_processor();\n}else{\n    msg.payload = null;\n    msg.apiStatus = {status: 400, msg: \"Due date already passout so cann't be processed details\"};\n}\n\nreturn msg;\n\nfunction compare_dates(due_date){\n    var current_unix_date   = new Date().getTime(),\n        due_unix_date       = new Date(due_date).getTime();\n        \n    if(due_unix_date > current_unix_date){\n        return true ;\n    }else{\n        return false ;\n    }\n}\n\nfunction create_detail_by_timeout_processor(){\n    var detail = JSON.parse(JSON.stringify(detail_obj));  \n    \n    if(detail.timeout !== null){\n        if(check_obj(detail.timeout.timeout_list) > 0){\n            var clone_obj = {\n                table                       : \"details\",\n                task_id                     : detail_obj.task_id ,\n                child_task_id               : detail_obj.child_task_id,\n                user_id                     : detail_obj.user_id,\n                page_id                     : detail_obj.page_id,\n                synchronized                : detail_obj.synchronized,\n                processed                   : detail_obj.processed,\n                status                      : detail_obj.status,\n                read                        : detail_obj.read,\n                display_if_empty            : detail_obj.display_if_empty,\n                date_created                : detail_obj.date_created,\n                due_date                    : detail_obj.due_date,\n                offline_expiration_seconds  : detail_obj.offline_expiration_seconds,\n                priority                    : detail_obj.priority,\n                user_incoming               : detail_obj.user_incoming ,\n                watson_incoming             : detail_obj.watson_incoming,\n                template                    : detail_obj.template,\n                timeout                     : create_timeout_list_obj(detail.timeout, template_arr, users_arr, \"timeout\") ,\n                user_calculated             : create_timeout_list_obj(detail_obj.timeout, template_arr, users_arr, \"user_calculated\"),\n                location                    : detail_obj.location,\n                default                     : detail_obj.default,\n                createdAt                   : detail_obj.createdAt,\n                count                       : detail_obj.count\n            };\n   \n            return clone_obj ;\n        }else{\n            return {} ;\n        }   \n    }else{\n        return {};\n    }\n}\n\nfunction create_timeout_list_obj(timeout_obj, templates, users, type){\n    switch(type){\n        case \"timeout\" : {\n            if(check_obj(timeout_obj.timeout_list) > 1){\n                \n                for(var list in timeout_obj.timeout_list){\n                    if(parseInt(list) !== getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[list].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[list].delivery_user_ids, users);\n                        timeout_obj.timeout_list[list].message = timeout_obj.timeout_list[list].message_id ? get_template(timeout_obj.timeout_list[list].message_id, templates) : null;\n                        timeout_obj.timeout_list[list].from = timeout_obj.timeout_list[list].from_id ? get_template(timeout_obj.timeout_list[list].from_id, templates) : null;\n                    }\n                }\n                \n                delete timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)];\n                return timeout_obj ;   \n            }else{\n                return {} ;\n            }\n            break;\n        }\n        \n        case \"user_calculated\" : {\n            if(timeout_obj.timeout_list){\n                for(var key in timeout_obj.timeout_list){\n                    if(parseInt(key) == getAttributeByIndex(timeout_obj.timeout_list, 0)){\n                        timeout_obj.timeout_list[key].delivery_user_ids = get_obj_from_array(timeout_obj.timeout_list[key].delivery_user_ids, users);\n                        timeout_obj.timeout_list[key].template = {\n                            message : timeout_obj.timeout_list[key].message_id ? get_template(timeout_obj.timeout_list[key].message_id, templates) : null ,\n                            from    : timeout_obj.timeout_list[key].from_id ? get_template(timeout_obj.timeout_list[key].from_id, templates) : null\n                        };\n                    }\n                }\n\n                return timeout_obj.timeout_list[getAttributeByIndex(timeout_obj.timeout_list, 0)] ; \n            }else{\n                return {} ; \n            }\n            break;\n        }\n        \n        default: {\n            return {};\n        }\n    }\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction get_template(id, template){\n    var obj = {} ;\n    if(template !== null){\n        for(var i=0; i< template.length; i++){\n            if(id === template[i]._id){\n                obj = template[i] ;\n            }\n        }    \n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction get_obj_from_array(id, arr){\n\n    if(id instanceof Object){\n        return id ;    \n    }\n    \n    var obj = {} ;\n    if(arr !== null && arr.length){\n        for(var i=0; i< arr.length; i++){\n            if(arr[i]._id === id){\n                obj[arr[i]._id] = arr[i] ;\n            }\n        }\n        return obj ;\n    }else{\n        return obj ;\n    }\n}\n\nfunction getAttributeByIndex(obj, index){\n  var i = 0;\n  for (var attr in obj){\n    if (index === i){\n      return parseInt(attr);\n    }\n    i++;\n  }\n  return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3935.197090148926,
        "y": 289.04706382751465,
        "wires": [
            [
                "7894a745.f32498",
                "3216a994.9589e6",
                "277523b2.49c11c"
            ]
        ]
    },
    {
        "id": "36a38d76.bf4c62",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "indicator",
        "func": "msg.payload = \"Timeout processor executes sucessfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3865.1971588134766,
        "y": 352.6211853027344,
        "wires": [
            [
                "90317658.28beb8",
                "7cad6d6c.a42054"
            ]
        ]
    },
    {
        "id": "799f9f2c.20ce4",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2429.031234741211,
        "y": 96.0468807220459,
        "wires": [
            [
                "236b74f3.1c448c"
            ],
            [
                "fc1044e8.8cfd28"
            ]
        ]
    },
    {
        "id": "90317658.28beb8",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4072.196762084961,
        "y": 335.04700660705566,
        "wires": []
    },
    {
        "id": "2e78e0d1.6e91c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var payload         = msg.payload ,\n    task            = msg.task_obj , \n    user            = msg.user_obj, \n    task_id         = msg.task_id; \n    access_token    = msg.access_token;\n    page_id         = msg.page_id;\n    detail          = msg.details_obj;\n\nif(isEmpty(payload.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to populate records from cloudant views\", data: null};\n}else{\n    var db_records  = populate_records(payload.rows),\n        task_obj    = populate_obj(db_records.tasks, task_id),\n        user        = populate_user(db_records.users, access_token);\n    \n    if(isEmpty(task_obj)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `task obj` with `task_id`\", data: null};\n    }else if(isEmpty(user)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"Unable to find `user obj` with `access_token`\", data: null};\n    }else{\n        msg.api_status      = \"API_SUCCESS\";\n        msg.user_obj        = user ;\n        msg.task_obj        = task_obj ;\n        msg.templates_arr   = db_records.templates;\n        msg.details_arr     = db_records.details;\n        msg.users_arr       = db_records.users ;\n        msg.child_task_obj  = task_obj.child_default_task_id ? populate_obj(db_records.tasks, task_obj.child_default_task_id) : null ;\n        msg.timeout_obj     = task_obj.timeout_id ? populate_obj(db_records.timeouts, task_obj.timeout_id) : null;\n        msg.location_obj    = task_obj.location_id ? populate_obj(db_records.locations, task_obj.location_id): null;\n    }\n}\n\nreturn msg;\n\nfunction populate_records(list){\n    var task_arr = [], detail_arr = [], user_arr = [], templates_arr = [], location_arr = [], timeout_arr = [];\n    \n    for(var itr in list){\n        var records = list[itr].value;\n        if(records.table == \"task_table\"){\n            task_arr.push(records);\n        }\n        \n        if(records.table == \"details\"){\n            detail_arr.push(records);\n        }\n        \n        if(records.table == \"users\"){\n            user_arr.push(records);\n        }\n        \n        if(records.table == \"templates\"){\n            templates_arr.push(records);\n        }\n        \n        if(records.table == \"location\"){\n            location_arr.push(records);\n        }\n        \n        if(records.table == \"timeout\"){\n            timeout_arr.push(records);\n        }\n    }\n    var obj = {tasks: task_arr, details: detail_arr, users: user_arr, templates: templates_arr, locations: location_arr, timeouts: timeout_arr};\n    return obj;\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    \n    for(var itr in list){\n        if(id == list[itr]._id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    if(isEmpty(access_token)) return obj;\n    \n    for(var itr in users){\n        if(access_token == users[itr].access_token){\n            obj = users[itr];\n        }\n    }\n    \n    return obj;\n}\n    \nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2301.0312271118164,
        "y": 132.04687309265137,
        "wires": [
            [
                "799f9f2c.20ce4"
            ]
        ]
    },
    {
        "id": "236b74f3.1c448c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2562.0312423706055,
        "y": 66.04689884185791,
        "wires": []
    },
    {
        "id": "8340ddf2.852ea",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "validate",
        "func": "var access_token = msg.req_body.access_token ;\nvar table_data = msg.req_body.table_data ;\n\nif(table_data === null || table_data === undefined){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide valid json object as api request body.\"};\n    return msg;\n}else if(access_token === null || access_token === undefined || access_token === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `access_token` in api request body\"};\n    return msg;\n}else if(table_data.note === null || table_data.note === undefined || table_data.note === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `note` in api request body\"};\n    return msg;\n}else if(table_data.page_id === null || table_data.page_id === undefined || table_data.page_id === \"\"){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `page_id` in api request body\"};\n    return msg;\n}else if(table_data.from_page_id === null || table_data.from_page_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `from_page_id` in api request body\"};\n    return msg;\n}else if(table_data.task_id === null || table_data.task_id === undefined ){\n    msg.flow_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, type: \"Validation error\", msg: \"Please provide `task_id` in api request body\"};\n    return msg;\n}else{\n    msg.flow_status = \"API_SUCCESS\";\n    msg.form_data    = table_data ;\n    msg.task_id = table_data.task_id ; \n    msg.access_token = access_token ;\n    msg.page_id = table_data.page_id  ;\n    return msg;\n}\n\n\nfunction check_number(n){\n    if(!isNaN(parseInt(n))){\n        return parseInt(n);\n    }else{\n        return n ;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1592.031265258789,
        "y": 130.0468978881836,
        "wires": [
            [
                "855a021b.8aaaa"
            ]
        ]
    },
    {
        "id": "34f7000c.78479",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_create_user_task",
        "func": "var detail_obj          = msg.detail ,\n    ancesstor_arr       = [] ,\n    user_task_arr       = msg.payload ,\n    task_obj            = msg.task_obj[0] ;\n    calculate_user_task = get_user_taskBy_id(detail_obj.user_id, detail_obj.task_id);\n    \nif(check_obj(calculate_user_task) > 0){\n    msg.payload = update_user_task(msg.payload[0], detail_obj.user_id, detail_obj.task_id, 0, 1);\n}else{\n    if(task_obj.parent_id){\n        var user_task = get_user_taskBy_id(detail_obj.user_id, task_obj.parent_id);\n        \n        if(check_obj(user_task) > 0){\n            ancesstor_arr = user_task.ancestors ;   \n            ancesstor_arr.push(task_obj.parent_id);\n        }else{\n            ancesstor_arr.push(task_obj.parent_id);\n        }\n    }\n    \n    msg.payload = {\n        table           : \"user_task\",\n    \ttask_id \t\t: detail_obj.task_id,\n    \tuser_id\t\t\t: detail_obj.user_id,\n    \tpage_id         : parseInt(detail_obj.page_id),\n    \tupdate_read     : 0,\n    \tupdate_active   : 0, \n    \tsynchronized    : 0,\n        status          : 0, \n    \tdate_updated\t: null,\t\n    \tparent_id\t\t: detail_obj.task_id,\n    \tancestors       : ancesstor_arr,\n    \tcount_status\t: {\n    \t   active       : 1,\n    \t   unread       : 1,\n    \t},\n    \tcount\t\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1,\n    \t},\n    \tcount_if\t\t: {\n    \t    active      : 1,\n    \t    unread      : 1\n    \t},\n    \ttemplates\t\t: {},\n    \ttimeout\t\t\t: {},\n    \tcreatedAt       : new Date().getTime()\n    };\n}\nreturn msg;\n\nfunction update_user_task(user_task, user_id, task_id, status, synchronized){\n\n    user_task.synchronized          = synchronized  ;\n    user_task.date_updated          = new Date().toJSON();\n    user_task.templates             = detail_obj.template ;\n    user_task.timeout               = detail_obj.timeout ;\n    user_task.count_status.unread   = detail_obj.read ;\n    user_task.page_id               = parseInt(detail_obj.to_page_id) ;\n    user_task.status                = detail_obj.status || status;\n\n    if(!user_task.update_read){\n        if( ( user_task.count_status.unread === 1 || user_task.count_status.unread === \"1\") && !user_task.count_if.unread ){\n            user_task.count.unread += 1 ;  \n        }\n    }\n\n    if(!user_task.update_active){\n        if( user_task.count_status.active && user_task.count_if.active){\n            user_task.count.active += 1 ;  \n        }\n    }\n    \n    //if(user_task.parent_id) update_user_task(user_task, user_id, user_task.parent_id, 0, 1);\n    \n    user_task.update_read   = 1 ;\n    user_task.update_active = 1 ;\n    \n    return user_task;\n}\n\nfunction get_user_taskBy_id(user_id, task_id){\n    var obj = {};\n    if(user_task_arr !== null && user_task_arr !== undefined){\n        for(var i=0; i< user_task_arr.length; i++){\n            if(\n                user_task_arr[i].user_id        === user_id &&\n                user_task_arr[i].parent_id      === task_id \n            ){\n                    obj = user_task_arr[i];\n            }\n        }\n    }\n    return obj ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n\nfunction check_obj(obj){\n    return Object.keys(obj).length;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 4442.198181152344,
        "y": 384.04706478118896,
        "wires": [
            [
                "b85632f.f6942d",
                "60ebc840.c4c168"
            ]
        ]
    },
    {
        "id": "7cad6d6c.a42054",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var task_id = msg.detail.task_id ,\n    user_id = msg.detail.user_id ;\n    \nmsg.payload = {\n    query: \"table:user_task AND user_id:\" + user_id ,\n    sort : \"_id<string>\"\n};\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4039.1967544555664,
        "y": 389.0470190048218,
        "wires": [
            [
                "f49286a3.60bd48"
            ]
        ]
    },
    {
        "id": "f49286a3.60bd48",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 4212.198379516602,
        "y": 388.0470218658447,
        "wires": [
            [
                "34f7000c.78479"
            ]
        ]
    },
    {
        "id": "855a021b.8aaaa",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "flow_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1777,
        "y": 131.0000114440918,
        "wires": [
            [
                "ebd20539.3bd978"
            ],
            [
                "c8e697b5.8cbfb8"
            ]
        ]
    },
    {
        "id": "ebd20539.3bd978",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1975,
        "y": 101.0000114440918,
        "wires": []
    },
    {
        "id": "b85632f.f6942d",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "User Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4669.000930786133,
        "y": 346.0002098083496,
        "wires": []
    },
    {
        "id": "7936c18d.ddbd1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 4307.165946960449,
        "y": 195.00018692016602,
        "wires": []
    },
    {
        "id": "4aaf74bf.3f4cac",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Optional Task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3458.9696044921875,
        "y": 188.57428121566772,
        "wires": []
    },
    {
        "id": "72b3a1c3.d8c1",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Details",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2804.9692420959473,
        "y": 20,
        "wires": []
    },
    {
        "id": "3a83b028.174ce",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "API_RESPONSE",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2851.9689178466797,
        "y": 232.5742688179016,
        "wires": [
            [
                "d099693.f745198"
            ]
        ]
    },
    {
        "id": "d099693.f745198",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 3028.968925476074,
        "y": 212.57425844669342,
        "wires": []
    },
    {
        "id": "dc6e47ae.829f28",
        "type": "http in",
        "z": "5e22f743.a6a0b8",
        "name": "API HANDLER",
        "url": "/master_api_handler",
        "method": "get",
        "swaggerDoc": "",
        "x": 87.765625,
        "y": 195.74999237060547,
        "wires": [
            [
                "b86a2cb5.013be"
            ]
        ]
    },
    {
        "id": "b86a2cb5.013be",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "Handler",
        "func": "var req = msg.payload ;\n\nif(isEmpty(req)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"req params must be specified.\", data: null};\n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    var obj = populate_content(req.app) ;\n    if(obj.error){\n      msg.api_response = \"API_ERROR\";\n      msg.payload = {status: 400, error: true, msg: \"Unable to parse `app` param json.\", data: null};\n    }else{\n        msg.req_params = obj.data.api;\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 267.765625,
        "y": 281.74999237060547,
        "wires": [
            [
                "d1f9a02e.3a168"
            ]
        ]
    },
    {
        "id": "d1f9a02e.3a168",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 418.765625,
        "y": 279.74999237060547,
        "wires": [
            [
                "e21a6625.bbee68"
            ],
            [
                "194125ed.652ada"
            ]
        ]
    },
    {
        "id": "e21a6625.bbee68",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 598.7656173706055,
        "y": 204.75000381469727,
        "wires": []
    },
    {
        "id": "194125ed.652ada",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate body",
        "func": "var params = msg.req_params;\n\nif(isEmpty(params.type)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`type` parameter must be set to get record\", data: null};\n}else if(isEmpty(params.content)){\n    msg.api_response = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`content` parameter must be set to get record\", data: null};    \n}else{\n    msg.api_response = \"API_SUCCESS\";\n\n    if(!checkObj(params.content)){\n        msg.payload_type = params.type ;\n        msg.payload_content = params.content;\n    }else{\n        var obj = populate_content(params.content) ;\n        if(obj.error){\n          msg.api_response = \"API_ERROR\";\n          msg.payload = {status: 400, error: true, msg: \"Unable to parse `content` param json.\", data: null};\n        }else{\n            msg.payload_type    = params.type ;\n            msg.payload_content = obj.data ;\n        }\n    }\n}\nreturn msg;\n\nfunction isEmpty(obj){\n    if(typeof obj === \"object\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction populate_content(obj){\n    if(typeof obj === \"string\"){\n        try{\n           var response = JSON.parse(obj);\n           return {error: false, data: response , msg: \"Json parse successfully\"};\n        }catch(e){\n            node.warn(e);\n            return {error: true, data: null, msg: JSON.stringify(e) };\n        }\n    }else{\n       return {error: true, msg: \"Param content must be of `string` class.\", data: null} ;\n    }\n}\n\nfunction checkObj(obj){\n    if(typeof obj == \"string\") return true;\n    else return false ;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 587.7655944824219,
        "y": 295.74999237060547,
        "wires": [
            [
                "fac0f585.2f5b08"
            ]
        ]
    },
    {
        "id": "fac0f585.2f5b08",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 739.7655944824219,
        "y": 356.74999237060547,
        "wires": [
            [
                "bd921431.7fd498"
            ],
            [
                "b40ce815.147eb8"
            ]
        ]
    },
    {
        "id": "bd921431.7fd498",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 872.7656364440918,
        "y": 245.7500057220459,
        "wires": []
    },
    {
        "id": "b40ce815.147eb8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "payload_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_page",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data_for_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update_get_pages",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_task",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_all_assistants",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_assistant_by_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_users_groups",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 9,
        "x": 753.7656707763672,
        "y": 649.7500228881836,
        "wires": [
            [
                "a86b54c1.473c78"
            ],
            [
                "4151b7c3.f7cfa8"
            ],
            [
                "fe339820.cb4b28"
            ],
            [
                "a68f3e81.95d52"
            ],
            [
                "6cc2848f.b7b8bc"
            ],
            [
                "dfc9e242.d78f4"
            ],
            [
                "e718dba4.a1d948"
            ],
            [
                "645bcdba.991044"
            ],
            [
                "65c0dc87.cb51f4"
            ]
        ]
    },
    {
        "id": "96c3c68.c7d7338",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2286.015869140625,
        "y": 425.00006103515625,
        "wires": []
    },
    {
        "id": "af77daa4.7a3808",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_task",
        "func": "var access_token = msg.access_token ;\n    \n    if(isEmpty(access_token)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            query : \"table:users AND access_token:\" + access_token ,\n            sort  : \"_id<string>\"\n        };\n    }\n    \nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1280.015625,
        "y": 403.0000305175781,
        "wires": [
            [
                "71cf9c70.c94964"
            ]
        ]
    },
    {
        "id": "e46a487a.d682b8",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "Update record",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2146.015869140625,
        "y": 368.0001525878906,
        "wires": []
    },
    {
        "id": "3ed49608.46eeba",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2130.015869140625,
        "y": 425.0000305175781,
        "wires": [
            [
                "96c3c68.c7d7338"
            ]
        ]
    },
    {
        "id": "1ea39368.4d2cbd",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_user",
        "func": "var req_body        = msg.payload_data ,\n    access_token    = msg.access_token ;\n\nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\" ;\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing\", data: []};\n    return msg;\n    \n}else{\n    msg.api_status = \"API_SUCESS\" ;\n    msg.payload = {\n        query : \"table:\"+ req_body.table +\"AND access_token:\"+ access_token +\" AND _id:\" + req_body._id ,\n        sort  : \"_id<string>\"\n    };\n    msg.req_body = req_body;\n    return msg;\n}\n\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1284.265625,
        "y": 530.25,
        "wires": [
            [
                "1c62297c.51d5f7"
            ]
        ]
    },
    {
        "id": "1c62297c.51d5f7",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "split",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SUCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1434.2656860351562,
        "y": 555.25,
        "wires": [
            [
                "d5520305.66f6a"
            ],
            [
                "580ba2f4.08d5ec"
            ]
        ]
    },
    {
        "id": "910f835e.b1997",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_short_detail",
        "func": "var body            = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(access_token)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else if(isEmpty(body.detail_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`detail_id` is required to update detail\", data: body};\n}else if(isEmpty(body.page_id)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is required to update task detail\", data: body};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    msg.payload_content = {\n        access_token : access_token,\n        content: body\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1306.1407470703125,
        "y": 725.5000610351562,
        "wires": [
            [
                "3f0f1c5b.139264"
            ]
        ]
    },
    {
        "id": "580ba2f4.08d5ec",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "User",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1587.7656860351562,
        "y": 558.25,
        "wires": [
            [
                "7098655a.6d389c"
            ]
        ]
    },
    {
        "id": "7098655a.6d389c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var req_body = msg.req_body;\n    user_obj = msg.payload[0] ;\n\nif(isEmpty(user_obj)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"Unable to find user with `access_token` and `user_id`.\", data: req_body};    \n}else{\n    user_obj.firstname  = req_body.firstname ;\n    user_obj.lastname   = req_body.lastname  ;\n    user_obj.email      = req_body.email     ;\n    user_obj.phone      = req_body.phone     ;\n    //user_obj.image      = req_body.image     ;\n    user_obj.timezone   = req_body.timezone  ;\n    \n    msg.api_status = \"API_SUCCESS\";\n    msg.payload = user_obj ;\n    \n    msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};    \n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1729.7656936645508,
        "y": 591.2500123977661,
        "wires": [
            [
                "ab068161.d3be6"
            ]
        ]
    },
    {
        "id": "db602985.e84178",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2056.765937805176,
        "y": 562.2500123977661,
        "wires": []
    },
    {
        "id": "464e533f.20e15c",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "api result",
        "rules": [
            {
                "t": "move",
                "p": "api_result",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2048.765866597493,
        "y": 605.2500149408976,
        "wires": [
            [
                "92ee4dcb.6a568",
                "a8a5a4a.1688658"
            ]
        ]
    },
    {
        "id": "92ee4dcb.6a568",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2202.765998840332,
        "y": 605.2500381469727,
        "wires": []
    },
    {
        "id": "d5520305.66f6a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1586.6289672851562,
        "y": 514.41015625,
        "wires": []
    },
    {
        "id": "65c0dc87.cb51f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "else case",
        "func": "msg.payload = {staus: 400, error: true, msg:\"Un specified table type\", data: null};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1204.8338165283203,
        "y": 1095.0004024505615,
        "wires": [
            [
                "226565c.1ddb69a"
            ]
        ]
    },
    {
        "id": "226565c.1ddb69a",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1343.833724975586,
        "y": 1096.6670767466228,
        "wires": []
    },
    {
        "id": "42ea84ba.4a481c",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "login page return again",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 733.8333969116211,
        "y": 1085.0000705718994,
        "wires": []
    },
    {
        "id": "2e62384d.25baa8",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "menu page return ",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1046.8334045410156,
        "y": 929.0000178019206,
        "wires": []
    },
    {
        "id": "6e9ce6fa.adc298",
        "type": "switch",
        "z": "5aaca332.83ed4c",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 699.8333435058594,
        "y": 733.6667175292969,
        "wires": [
            [
                "3d8a6f38.8353d"
            ],
            [
                "6c013f75.c043a",
                "a854cc6a.9631"
            ]
        ]
    },
    {
        "id": "6c013f75.c043a",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "",
        "x": 872.8333435058594,
        "y": 738.6667175292969,
        "wires": []
    },
    {
        "id": "ab068161.d3be6",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1868.5000686645508,
        "y": 590.6666994094849,
        "wires": [
            [
                "db602985.e84178",
                "464e533f.20e15c"
            ],
            [
                "16048eac.d74bc1"
            ]
        ]
    },
    {
        "id": "3f0f1c5b.139264",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1475.83349609375,
        "y": 725.3334350585938,
        "wires": [
            [
                "64cc674e.592e58"
            ],
            [
                "3686ccd8.9cc104"
            ]
        ]
    },
    {
        "id": "c10eb2f7.4f475",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1580.1666259765625,
        "y": 403.6667175292969,
        "wires": [
            [
                "c15cd6e0.e7c778"
            ],
            [
                "175f2640.7b875a"
            ]
        ]
    },
    {
        "id": "175f2640.7b875a",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1704,
        "y": 444.3334045410156,
        "wires": []
    },
    {
        "id": "c15cd6e0.e7c778",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload & verify user",
        "func": "var task_obj = msg.payload_data;\n\nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Invalid access_token, Unable to find user with this access_token.\", data: null};\n}else{\n    \n    var user = msg.payload[0];\n    \n    if(user._id === task_obj.user_id){\n        msg.api_status = \"API_SUCCESS\";\n        msg.payload = {\n            _id                         : task_obj._id,\n            _rev                        : task_obj._rev,\n            table                       : task_obj.table, \n            task_name                   : task_obj.task_name,\n            user_id                     : task_obj.user_id,\n            page_id                     : task_obj.page_id,\n            from_page_id                : task_obj.from_page_id,\n            parent_id                   : task_obj.parent_id,\n            header_template_id          : task_obj.header_template_id,\n            detail_template_id          : task_obj.detail_template_id,\n            footer_template_id          : task_obj.footer_template_id,\n            timeout_id                  : task_obj.timeout_id,\n            child_default_task_id       : task_obj.child_default_task_id,\n            child_default_task_name     : task_obj.child_default_task_name,\n            date_created                : task_obj.date_created,\n            type                        : task_obj.type,\n            status                      : task_obj.status,\n            category                    : task_obj.category,\n            additional_data_fn          : task_obj.additional_data_fn,\n            optional_data               : task_obj.optional_data,\n            required_data               : task_obj.required_data,\n            offline_expiration_time     : task_obj.offline_expiration_time,\n            display_if_empty            : task_obj.display_if_empty,\n            image                       : task_obj.image\n        };\n        msg.api_result = {status: 200, error: false, msg: \"Record udpated successfully\", data: msg.payload};\n    }else{\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1754.1666768391929,
        "y": 396.6666742960613,
        "wires": [
            [
                "df43328c.e54dc"
            ]
        ]
    },
    {
        "id": "df43328c.e54dc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1926.8336944580078,
        "y": 396.6666660308838,
        "wires": [
            [
                "e46a487a.d682b8",
                "3ed49608.46eeba"
            ],
            [
                "97975b91.8cf308"
            ]
        ]
    },
    {
        "id": "97975b91.8cf308",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2125.6669921875,
        "y": 475.33331298828125,
        "wires": []
    },
    {
        "id": "71cf9c70.c94964",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1440.1666259765625,
        "y": 402.3333435058594,
        "wires": [
            [
                "c10eb2f7.4f475"
            ]
        ]
    },
    {
        "id": "bfd24bae.86b5d8",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Following code referes to \"/api/verfiy\" endpoint. which whill check if verfiy code is valid or not if valid then re-direct to Category screen else re-direct back to login screen",
        "info": "",
        "x": 567.2421875,
        "y": 638.59375,
        "wires": []
    },
    {
        "id": "aa4a7047.22dfa",
        "type": "comment",
        "z": "5aaca332.83ed4c",
        "name": "Login `/api/login` flow is following. To check existing number , send verification code, re-direct to verification screen are done by following code.",
        "info": "",
        "x": 503.2421875,
        "y": 76.6015625,
        "wires": []
    },
    {
        "id": "fe339820.cb4b28",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "search",
        "func": "var query = msg.payload_content.query;\nmsg.payload = {\n    query   : \"table:users\",\n    sort: \"_id<string>\"\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1188.6367492675781,
        "y": 399.52345848083496,
        "wires": [
            [
                "7a96b596.327adc"
            ]
        ]
    },
    {
        "id": "7ecc3796.ce8288",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1630.3867591023445,
        "y": 396.1719055734575,
        "wires": []
    },
    {
        "id": "7a96b596.327adc",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1339.1328528523445,
        "y": 399.3320618234575,
        "wires": [
            [
                "9d835ace.95af38"
            ]
        ]
    },
    {
        "id": "9d835ace.95af38",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "res",
        "func": "var response = msg.payload;\n    query    = msg.payload_content.query ;\nif(isEmpty(response)){\n    msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n}else{\n    if(response.length){\n        var users = [] ;\n        for(var i=0; i < response.length; i++){\n            if(response[i].virtual_phone){\n                if(response[i].virtual_phone.toString().search(query.toString()) > - 1){\n                    users.push(response[i]);\n                }\n            }\n        }\n        msg.payload = {status: 200, error: false, msg: \"Record fetched successfully\", data: users};    \n    }else{\n        msg.payload = {status: 200, error: false, msg: \"No Record found.\", data: []};\n    }\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1490.1289466023445,
        "y": 398.7734680734575,
        "wires": [
            [
                "7ecc3796.ce8288"
            ]
        ]
    },
    {
        "id": "d4893bd6.73baf8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "doCreate_optional_detail",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2805.359630584717,
        "y": 104.51562023162842,
        "wires": [
            [
                "d62930a9.21f02"
            ],
            [
                "f71aaf5f.47b0e"
            ]
        ]
    },
    {
        "id": "d62930a9.21f02",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "option_detail",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2993.343761444092,
        "y": 61.999996185302734,
        "wires": [
            [
                "56701aa1.5fe244"
            ]
        ]
    },
    {
        "id": "56701aa1.5fe244",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3207.3554916381836,
        "y": 62.367183685302734,
        "wires": []
    },
    {
        "id": "f71aaf5f.47b0e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Log",
        "func": "node.warn(\"No need to create optional second task.\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2935.3476638793945,
        "y": 116.33201789855957,
        "wires": [
            []
        ]
    },
    {
        "id": "a86b54c1.473c78",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "func": "var params = msg.payload_content ;\nif(isEmpty(params.access_token)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`access_token` is required to get_page.\", data: null};\n}else if(isEmpty(params.page_id)){\n    msg.api_status    = \"API_ERROR\";\n    msg.statusCode    = 400 ;\n    msg.payload       = {status: 400, error: true, msg: \"`page_id` is required to get_page.\", data: null};\n}else{\n    msg.api_status    = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1205,
        "y": 199.83982849121094,
        "wires": [
            [
                "aa8e7501.202a68"
            ]
        ]
    },
    {
        "id": "aa8e7501.202a68",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "get_page",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1485.9961547851562,
        "y": 62.76952362060547,
        "wires": [
            [
                "4fe8c497.83a2ac"
            ],
            [
                "3e8369c8.233d56"
            ]
        ]
    },
    {
        "id": "4fe8c497.83a2ac",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1628.0078125,
        "y": 33,
        "wires": []
    },
    {
        "id": "3e8369c8.233d56",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "url",
        "func": "var access_token = msg.payload_content.access_token ,\n    page_id      = msg.payload_content.page_id ;\n\nif(isEmpty(page_id)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`page_id` is missing.\", data: null};\n}else if(isEmpty(access_token)){\n    msg.API_STATUS = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is missing.\", data: null};\n}else{\n    msg.method = \"GET\";\n    msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_page?include_docs=true\";\n    msg.API_STATUS = \"API_SUCCESS\";\n    msg.req_data = msg.payload;    \n}\n\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1624.6171875,
        "y": 97.8515625,
        "wires": [
            [
                "debbb61b.960a88"
            ]
        ]
    },
    {
        "id": "debbb61b.960a88",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_STATUS",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1760.7838745117188,
        "y": 97.85157775878906,
        "wires": [
            [
                "f2f1d34c.27bd3"
            ],
            [
                "1588c1f9.35643e"
            ]
        ]
    },
    {
        "id": "f2f1d34c.27bd3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1887.6170959472656,
        "y": 90.8515625,
        "wires": []
    },
    {
        "id": "1588c1f9.35643e",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Get_page_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1918.6170654296875,
        "y": 149.796875,
        "wires": [
            [
                "9dc55849.0108d8"
            ]
        ]
    },
    {
        "id": "3a122834.a215b8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "format",
        "func": "var db_records              = msg.db_records ,\n    counts                  = msg.payload ,\n    access_token            = msg.payload_content.access_token ,\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [],\n    page_id                 = msg.payload_content.page_id ;\n\n//msg.updated_user_task = []; //this will hold the user_task is not present in database.\nmsg.updated_user_task = {}; //this will hold the user_task is not present in database.\nif(isEmpty(db_records)){\n    msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};\n}else{\n    if(isEmpty(db_records.rows)){\n        msg.payload = {status: 400, error: false, msg: \"No Record found.\", data: null};   \n    }else{\n        var db_obj          =  format_db_records(db_records.rows),\n            user_obj        =  populate_user(access_token, db_obj.users);\n            \n            if(isEmpty(user_obj)){\n                page_id = 1 ;\n            }else{\n                if(!user_obj.security_level){\n                    page_id = 11 ;\n                }\n            }\n            \n            var task_obj    =  populate_taskobj(page_id, db_obj.tasks),\n            details         =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n        \n        msg.isUpdateUserTask = false; \n        msg.payload = {\n            page_id :  page_id,\n            user    :  user_obj || {},\n            task    :  prepare_task,\n            detail  :  getpage(prepare_details)\n    \t};\n    } \n}\n\nreturn msg;\n\nfunction getpage(details){\n    // var result = get_page_array(details) ,     //previous code to calculate active and unread count manually;\n    //     detail = result.detail_array ;\n    \n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n        \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    \n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_obj.user_tasks); \n\n            if( isEmpty(isUserTaskExits)){ //check if already user_task is not present for that user. if not then do the following steps\n                populate_ancestors(details[loop].page_id, db_obj.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                populate_decendents(details[loop].page_id, db_obj.details); //calculating sub childs _id with current requested page_id\n     \n                msg.updated_user_task = {   // create user_task record if user_task is not present in database \n                    table           : \"user_task\",\n                \ttask_id \t\t: task_obj._id,\n                \tuser_id\t\t\t: user_obj.user_id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tsynchronized    : 1,\n                    status          : 0, \n                \tdate_updated\t: null,\t\n                \tparent_id\t\t: task_obj._id,\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent_counts_array,\n                \tcount_status\t: {\n                \t   active       : 1,\n                \t   unread       : 0,\n                \t},\n                \tcount\t\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0,\n                \t},\n                \tcount_if\t\t: {\n                \t    active      : 1,\n                \t    unread      : 0\n                \t},\n                \ttemplates\t\t: {},\n                \ttimeout\t\t\t: {},\n                \tcreatedAt       : new Date().getTime()\n                };\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n                \n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                details[loop].count.active = detail_count.active; \n                details[loop].count.unread = detail_count.unread;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n    if(!isEmpty(msg.updated_user_task))  msg.isUpdateUserTask = true; \n    \n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n    \n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    \n    if(isEmpty(obj)) return {};\n    if(isEmpty(user_tasks)) return {};\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj.user_id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            return user_tasks[loop];\n        }\n    }\n    \n    return {};\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id);\n                }\n                if(!isEmpty(task_arr[index].parent_id)) {\n                    populate_ancestors( task_arr[index].parent_id, db_obj.tasks, \"parent_id\"); \n                }\n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, db_obj.tasks ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id);\n                        populate_ancestors( task_arr[itr].parent_id, db_obj.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr, type){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id);\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_obj.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else if(\"dri_main\" in detail.type){\n            if( \"dri_main\" in user_obj.type){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            return true;\n        }\n    }\n}\n// function get_page_array(detail_array){\n    \n//     for(var itr = 0 ; itr < detail_array.length; itr++){\n//         var count = {} , current_count_active = 0, current_count_unread = 0, active = 0, unread = 0;\n        \n//         if(detail_array[itr].to_page_id){\n//             count = get_sub_child_count(detail_array[itr].to_page_id);\n            \n//             if(check_obj(count) > 0){\n//                 current_count_active = count.active ;\n//                 current_count_unread = count.unread ;\n                \n//                 if(!isEmpty(user_obj)){\n//                     update_user_task_record({user_id: user_obj.user_id, task_id: task_obj._id, synch : 0, count: count}, false);    \n//                 } \n//             }\n//         }else{\n//             current_count_active = detail_array[itr].count.active ;\n//             current_count_unread = detail_array[itr].count.unread ;\n//         }\n//         active = active + current_count_active ;\n//         unread = unread + current_count_unread ;\n        \n//         if(detail_array[itr].count){\n//             detail_array[itr].count.active = active ;\n//             detail_array[itr].count.unread = unread ;\n//         }\n//     }\n\n//     return {\n//         detail_array :   detail_array,\n//     };\n// }\n\n// function update_user_task_record(obj, update_parent){\n\n//     var user_task_obj = return_user_task_obj(obj.user_id, obj.task_id),\n//         create_user_task_flag = true, ancestors_array= [];\n    \n//     if (check_obj(user_task_obj) > 0){\n    \t\n//     \tif (user_task_obj.user_id == obj.user_id){\n//     \t    create_user_task_flag = false ;// if one already exists then don’t create again    \n//     \t} \n    \t\n//     \tuser_task_obj.synchronized          = obj.synch ;\n//         user_task_obj.date_updated          = new Date().toJSON();\n\n//         if(!user_task_obj.update_read){\n//             if( user_task_obj.count_status.unread  && !user_task_obj.count_if.unread ){\n//                 user_task_obj.count.unread += 1 ;  \n//             }\n//         }\n    \n//         if(!user_task_obj.update_active){\n//             if( user_task_obj.count_status.active && user_task_obj.count_if.active){\n//                 user_task_obj.count.active += 1 ;  \n//             }\n//         }\n    \n//         if(user_task_obj.parent_id && update_parent) update_user_task_record({user_id: user_task_obj.user_id, task_id: user_task_obj.parent_id, synch:0, count: {active:0, unread:0}}, false );\n\n//     }\n    \n//     if ( create_user_task_flag ) {\n        \n//         if(task_obj.parent_id){\n//             var if_user_task = return_user_task_obj(obj.user_id, task_obj.parent_id);\n           \n//             if(check_obj(if_user_task) > 0){\n//                 ancestors_array = if_user_task.ancestors ;    \n\n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) {\n//                     ancestors_array.push(task_obj.parent_id);\n//                 }\n//             }else{\n                \n//                 if( !if_exists_in_arr(task_obj.parent_id, ancestors_array) ) ancestors_array.push(task_obj.parent_id);\n//             }\n//         }\n        \n//         msg.updated_user_task = {\n//             table           : \"user_task\",\n//         \ttask_id \t\t: obj.task_id,\n//         \tuser_id\t\t\t: obj.user_id,\n//         \tpage_id         : parseInt(page_id),\n//         \tupdate_read     : 0,\n//         \tupdate_active   : 0, \n//         \tsynchronized    : 1,\n//             status          : 0, \n//         \tdate_updated\t: null,\t\n//         \tparent_id\t\t: obj.task_id,\n//         \tancestors       : ancestors_array, \n//         \tcount_status\t: {\n//         \t   active       : 1,\n//         \t   unread       : 0,\n//         \t},\n//         \tcount\t\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0,\n//         \t},\n//         \tcount_if\t\t: {\n//         \t    active      : 1,\n//         \t    unread      : 0\n//         \t},\n//         \ttemplates\t\t: {},\n//         \ttimeout\t\t\t: {},\n//         \tcreatedAt       : new Date().getTime()\n//         };\n//     }else{\n//         msg.updated_user_task = user_task_obj ;\n//     }\n    \n//     msg.isUpdateUserTask = true ;\n// }\n\n// function return_user_task_obj(user_id, task_id){\n//     var obj = {}, user_task_arr = db_obj.user_tasks ;\n//     if(user_task_arr !== null && user_task_arr !== undefined){\n//         for(var i=0; i< user_task_arr.length; i++){\n//             if(\n//                 user_task_arr[i].user_id        == user_id &&\n//                 user_task_arr[i].task_id        == task_id \n//             ){\n//                     obj = user_task_arr[i];\n//             }\n//         }\n//     }\n//     return obj ;\n// }\n\n\n// function get_sub_child_count(to_page_id){\n//     var count = {active:0, unread: 0}, details = db_obj.details;\n    \n//     for(var itr = 0; itr < details.length; itr++){\n//         if(to_page_id == details[itr].page_id){\n//             if(details[itr].count_status){\n//                 count.active += details[itr].count_status.active ;\n//                 count.unread += details[itr].count_status.unread ;\n//             }\n//         }\n//     }\n//     return count;\n// }\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"date_created\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n  \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n                \n                if(user_obj.user_id === detail_data[d].user_id){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else if(\n                    (\"dri_main\" in detail_data[d].type) && (\"dri_main\" in user_obj.type) \n                ){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }else{\n                    //when user doesn't own record\n\n                    if( check_isDisplay(detail_data[d].display_if_empty) && \n                        (\"public\" in detail_data[d].type) \n                    ){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else{\n                        detail_data.splice(d, 0);\n                    }\n                }\n            }\n           \n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_obj.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n    \n    return detailObj;\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n\n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(parseInt(arr[i].page_id) === parseInt(id)){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user(access_token, db_record){\n    var user = {};\n    \n    if(isEmpty(access_token)) return user ;\n    \n    if(isEmpty(db_record)){\n        return user;\n    }else{\n        for(var i=0; i < db_record.length; i++){\n            if(access_token == db_record[i].access_token){\n                user.user_id       = db_record[i]._id ;\n                user.firstname     = db_record[i].firstname ? db_record[i].firstname : \"\" ;\n                user.lastname      = db_record[i].lastname ? db_record[i].lastname : \"\"; \n                user.email         = db_record[i].email ? db_record[i].email : \"\";\n                user.phone         = db_record[i].phone || \"\" ; \n                user.virtual_phone = db_record[i].virtual_phone ? db_record[i].virtual_phone: \"\";\n                user.type          = db_record[i].type || {} ;\n                user.security_level= db_record[i].security_level ;\n                user.access_token  = db_record[i].access_token;\n            }\n        }\n    }\n    \n    return user ;\n}\n\nfunction format_db_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction check_obj(obj){\n    return Object.keys(obj).length ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2431.784008026123,
        "y": 146.85156059265137,
        "wires": [
            [
                "88651594.c6f868",
                "8f00693.57a2a98"
            ]
        ]
    },
    {
        "id": "88651594.c6f868",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "isUpdateUserTask",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2587.8833770751953,
        "y": 148.92577934265137,
        "wires": [
            [
                "38dfbf7e.14c96",
                "5c26a1e3.6989c"
            ],
            [
                "e2be2d17.4c36"
            ]
        ]
    },
    {
        "id": "7a1fa12a.ae0fc",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_detail",
        "func": "var body = msg.req_body.table_data,\n    token = msg.req_body.access_token ;\n        \n    if(isEmpty(body)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Table data should be valid json object.\", data: null};\n    }else if(isEmpty(token)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`access_token` must be provided.\", data: null};\n    }else if(isEmpty(body.id)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"`id` must be provided to remove detail.\", data: null};\n    }else{\n        msg.req_data    = {access_token: token, detail_id: body.id};\n        msg.api_status  = \"API_SUCCESS\";\n        msg.method      = \"GET\";\n        msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/delete_view_data\";\n    }\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1285.0000381469727,
        "y": 290.0000476837158,
        "wires": [
            [
                "2f5e4f46.787e"
            ]
        ]
    },
    {
        "id": "2f5e4f46.787e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1535.8632583618164,
        "y": 270.9179935455322,
        "wires": [
            [
                "ad69ce11.40c27"
            ],
            [
                "d07942b5.0e4be"
            ]
        ]
    },
    {
        "id": "ad69ce11.40c27",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1706.8632583618164,
        "y": 227.39455604553223,
        "wires": []
    },
    {
        "id": "d07942b5.0e4be",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "bulk_delete_view",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1747.8671646118164,
        "y": 285.9297122955322,
        "wires": [
            [
                "9896f35d.a07e1"
            ]
        ]
    },
    {
        "id": "9896f35d.a07e1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_content",
        "func": "var req_body = msg.req_data,\n    body     = msg.payload ;\n    \nif(isEmpty(body.rows)){\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error:true, msg: \"Unable to find data using view\", data: null};\n}else{\n    var result_obj          = populate_body(body.rows),\n        user_obj            = populate_user(result_obj.users, req_body.access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.api_status  = \"API_ERROR\";\n        msg.payload     = {status: 400, error: true, msg: \"Unable to find user with `access_token`.\", data: null};\n        return msg;\n    }else{\n        var detail_obj  = populate_detail(result_obj.details, req_body.detail_id);\n        \n        if(isEmpty(detail_obj)){\n            msg.api_status = \"API_ERROR\";\n            msg.payload     = {status: 400, error: true, msg: \"Unable to find detail with `detail_id`.\", data: null};\n            return msg;\n        }else{\n            \n            if(detail_obj.user_id === user_obj._id){\n                var child_details   = populate_sub_detail(result_obj.details, detail_obj.to_page_id),\n                grand_child_details = populate_grand_child(result_obj.details, child_details),\n                user_tasks          = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id),\n                response            = [];\n                \n                grand_child_details.push(detail_obj);\n                delete_records(grand_child_details);\n                delete_records(user_tasks);\n              \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response} ;\n                return msg;\n            }else{\n                var user_tasks      = populate_user_task(result_obj.user_task, detail_obj.page_id, user_obj._id), response=[];\n                delete_records(user_tasks);\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.method = \"POST\";\n                msg.url    = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n                msg.payload = {docs: response};\n                return msg;\n            }\n        }\n    }\n}\n\nreturn msg;\n\nfunction delete_records(records){\n    if(records.length){\n        for(var i=0; i <records.length; i++){\n            response.push({\n                _id     : records[i]._id,\n                _rev    : records[i]._rev,\n                _deleted: true\n            });\n        }\n    }\n}\n\nfunction populate_user_task(user_tasks, page_id, user_id){\n    var arr = [];\n    for(var i=0; i<user_tasks.length; i++){\n        if( ( parseInt(user_tasks[i].page_id) === parseInt(page_id) ) &&\n            ( user_tasks[i].user_id === user_id )\n        ){\n            arr.push(user_tasks[i]);    \n        }\n    }\n    return arr;\n}\n\nfunction populate_grand_child(all_details, child_details){\n    var grand_childs = [];\n    if(!isEmpty(child_details)){\n        for(var i=0; i<all_details.length; i++){\n            for(var k=0; k<child_details.length; k++){\n                if(parseInt(all_details[i].page_id) === parseInt(child_details[k].to_page_id)){\n                    grand_childs.push(all_details[i]);\n                }\n            }\n        }\n    }\n    if(grand_childs.length){\n        return child_details.concat(grand_childs);\n    }else{\n        return child_details;\n    }\n}\n\nfunction populate_sub_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if(details[i].page_id === to_page_id){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction populate_detail(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id === detail_id){\n            obj = details[i];\n        }\n    }\n    return obj ;\n}\n\nfunction populate_user(users, access_token){\n    var obj = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token === access_token){\n            obj = users[i] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_body(rows){\n    var details = [], users=[], user_task=[] ;\n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table === \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"users\"){\n            users.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table === \"user_task\"){\n            user_task.push(rows[i].value);\n        }\n    }\n    return {details: details, users: users, user_task: user_task};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1957.3632583618164,
        "y": 285.4961185455322,
        "wires": [
            [
                "fe7e63dc.d9f8e"
            ]
        ]
    },
    {
        "id": "fe7e63dc.d9f8e",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2139.6096000671387,
        "y": 286.9297275543213,
        "wires": [
            [
                "529712dd.73ea7c"
            ],
            [
                "df3a22ee.0c8c9"
            ]
        ]
    },
    {
        "id": "529712dd.73ea7c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2309.3596000671387,
        "y": 263.3984775543213,
        "wires": []
    },
    {
        "id": "df3a22ee.0c8c9",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2329.8752250671387,
        "y": 310.4336338043213,
        "wires": [
            [
                "1b4af4f1.9977bb"
            ]
        ]
    },
    {
        "id": "1b4af4f1.9977bb",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Error while removing record from database\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: false, msg: \"Record removed successfully from database.\", data: msg.payload};\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2497.8637657165527,
        "y": 306.242262840271,
        "wires": [
            [
                "a784b7dc.0735d8"
            ]
        ]
    },
    {
        "id": "a784b7dc.0735d8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2622.7504844665527,
        "y": 306.000075340271,
        "wires": []
    },
    {
        "id": "4151b7c3.f7cfa8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "validate",
        "func": "var access_token = msg.payload_content.access_token,\n    task_id      = msg.payload_content.task_id;\nif(isEmpty(access_token)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`access_token` is mising.\", data: null};\n}else if(isEmpty(task_id)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, error: true, msg: \"`task_id` is mising.\", data: null};\n}else{\n    msg.api_status  = \"API_SUCCESS\";\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1203.5002632141113,
        "y": 325.0000801086426,
        "wires": [
            [
                "93323a2d.829028"
            ]
        ]
    },
    {
        "id": "e885a60f.39cf88",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_data_for_task endpoint",
        "info": "",
        "x": 1253.500171661377,
        "y": 263.3333988189697,
        "wires": []
    },
    {
        "id": "93323a2d.829028",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1343.500242869059,
        "y": 323.00006230672204,
        "wires": [
            [
                "e9ae4e21.cd3d3"
            ],
            [
                "ee274f1a.c70b3"
            ]
        ]
    },
    {
        "id": "e9ae4e21.cd3d3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1471.500242869059,
        "y": 282.6667493184408,
        "wires": []
    },
    {
        "id": "ee274f1a.c70b3",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_task_related_data?include_docs=true",
        "tls": "",
        "x": 1492.5002326965332,
        "y": 333.66675186157227,
        "wires": [
            [
                "f5476dc3.4f83d"
            ]
        ]
    },
    {
        "id": "f5476dc3.4f83d",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "\nvar payload = msg.payload ,\n    task_id = msg.payload_content.task_id;\n\nif(isEmpty(payload.rows)){\n    msg.payload     = {status: 400, error: true, msg: \"Unable to populate view to get_data_for_task.\", data: null};\n    return msg;\n}else{\n    msg.payload = {status:200, error:true, msg: \"Record fetched successfully.\", data: populate_db_record(payload.rows)};\n    return msg;\n}\n\n\nfunction populate_db_record(rows){\n    var template = [], task_table = [], timeout=[], location=[], users=[], task_obj={}; \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].doc.table == \"template\"){\n            template.push(rows[i].doc);\n        }\n        \n        if(rows[i].doc.table == \"task_table\"){\n            if(rows[i].doc.page_id == task_id){\n                task_obj = rows[i].doc ;\n            }else{\n                task_table.push({\n                    id          : rows[i].doc._id,\n                    task_name   : rows[i].doc.task_name\n                });\n            }\n        }\n        \n        if(rows[i].doc.table == \"timeout\"){\n            timeout.push({\n                id     : rows[i].doc._id,\n                name   : rows[i].doc.name\n            });\n        }\n        \n        if(rows[i].doc.table == \"location\"){\n            location.push({\n                id          : rows[i].doc._id,\n                name        : rows[i].doc.location_name\n            });\n        }\n        \n        if(rows[i].doc.table == \"users\"){\n            users.push({\n                id          : rows[i].doc._id,\n                name        : formulate_name(rows[i].doc)\n            });\n        }\n    }\n    \n    return {\n      formatted_template: template,\n      formatted_task    : task_table,\n      formatted_timeout : timeout,\n      formatted_location: location,\n      formatted_user    : users,\n      task_obj          : task_obj\n    };\n}\n\nfunction formulate_name(obj){\n    var str = \"\";\n    if(obj.firstname){\n        str += obj.firstname;\n    }\n    \n    if(obj.lastname){\n        str += \" \"+ obj.lastname ;\n    }\n    \n    if(!str){\n        str = \"Anynomous User\";\n    }\n    \n    return str;\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1662.500242869059,
        "y": 328.33343633015954,
        "wires": [
            [
                "26c6644a.ea800c"
            ]
        ]
    },
    {
        "id": "26c6644a.ea800c",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1868.3337287902832,
        "y": 311.0000915527344,
        "wires": []
    },
    {
        "id": "12796874.e0f828",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "get_page endpoint",
        "info": "",
        "x": 1231.1666870117188,
        "y": 139.33334350585938,
        "wires": []
    },
    {
        "id": "16048eac.d74bc1",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2039.5003128051758,
        "y": 650.0000123977661,
        "wires": []
    },
    {
        "id": "3686ccd8.9cc104",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1609.5001322428386,
        "y": 760.3334121704102,
        "wires": []
    },
    {
        "id": "64cc674e.592e58",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_short_details",
        "tls": "",
        "x": 1627.5001220703125,
        "y": 714.666748046875,
        "wires": [
            [
                "bfab0f04.e55c1"
            ]
        ]
    },
    {
        "id": "bfab0f04.e55c1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload,\n    access_token    = msg.payload_content.access_token,\n    req_body        = msg.payload_content.content;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, error: true, msg: \"Unable to fetch record via using views\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        user_obj   = populate_user(db_records.users, access_token),\n        detail_obj = populate_details(db_records.details, req_body.detail_id),\n        task_obj   = populate_task(db_records.tasks_arr, req_body.page_id);\n        \n        if(isEmpty(user_obj)){\n            msg.statusCode = 400 ;\n            msg.api_status = \"API_ERROR\";\n            msg.payload    = {status: 400, error: true, msg: \"Invalid `access_token`. Please retry after logout.\", data: null};\n        }else{\n            if(user_obj._id == detail_obj.user_id){\n                //update detail_obj\n                detail_obj.display_if_empty         = req_body.display_if_empty;\n                detail_obj.user_incoming.note       = req_body.message ;\n                detail_obj.user_incoming.message    = req_body.message ;\n                detail_obj.type                     = req_body.type;\n         \n                //update task_obj \n                task_obj.display_if_empty = req_body.display_if_empty;\n                task_obj.task_name        = req_body.message ;\n                task_obj.type             = req_body.type;\n                \n                msg.api_status = \"API_SUCCESS\";\n                msg.payload = {\n                    docs: [detail_obj, task_obj]\n                };\n            }else{\n                msg.statusCode = 401 ;\n                msg.api_status = \"API_ERROR\";\n                msg.payload    = {status: 400, error: true, msg: \"You are not authrozied to update this record.\", data: null};\n            }\n        }\n}   \n\nreturn msg;\n\nfunction populate_user(users, access_token){\n    var user = {};\n    for(var i=0; i<users.length; i++){\n        if(users[i].access_token == access_token){\n            user = users[i];\n        }\n    }\n    return user;\n}\n\nfunction populate_details(details, detail_id){\n    var obj = {};\n    for(var i=0; i<details.length; i++){\n        if(details[i]._id == detail_id){\n            obj = details[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_task(tasks, page_id){\n    var obj = {};\n    for(var i=0; i<tasks.length; i++){\n        if((tasks[i].page_id == page_id) && (tasks[i].table == \"task_table\") ){\n            obj = tasks[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_records(rows){\n    var users = [], details = [], tasks=[];\n    \n    for(var i=0; i<rows.length; i++){\n        if(rows[i].value.table == \"users\"){\n            users.push(rows[i].value);   \n        }\n        \n        if(rows[i].value.table == \"details\"){\n            details.push(rows[i].value);\n        }\n        \n        if(rows[i].value.table == \"task_table\"){\n            tasks.push(rows[i].value);\n        }\n    }\n    return {users: users, details:details, tasks_arr:tasks };\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1808.8334655761719,
        "y": 754.3334121704102,
        "wires": [
            [
                "db8b90a6.16022"
            ]
        ]
    },
    {
        "id": "a89ee394.95a9d",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2091.8336181640625,
        "y": 816.666748046875,
        "wires": []
    },
    {
        "id": "db8b90a6.16022",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1969.8334655761719,
        "y": 787.3334121704102,
        "wires": [
            [
                "b250faeb.be6e78"
            ],
            [
                "a89ee394.95a9d"
            ]
        ]
    },
    {
        "id": "b250faeb.be6e78",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2108.83349609375,
        "y": 759.666748046875,
        "wires": [
            [
                "affb5a04.b9f238"
            ]
        ]
    },
    {
        "id": "affb5a04.b9f238",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "res",
        "func": "if(isEmpty(msg.payload)){\n    msg.payload = {status: 400, error: true, msg: \"Unable to update provided documents\", data: msg.payload};\n}else{\n    msg.payload = {status: 200, error: true, msg: \"Record updated successfully.\", data: msg.payload};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2258.8336181640625,
        "y": 759.33349609375,
        "wires": [
            [
                "3edc137a.66ec4c"
            ]
        ]
    },
    {
        "id": "3edc137a.66ec4c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2444.1666946411133,
        "y": 741.6667327880859,
        "wires": []
    },
    {
        "id": "a68f3e81.95d52",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "update_get_pages ",
        "func": "var access_token = msg.payload_content.access_token,\n    phone        = msg.payload_content.phone ;\n\nnode.warn(\"Request init time\");\nnode.warn(new Date());\nnode.warn(new Date().getTime());\n\nif(isEmpty(access_token) && isEmpty(phone)){\n    //msg.api_status = \"API_ERROR\";\n    msg.api_status = \"API_SUCCESS\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, error: true, msg: \"Either `phone` or `access_token` is mising.\", data: msg.payload_content};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n}\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1221.8334045410156,
        "y": 528.6667461395264,
        "wires": [
            [
                "8dd5267c.aabde8",
                "2bd3da91.104616"
            ]
        ]
    },
    {
        "id": "448d2c48.319d14",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "updated_get_pages View",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/updated_get_pages?include_docs=true",
        "tls": "",
        "x": 1592.833755493164,
        "y": 573.3334875106812,
        "wires": [
            [
                "55683dea.d34ba4"
            ]
        ]
    },
    {
        "id": "4107fbed.f0bb14",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "populate",
        "func": "var body            = msg.payload_content,\n    payload         = msg.db_get_page,\n    counts          = msg.payload ,\n    ancestor_conts_array    = [],\n    decendent_counts_array  = [],\n    page_id         = body.page_id ,\n    access_token    = body.access_token;\n\n    msg.updated_user_task = {}; //this will hold the user_task is not present in database.\n    \n    if(isEmpty(payload.rows)){\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to fetch data using Cloudant views\", data: null};\n    }else{\n        msg.update_my_user_task = false;\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            user_tasks          = populate_user_task(user_obj, db_record.user_tasks);\n        \n        if(isEmpty(user_obj)){\n            msg.api_status = \"API_ERROR\";\n            page_id = 1 ;\n            msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n            \n        }else if(page_id == 1){\n            msg.api_status = \"API_ERROR\";\n            page_id = 1 ;\n            msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n            \n        }else{\n            if(!user_obj.security_level){\n                msg.api_status = \"API_ERROR\";\n                page_id = 11 ;\n                msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n            }else{\n                msg.api_status = \"API_SUCCESS\";\n                if(isEmpty(body.user_task_list)){\n                    msg.isUpdateUserTasks = false;\n                }else{\n                   msg.method  = \"GET\";\n                   msg.url     = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task?key=[\"' + user_obj._id +'\"]';\n                   msg.isUpdateUserTasks = true;\n                }\n                msg.api_response = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n            }\n        }    \n    }\n\nreturn msg;\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [] , req_page = {};\n    if(!isEmpty(page_id)){\n        var task = populate_taskobj(page_id, db_obj.tasks);\n        if(!isEmpty(task)){\n            var single_detail     =  populate_details(task._id, db_obj.details),\n                single_prepare_task   =  formulate_task(task, db_obj),\n                single_prepare_detail =  formulate_details(single_detail);\n            \n            req_page = {\n               page_id : page_id,\n               user    : (page_id == 11 ) ? {} : user_obj ,\n               task    : single_prepare_task,\n               detail  : getpage(single_prepare_detail)\n            };\n        }\n    }\n\n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n        \n    return {req_page : req_page, pages: pages};\n}\n\nfunction getpage(details){\n    node.warn(\"inside getPage method >>>\");\n    node.warn(details);\n    \n    var limited_details = populate_limited_details(details);\n    var result  = populate_counts(limited_details),\n        detail  = result.detail_array;\n         \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_limited_details(details){\n    if(isEmpty(details)){\n        return [];\n    }else{\n        return details;\n        // var limitedDetails = [];\n        // if(details.length > 20){\n        //     var i = 0;\n        //     while(i < 20){\n        //         limitedDetails.push(details[i]);\n        //         i++ ;\n        //     }    \n        // }else{\n        //     for(var itr in details){\n        //         limitedDetails.push(details[itr]);\n        //     }\n        // }\n        // return limitedDetails;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    if( ( page_id !== 1)  && ( page_id !== 11) ){ // no need to store user_task for login and verify page\n        for(var loop in details){\n            var isUserTaskExits = checkFromUserTaskList(details[loop], db_record.user_tasks); \n            \n            if( isEmpty(isUserTaskExits) ){ //check if already user_task is not present for that user. if not then do the following steps\n            \n                populate_ancestors(details[loop].page_id, db_record.tasks, \"page_id\"); //calculating ancestor task with request page_id\n                populate_decendents(details[loop].page_id, db_record.details); //calculating sub childs _id with current requested page_id\n\n                msg.updated_user_task = {   // create user_task record if user_task is not present in database \n                  table           : \"user_task\",\n                \ttask_id \t\t    : details[loop].task_id[0],\n                \tuser_id\t\t\t : user_obj._id,\n                \tpage_id         : parseInt(details[loop].page_id),\n                \tsynchronized    : 1,\n                  status          : 0, \n                \tdate_updated\t : null,\t\n                \tparent_id\t\t : details[loop].task_id[0],\n                \tancestors       : ancestor_conts_array, \n                \tdecendents      : decendent_counts_array,\n                \tcount_status\t : {\n                \t   active       : 1,\n                \t   unread       : 0,\n                \t},\n                \tcount\t\t\t    : {\n                \t    active      : 1,\n                \t    unread      : 0,\n                \t},\n                \tcount_if\t\t    : {\n                \t    active      : 1,\n                \t    unread      : 0\n                \t},\n                \ttemplates\t\t : {},\n                \ttimeout\t\t\t : {},\n                \tcreatedAt       : new Date().getTime()\n                };\n                \n                details[loop].count.active = 0;     //when user_task is not present for that detail\n                details[loop].count.unread = 0;     // just set default values for active and unread\n                detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n            }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n                msg.updated_user_task = {};\n                var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n                details[loop].count.active = detail_count.active; \n                details[loop].count.unread = detail_count.unread;\n                detailArr.push(details[loop]); \n            }\n        }\n        \n    }\n    \n    if(!isEmpty(msg.updated_user_task))  msg.update_my_user_task = true;\n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n\n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    var res = {};\n    if(isEmpty(obj)) return res;\n    if(isEmpty(user_tasks)) return res;\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj._id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            res = user_tasks[loop];\n        }\n    }\n    return res;\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id.toString());\n                }\n                populate_ancestors( task_arr[index].parent_id, db_record.tasks, \"parent_id\"); \n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, ancestor_conts_array ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id.toString());\n                        populate_ancestors( task_arr[itr].parent_id, db_record.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id.toString());\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_record.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            if(!isEmpty(user_obj.data)){\n                var obj2 = detail.type ,\n                     obj1 = user_obj.data.groups;\n                \n                if(isEmpty(obj1) || isEmpty(obj2)) return true;\n                \n                return Object.keys( obj1 ).every( function( prop ) {\n             \t\treturn obj2.hasOwnProperty( prop );\n             \t});\n            }else{\n                return true;\n            }\n        }\n    }\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"due_date\": \"\",\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n\n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n\n                        if((\"admin\" in user_obj.type)){\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction hasSameProps( obj1, obj2 ) {\n    var isExists = false;\n    \n    if(!isEmpty(obj1)){\n        obj1 = obj1.groups ;\n        if(!isEmpty(obj1)){\n            isExists = Object.keys( obj1 ).every( function( prop ) {\n     \t\t    return obj2.hasOwnProperty( prop );\n     \t    });    \n        }\n    }\n    \n \treturn isExists;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"page_id\":          task_data.page_id,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {} ,\n        phone = body.phone ;\n        \n    for(var i =0; i<users.length; i++){\n        if(\n            (access_token === users[i].access_token) ||\n            (phone == users[i].virtual_phone.toString())\n            ){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\n\nfunction check_isDisplay(d){\n    \n    if(d === \"1\"){\n        return true;\n    }else if(d === 1){\n        return true;\n    }else if(d === \"true\"){\n        return true;\n    }else if(d === true){\n        return true;\n    }else if(d === \"false\"){\n        return false;\n    }else{\n        return false ;\n    }\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2330.0008659362793,
        "y": 531.6668758392334,
        "wires": [
            [
                "d3cbca16.a2aee8",
                "d1930383.32eaa"
            ]
        ]
    },
    {
        "id": "7e6d9628.c836b8",
        "type": "comment",
        "z": "5e22f743.a6a0b8",
        "name": "Updated_get_pages endpoint",
        "info": "",
        "x": 1252.7656860351562,
        "y": 487.2500616709392,
        "wires": []
    },
    {
        "id": "3f0b1978.18eed6",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 2275.333583831787,
        "y": 149.6666660308838,
        "wires": [
            [
                "3a122834.a215b8"
            ]
        ]
    },
    {
        "id": "9dc55849.0108d8",
        "type": "change",
        "z": "5e22f743.a6a0b8",
        "name": "db_records",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "db_records",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2103.3336181640625,
        "y": 148.6666669845581,
        "wires": [
            [
                "3f0b1978.18eed6"
            ]
        ]
    },
    {
        "id": "8f00693.57a2a98",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2595.8334884643555,
        "y": 235.00004196166992,
        "wires": []
    },
    {
        "id": "6cc2848f.b7b8bc",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_all_task",
        "func": "msg.payload = {\n    query: \"table:task_table\",\n    sort: \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1212.8333435058594,
        "y": 714.9999923706055,
        "wires": [
            [
                "5026614f.73353"
            ]
        ]
    },
    {
        "id": "5026614f.73353",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "all_task",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1380.8333740234375,
        "y": 712.6667098999023,
        "wires": [
            [
                "9d1db335.cafd3"
            ]
        ]
    },
    {
        "id": "9d1db335.cafd3",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var response = msg.payload ;\n\nif(!isEmpty(response)){\n    msg.payload = {status:200, msg: \"Record fectehed successfully.\", data: response};\n}else{\n    msg.statusCode = 400;\n    msg.payload = {status:400, msg: \"Error while fetching record..\", data: response};\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1544.833381652832,
        "y": 712.666708946228,
        "wires": [
            [
                "82810bd4.435928"
            ]
        ]
    },
    {
        "id": "82810bd4.435928",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1688.8334045410156,
        "y": 709.9999923706055,
        "wires": []
    },
    {
        "id": "8047b1c2.00b14",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_detail_to_task",
        "func": "var content         = msg.payload_data ,\n    access_token    = msg.access_token ;\n    \nif(isEmpty(content.detail_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`detaik_id`is missing\", data: content};\n}else if(isEmpty(content.task_id)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`task_id`is missing\", data: content};\n}else if(isEmpty(access_token)){\n    msg.statusCode  = 400 ;\n    msg.payload     = {status: 400, msg: \"`access_token`is missing\", data: content};\n}else{\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task\";\n    msg.method  = \"GET\";\n}\n\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 850.3333740234375,
        "wires": [
            [
                "b009fcf1.982cd"
            ]
        ]
    },
    {
        "id": "418ae6bc.5f2e38",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1968.500244140625,
        "y": 853.6667852401733,
        "wires": []
    },
    {
        "id": "b009fcf1.982cd",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1488.5000076293945,
        "y": 848.0000267028809,
        "wires": [
            [
                "647749b5.f11ce8"
            ]
        ]
    },
    {
        "id": "647749b5.f11ce8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_data",
        "func": "var content         = msg.payload_data,\n    access_token    = msg.access_token,\n    db_records      = msg.payload;\n\nif(isEmpty(db_records.rows)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to fetch data via using cloudant view 'add_detail_to_task'\", data: null};\n}else{\n    var records     = populate_record(db_records.rows),\n        detail_obj  = populate_details(records.details, content.detail_id),\n        user_obj    = populate_user(records.users, access_token);\n        \n    if(isEmpty(user_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`access_token` is not valid.\", data: null};\n    }else if(isEmpty(detail_obj)){\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"`detail_id` is not valid.\", data: null};\n    }else{\n\n        if(isEmpty(detail_obj.task_id)){\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"`detail_obj` doesn't contains task_id. please check it once.\", data: null};\n        }\n        else if(Object.prototype.toString.call(detail_obj.task_id) !== \"[object Array]\"){\n            detail_obj.task_id = detail_obj.task_id.push(task_id);    \n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Invalid detail.task_id. Plesae check details_obj once.\", data: null};\n        }else{\n            msg.statusCode     = 200;\n            detail_obj.task_id.push(content.task_id);    \n            msg.payload        = detail_obj;\n        }\n    }\n}\nreturn msg;\n\nfunction populate_user(arr, token){\n    if(isEmpty(token)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].access_token == token){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_details(arr, id){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]._id == id){\n                return arr[i];\n            }\n        }\n    }    \n    \n    return {};\n}\n\nfunction populate_record(list){\n    var users = [],details=[], sorted_detail=[];\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"users\"){\n            users.push(list[i].value);\n        }\n        \n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, details: sorted_detail} ;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1657.8333435058594,
        "y": 891.6666641235352,
        "wires": [
            [
                "ced53a41.ba8868"
            ]
        ]
    },
    {
        "id": "ced53a41.ba8868",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1824.8333435058594,
        "y": 892.0000076293945,
        "wires": [
            [
                "418ae6bc.5f2e38"
            ],
            [
                "d674a9dd.e79dd8",
                "fb340adc.026378"
            ]
        ]
    },
    {
        "id": "fb340adc.026378",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1990.8336181640625,
        "y": 907.3334197998047,
        "wires": []
    },
    {
        "id": "d674a9dd.e79dd8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var data = msg.payload ;\n\nmsg.payload = {status: 200, msg: \"Record updated successfully.\", data: data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1982.8333435058594,
        "y": 964.0000076293945,
        "wires": [
            [
                "b1560562.e65e68"
            ]
        ]
    },
    {
        "id": "b1560562.e65e68",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2118.8334045410156,
        "y": 965.3333511352539,
        "wires": []
    },
    {
        "id": "e2be2d17.4c36",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "x": 2739.500160217285,
        "y": 194.66665649414062,
        "wires": []
    },
    {
        "id": "dfc9e242.d78f4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_all_assistants",
        "func": "msg.payload = {\n    query: \"table:users\",\n    sort : \"_id<string>\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1233.5,
        "y": 790.0000076293945,
        "wires": [
            [
                "bf9ada8f.bb0c98"
            ]
        ]
    },
    {
        "id": "ee2d685e.0c3c58",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1723.5004272460938,
        "y": 794.3333396911621,
        "wires": []
    },
    {
        "id": "bf9ada8f.bb0c98",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1424.5000038146973,
        "y": 790.6666736602783,
        "wires": [
            [
                "a9573ce4.de2d5"
            ]
        ]
    },
    {
        "id": "a9573ce4.de2d5",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var payload = msg.payload,\n    payload_content = msg.req_params;\n\nif(isUserAuthenticated(payload, payload_content.access_token)){\n    var filter      = payload_content.content.filters,\n        isGroupUsers= payload_content.content.group_users,\n        result      = [], \n        type        = null;\n        \n    if(!isEmpty(isGroupUsers)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(payload[itr].data){\n                if(!isEmpty(payload[itr].data.groups)){\n                    if(filter in payload[itr].data.groups){\n                        result.push(payload[itr]);\n                    }\n                }\n            }\n        }\n    }else if(!isEmpty(filter)){\n        type = \"list_assistant\";\n        for(var itr  in payload){\n            if(filter in payload[itr].type){\n                result.push(payload[itr]);\n            }\n        }\n    }else{\n        type = \"add_assistant\";\n        for(var itr in payload){\n            result.push({\n                user_id     : payload[itr]._id,\n                first_name  : payload[itr].firstname,\n                last_name   : payload[itr].lastname,\n                type        : payload[itr].type,\n                data        : payload[itr].data,\n                phone       : payload[itr].virtual_phone\n            });\n        }\n    }\n    msg.statusCode  = 200;\n    msg.payload     = {status: 200, msg: \"Record fecthed successfully.\", record: {type: type, result:result}};\n}else{\n    msg.statusCode  = 400;\n    msg.payload     = {status: 200, msg: \"`access_token` is invalid\", record: []};          \n}\n\nreturn msg;\n\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1593.1667594909668,
        "y": 792.000006198883,
        "wires": [
            [
                "ee2d685e.0c3c58"
            ]
        ]
    },
    {
        "id": "b43c0e6e.e29ac",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistants",
        "func": "var access_token = msg.access_token ,\n    payload      = msg.payload_data ;\n\n\nif(isEmpty(access_token)){\n    msg.API_ERROR  = \"API_ERROR\";\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`access_token` is missing\", data: null};\n}else if(isEmpty(payload.number)){\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"`User number` is missing to add as assistants\", data: null};\n}else{\n    msg.API_ERROR  = \"API_SUCCESS\";\n    msg.payload    = {\n        query : \"table:users\",\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1289.5000305175781,
        "y": 981.0000381469727,
        "wires": [
            [
                "6be264e8.9c21ec"
            ]
        ]
    },
    {
        "id": "de63dc2b.8b5da",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1587.5000534057617,
        "y": 945.3334074020386,
        "wires": []
    },
    {
        "id": "6be264e8.9c21ec",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1449.833381652832,
        "y": 980.6667442321777,
        "wires": [
            [
                "de63dc2b.8b5da"
            ],
            [
                "f447ca2.b3ac138"
            ]
        ]
    },
    {
        "id": "f447ca2.b3ac138",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1609.8333892822266,
        "y": 995.3334121704102,
        "wires": [
            [
                "d6ab8f0a.e368"
            ]
        ]
    },
    {
        "id": "d6ab8f0a.e368",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token = msg.access_token ,\n    req_body     = msg.payload_data ,\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to fetch all users\", data: []};\n}else{\n    if(isUserAuthenticated(payload, access_token)){\n        var user_obj = isUserExits(payload, req_body.number);\n        if( isEmpty(user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"Entred phone number doesn't exits in database.\", data: []};    \n        }else{\n\n            if((\"virtual_group\" in user_obj.type)){\n                msg.API_ERROR   = \"API_ERROR\";\n                msg.statusCode  = 400;\n                msg.payload     = {status: 400, msg: \"User already added into this group\", data: []};    \n            }else{\n                msg.API_ERROR   = \"API_SUCCESS\";\n                user_obj.type.virtual_group  = \"virtual_group\";\n                msg.payload             = user_obj ;\n                msg.api_response        =  {status: 200, msg: \"User added into group successfully\", data: user_obj};\n            }\n        }\n    }else{\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n    }\n}\nreturn msg;\n\nfunction isUserExits(users, number){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr].virtual_phone == parseInt(number)){\n            obj = users[itr];\n        }\n    }\n    return obj ;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1770.833396911621,
        "y": 1063.6667051315308,
        "wires": [
            [
                "9b02b6e0.6589a8"
            ]
        ]
    },
    {
        "id": "9b02b6e0.6589a8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1927.833408355713,
        "y": 1065.333370923996,
        "wires": [
            [
                "1aee5fb3.c2032",
                "17f6f0f5.e8e08f"
            ],
            [
                "f4598763.13ee78"
            ]
        ]
    },
    {
        "id": "f4598763.13ee78",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2092.8332920074463,
        "y": 1125.0000414848328,
        "wires": []
    },
    {
        "id": "1aee5fb3.c2032",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2117.833293914795,
        "y": 1006.6667041778564,
        "wires": []
    },
    {
        "id": "17f6f0f5.e8e08f",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2107.8333435058594,
        "y": 1054.0000076293945,
        "wires": [
            [
                "2ddd3c2d.d3aba4"
            ]
        ]
    },
    {
        "id": "2ddd3c2d.d3aba4",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2253.8334045410156,
        "y": 1056.333351135254,
        "wires": []
    },
    {
        "id": "e718dba4.a1d948",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_assistant_by_id",
        "func": "var params = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1247.1666564941406,
        "y": 870.3333206176758,
        "wires": [
            [
                "d17d7dcd.7e31a"
            ]
        ]
    },
    {
        "id": "2218aa.f99e9756",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1577.166763305664,
        "y": 842.6668014526367,
        "wires": []
    },
    {
        "id": "d17d7dcd.7e31a",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1429.5001678466797,
        "y": 870.3333849906921,
        "wires": [
            [
                "2218aa.f99e9756"
            ],
            [
                "245b5261.dbd88e"
            ]
        ]
    },
    {
        "id": "245b5261.dbd88e",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1596.1667594909668,
        "y": 891.3333864212036,
        "wires": [
            [
                "6a004a62.0a6034"
            ]
        ]
    },
    {
        "id": "6a004a62.0a6034",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var params       = msg.payload_content ,\n    access_token = params.access_token,\n    user_id      = params.user_id,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1759.1666564941406,
        "y": 893.0000076293945,
        "wires": [
            [
                "4f9f41e9.cd2b3"
            ]
        ]
    },
    {
        "id": "4f9f41e9.cd2b3",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1897.1667785644531,
        "y": 893.000093460083,
        "wires": []
    },
    {
        "id": "f22f6e7b.b09f7",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_assistant",
        "func": "var access_token = msg.access_token;\n    user_data    = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_data` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1303.1667938232422,
        "y": 1128.3333778381348,
        "wires": [
            [
                "fbc9d9ee.646bc8"
            ]
        ]
    },
    {
        "id": "fbc9d9ee.646bc8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1468.6667175292969,
        "y": 1130.666708946228,
        "wires": [
            [
                "2da7884a.8e2688"
            ],
            [
                "7f739e74.47a5a"
            ]
        ]
    },
    {
        "id": "2da7884a.8e2688",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1616.3333129882812,
        "y": 1103.0001254081726,
        "wires": []
    },
    {
        "id": "7f739e74.47a5a",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1635.333309173584,
        "y": 1151.6667103767395,
        "wires": [
            [
                "6ce77516.2a0b0c"
            ]
        ]
    },
    {
        "id": "6ce77516.2a0b0c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var user_data    = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, user_data.user_id);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"user doesn't exits with provided `user_id`.\", record: null};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        user_obj.firstname = user_data.first_name;\n        user_obj.lastname  = user_data.last_name;\n        user_obj.email     = user_data.email;\n        user_obj.device_id = user_data.deviceId;\n        user_obj.push_accepted = user_data.push_accepted;\n        msg.payload = user_obj;\n        msg.api_response = {status: 200, msg: \"Record fetched successfully\", records: user_obj};\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is invalid. Plesae check it once.\", record: null};\n}\nreturn msg;\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1793.8334007263184,
        "y": 1206.6667137145996,
        "wires": [
            [
                "fb59f203.9f2f"
            ]
        ]
    },
    {
        "id": "fb59f203.9f2f",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1941.8333435058594,
        "y": 1208.0000076293945,
        "wires": [
            [
                "f4598763.13ee78"
            ],
            [
                "6592bd8f.ec7434",
                "ac1fc897.22f068"
            ]
        ]
    },
    {
        "id": "6592bd8f.ec7434",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2113.833293914795,
        "y": 1185.0000476837158,
        "wires": []
    },
    {
        "id": "ac1fc897.22f068",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"updated user_paylaod \");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_resposne;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2102.8333435058594,
        "y": 1232.333351135254,
        "wires": [
            [
                "ed80efa5.97463"
            ]
        ]
    },
    {
        "id": "ed80efa5.97463",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2269.8333435058594,
        "y": 1228.6666641235352,
        "wires": []
    },
    {
        "id": "d5a7251d.86fb18",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_assistant",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1299.5,
        "y": 1284,
        "wires": [
            [
                "4bb56912.8fefc8"
            ]
        ]
    },
    {
        "id": "4bb56912.8fefc8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1490.333251953125,
        "y": 1290,
        "wires": [
            [
                "833797ef.08e588"
            ],
            [
                "e93c0294.21bb5"
            ]
        ]
    },
    {
        "id": "833797ef.08e588",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1637.9998474121094,
        "y": 1262.3334164619446,
        "wires": []
    },
    {
        "id": "e93c0294.21bb5",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1656.999843597412,
        "y": 1311.0000014305115,
        "wires": [
            [
                "6f803e00.6ce044"
            ]
        ]
    },
    {
        "id": "6f803e00.6ce044",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n    \nif(isUserAuthenticated(payload, access_token)){\n    var user_obj = isUserExists(payload, body.id);\n    if( isEmpty(user_obj) ){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"User doesn't exists in database.\", data: []};    \n    }else{\n\n        if( !isExistsIngroup(body, user_obj) ){\n            msg.API_ERROR   = \"API_ERROR\";\n            msg.statusCode  = 400;\n            msg.payload     = {status: 400, msg: \"User doesn't exits in this group\", data: []};    \n        }else{\n            msg.API_ERROR   = \"API_SUCCESS\";\n            delete user_obj.data.groups[body.group_id];\n            msg.payload             = user_obj ;\n            msg.api_response        =  {status: 200, msg: \"User removed successfully.\", data: user_obj};\n        }\n    }\n}else{\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Plesae check access_token.\", data: []};\n}\n    \nreturn msg;\n\nfunction isExistsIngroup(group, user){\n    var group_id = group.group_id ,\n        user_group = user.data.groups ;\n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction isUserExists(users, user_id){\n    var obj = {};\n    for(var itr in users){\n        if(users[itr]._id == user_id){\n            obj = users[itr] ;    \n        }\n    }\n    return obj;\n}\n\nfunction isUserAuthenticated(users, access_token){\n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            return true ;\n        }\n    }\n    return false;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1817.5000305175781,
        "y": 1339.333381652832,
        "wires": [
            [
                "4fa2c52f.da0f8c"
            ]
        ]
    },
    {
        "id": "4fa2c52f.da0f8c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1950,
        "y": 1341.6666259765625,
        "wires": [
            [
                "d3c981ad.a37fe",
                "3c39a2d7.282fde"
            ],
            [
                "5d7cbcb.3699944"
            ]
        ]
    },
    {
        "id": "5d7cbcb.3699944",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2114.9998836517334,
        "y": 1401.3332965373993,
        "wires": []
    },
    {
        "id": "d3c981ad.a37fe",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2139.999885559082,
        "y": 1282.999959230423,
        "wires": []
    },
    {
        "id": "3c39a2d7.282fde",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"added assistant\");\nnode.warn(msg.payload);\n\nmsg.payload = msg.api_response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2129.9999351501465,
        "y": 1330.333262681961,
        "wires": [
            [
                "a90df879.2e92a8"
            ]
        ]
    },
    {
        "id": "a90df879.2e92a8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2275.9999961853027,
        "y": 1332.6666061878204,
        "wires": []
    },
    {
        "id": "408043d6.f202ec",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_group_detail",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else if(isEmpty(data.name)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_name` is missing\", record: []};\n}else if(isEmpty(data.owner_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_owner_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1308.5000457763672,
        "y": 1401.0000581741333,
        "wires": [
            [
                "19fbd9bf.7d9396"
            ]
        ]
    },
    {
        "id": "a2e9c193.c847",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1642.5001029968262,
        "y": 1399.000117301941,
        "wires": []
    },
    {
        "id": "19fbd9bf.7d9396",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1487.8334274291992,
        "y": 1414.0002794265747,
        "wires": [
            [
                "a2e9c193.c847"
            ],
            [
                "1d17c334.e9a03d"
            ]
        ]
    },
    {
        "id": "1d17c334.e9a03d",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1663.8334350585938,
        "y": 1444.0001192092896,
        "wires": [
            [
                "3cfbf703.f02c58"
            ]
        ]
    },
    {
        "id": "3cfbf703.f02c58",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    payload      = msg.payload ;\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Invalid `access_token`. Plesae check it once.\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload     = {\n        table       : \"group_table\",\n        owner_id    : data.owner_id,\n        group_name  : data.name\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1822.8333625793457,
        "y": 1443.000228881836,
        "wires": [
            [
                "4b7b045e.90d4bc"
            ]
        ]
    },
    {
        "id": "4b7b045e.90d4bc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1958.5000381469727,
        "y": 1442.0000648498535,
        "wires": [
            [
                "5d7cbcb.3699944"
            ],
            [
                "581140d.29885c",
                "c7e65ff.722c8a"
            ]
        ]
    },
    {
        "id": "581140d.29885c",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2134.500045776367,
        "y": 1446.6667289733887,
        "wires": []
    },
    {
        "id": "c7e65ff.722c8a",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2124.500030517578,
        "y": 1499.0000381469727,
        "wires": [
            [
                "982ca065.fb5a8"
            ]
        ]
    },
    {
        "id": "982ca065.fb5a8",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2267.500030517578,
        "y": 1500.333351135254,
        "wires": []
    },
    {
        "id": "645bcdba.991044",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "get_users_groups",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId;\n    \n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(user_id)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`user_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:group_table\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1242.1666870117188,
        "y": 965.6666946411133,
        "wires": [
            [
                "4ba1a09b.2a3d3"
            ]
        ]
    },
    {
        "id": "6056700f.3d639",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1542.166919708252,
        "y": 946.0002021789551,
        "wires": []
    },
    {
        "id": "4ba1a09b.2a3d3",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1409.0000839233398,
        "y": 966.3333721160889,
        "wires": [
            [
                "6056700f.3d639"
            ],
            [
                "81a656e3.c85a68"
            ]
        ]
    },
    {
        "id": "81a656e3.c85a68",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1566.1667594909668,
        "y": 1005.0000400543213,
        "wires": [
            [
                "27aa5866.044bd8"
            ]
        ]
    },
    {
        "id": "27aa5866.044bd8",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "var params       = msg.req_params,\n    access_token = params.access_token,\n    user_id      = params.content.userId,\n    payload      = msg.payload ;\n\nuser_id = \"0a9b50963bc76018418ffd857d551ced\";\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n}else{\n    var userGroups  = populateUserGroups(user_id, payload);\n    if(isEmpty(userGroups)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"There is no group for this user.\", record: []};    \n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.statusCode  = 200;\n        msg.payload     = {status:200, msg: \"User group fetched successfully.\", record: userGroups};    \n    }\n}    \nreturn msg;\n\nfunction populateUserGroups(userId, groups){\n    var obj = [];\n    \n    if(isEmpty(userId)) return obj;\n    if(isEmpty(groups)) return obj;\n    \n    for(var itr in groups){\n        if(groups[itr].owner_id == userId){\n            obj.push(groups[itr]);\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1753.16676902771,
        "y": 1003.3333721160889,
        "wires": [
            [
                "c34fd50d.8fd768"
            ]
        ]
    },
    {
        "id": "c34fd50d.8fd768",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1916.1667785644531,
        "y": 1004.000039100647,
        "wires": []
    },
    {
        "id": "239a4a3b.ed4ef6",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_group",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n    \nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`group_id` is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users AND access_token:\" + access_token,\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1291.5,
        "y": 1494,
        "wires": [
            [
                "c915488b.9624e8"
            ]
        ]
    },
    {
        "id": "c915488b.9624e8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1481.6666259765625,
        "y": 1517.6666259765625,
        "wires": [
            [
                "1e9ca1bd.cbce4e"
            ],
            [
                "524fda04.a5b3e4"
            ]
        ]
    },
    {
        "id": "1e9ca1bd.cbce4e",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1629.3332214355469,
        "y": 1490.000042438507,
        "wires": []
    },
    {
        "id": "524fda04.a5b3e4",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1648.3332176208496,
        "y": 1538.666627407074,
        "wires": [
            [
                "265b51d8.b1d32e"
            ]
        ]
    },
    {
        "id": "265b51d8.b1d32e",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var body         = msg.payload_data ,\n    access_token = msg.access_token,\n    payload      = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Invalid `access_token`. Please check access_token.\", data: []};    \n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.user_obj = payload[0];\n    msg.payload  = {\n      query: \"table:group_table\"  ,\n      sort : \"_id<string>\"\n    };\n}   \n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1778.0002746582031,
        "y": 1598.6667346954346,
        "wires": [
            [
                "ed566255.7113"
            ]
        ]
    },
    {
        "id": "ed566255.7113",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1920.500114440918,
        "y": 1625.9999513626099,
        "wires": [
            [
                "e40bc284.830bc"
            ],
            [
                "dc409187.97054"
            ]
        ]
    },
    {
        "id": "e40bc284.830bc",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2069.5001258850098,
        "y": 1585.6667757034302,
        "wires": []
    },
    {
        "id": "dc409187.97054",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 2090.166793823242,
        "y": 1638.0002784729004,
        "wires": [
            [
                "72c4bf5b.a1704"
            ]
        ]
    },
    {
        "id": "72c4bf5b.a1704",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "var group_tables = msg.payload ,\n    user_obj     = msg.user_obj,\n    data         = msg.payload_data;\n\nif(isEmpty(group_tables)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to find groups for this user.\", data: []};    \n}else{\n    var group = populate_record(user_obj._id, group_tables);\n    if(isEmpty(group)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 403;\n        msg.payload     = {status: 403, msg: \"You are not authrozied to remove this group.\", data: []};    \n    }else{\n        group._deleted  = true;\n        msg.payload     = group;\n    }\n}\n\nreturn msg;\n\nfunction populate_record(userId, groups){\n    var obj = {};\n    for(var itr in groups){\n        if(\n            \n            (groups[itr]._id        == data.id    ) &&\n            (groups[itr].owner_id   == userId)\n        ){\n            obj = groups[itr];\n        }\n    }\n    return obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2240.166778564453,
        "y": 1636.6667251586914,
        "wires": [
            [
                "d4217daa.54806"
            ]
        ]
    },
    {
        "id": "40ef3e97.9699b",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2553,
        "y": 1581,
        "wires": []
    },
    {
        "id": "15860d44.7d8753",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2572.500162124634,
        "y": 1626.3334324359894,
        "wires": []
    },
    {
        "id": "5661aefd.177be",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(msg.payload);\nmsg.payload = {\n    status  : 200,\n    msg     : \"Record creadted successfully\",\n    record  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2562.5001468658447,
        "y": 1678.6667416095734,
        "wires": [
            [
                "d646672f.677488"
            ]
        ]
    },
    {
        "id": "d646672f.677488",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2705.5001468658447,
        "y": 1680.0000545978546,
        "wires": []
    },
    {
        "id": "d4217daa.54806",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2385,
        "y": 1638,
        "wires": [
            [
                "40ef3e97.9699b"
            ],
            [
                "15860d44.7d8753",
                "5661aefd.177be"
            ]
        ]
    },
    {
        "id": "2c021dd8.471292",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistant_to_groups",
        "func": "var access_token = msg.access_token;\n    data         = msg.payload_data;\n\nif(isEmpty(access_token)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"`access_token` is missing\", record: []};\n}else if(isEmpty(data.assistants)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Assistants list is missing\", record: []};\n}else{\n    msg.API_ERROR   = \"API_SUCCESS\";\n    msg.payload = {\n        query: \"table:users\",\n        sort: \"_id<string>\"\n    };\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1334.4999961853027,
        "y": 1590.0000352859497,
        "wires": [
            [
                "61d507ca.0f3a28"
            ]
        ]
    },
    {
        "id": "61d507ca.0f3a28",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1492.6666259765625,
        "y": 1632.6666259765625,
        "wires": [
            [
                "aa8444ff.e07818"
            ],
            [
                "d2ef871e.0585d8"
            ]
        ]
    },
    {
        "id": "aa8444ff.e07818",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 1640.3332214355469,
        "y": 1605.000042438507,
        "wires": []
    },
    {
        "id": "d2ef871e.0585d8",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1659.3332176208496,
        "y": 1653.666627407074,
        "wires": [
            [
                "dfdd06d4.43f328"
            ]
        ]
    },
    {
        "id": "dfdd06d4.43f328",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var access_token    = msg.access_token,\n    assistants      = msg.payload_data.assistants,\n    payload         = msg.payload ,\n    group_id        = randomString(32);\n    \nif(isEmpty(payload)){\n    msg.API_ERROR   = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status:400, msg: \"Unable to get user records from database.\", record: []};\n}else{\n    \n    var user_obj    = populate_user(access_token, payload);\n    if(isEmpty(user_obj)){\n        msg.API_ERROR   = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status:400, msg: \"Invalid `access_token`. Please check it once.\", record: []};\n    }else{\n        msg.API_ERROR   = \"API_SUCCESS\";\n        msg.payload     = {\n            _id  : group_id,\n            table: \"group_table\",\n            owner_id: payload[0]._id,\n            group_name: getRandomGroupName()\n        };\n        \n        msg.update_user =  {\n            docs: populate_updated_users(group_id, payload, assistants)\n        };\n    }\n}\nreturn msg;\n\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n\nfunction getRandomGroupName(){\n    var groupName = [\"dri_main\", \"demo_group\", \"test_group\", \"first_responder\", \"second_responder\", \"third_responder\"];\n    return groupName[Math.floor(Math.random() * groupName.length)];\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {};\n    \n    if(isEmpty(access_token)) return obj;\n    if(isEmpty(users)) return obj;\n    \n    for(var itr in users){\n        if(users[itr].access_token == access_token){\n            obj = users[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_updated_users(group_id, users, assistants){\n    var assis = [];\n    for(var ass in assistants){\n        for(var itr in users){\n            if(assistants[ass].detail_id == users[itr]._id){\n                delete users[itr].type.virtual_group ;\n                users[itr].data = {groups: {}};\n                users[itr].data.groups[group_id] = true;\n                assis.push(users[itr]);\n            }\n        }\n    }\n    return assis;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1813.8334121704102,
        "y": 1724.333779335022,
        "wires": [
            [
                "5b71aba.73a7154"
            ]
        ]
    },
    {
        "id": "5b71aba.73a7154",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "API_ERROR",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1957.6666374206543,
        "y": 1723.0003261566162,
        "wires": [
            [
                "8b45b1b1.fc0b9"
            ],
            [
                "2caf8cad.c39244",
                "44778f46.48233"
            ]
        ]
    },
    {
        "id": "8b45b1b1.fc0b9",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2099.333297729492,
        "y": 1681.3337783813477,
        "wires": []
    },
    {
        "id": "2caf8cad.c39244",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2121.8334579467773,
        "y": 1727.3334531784058,
        "wires": []
    },
    {
        "id": "44778f46.48233",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "bulk_update",
        "func": "msg.payload = msg.update_user;\nmsg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method  = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2118.8334579467773,
        "y": 1778.0001239776611,
        "wires": [
            [
                "50e1b16d.5265d"
            ]
        ]
    },
    {
        "id": "50e1b16d.5265d",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2282.8333053588867,
        "y": 1775.666790008545,
        "wires": [
            [
                "26f92c93.f688c4"
            ]
        ]
    },
    {
        "id": "26f92c93.f688c4",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "node.warn(\"update assistants are as follows\");\nnode.warn(msg.payload);\nmsg.payload = {\n    status: 200,\n    msg: \"Assistants added successfully\",\n    record: msg.updated_user\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2450.8334045410156,
        "y": 1777.6667251586914,
        "wires": [
            [
                "a6f58eda.58d83"
            ]
        ]
    },
    {
        "id": "a6f58eda.58d83",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2600.8333435058594,
        "y": 1779.666633605957,
        "wires": []
    },
    {
        "id": "c2d00307.92d8f",
        "type": "cloudant out",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2958.1668395996094,
        "y": 93.33333587646484,
        "wires": []
    },
    {
        "id": "38dfbf7e.14c96",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2727.000171661377,
        "y": 136.666654586792,
        "wires": []
    },
    {
        "id": "5c26a1e3.6989c",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "bulk_insert payload",
        "func": "msg.payload = msg.updated_user_task;\nnode.warn(\"msg.payload >>>>>>>>>>>>>\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2771.00048828125,
        "y": 96.66667461395264,
        "wires": [
            [
                "c2d00307.92d8f"
            ]
        ]
    },
    {
        "id": "55683dea.d34ba4",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "count_view ",
        "func": "var payload             = msg.payload ,\n    body                = msg.payload_content,\n    access_token        = body.access_token,\n    all_pages           = body.all_pages,\n    page_id             = body.page_id;\n    \nnode.warn(\"after cloudant view 1\");\nnode.warn(new Date());\nnode.warn(new Date().getTime());\nif(all_pages){ //when app request for all pages\n    msg.all_pages_request = true ;\n    var db_record           = populate_records(payload.rows),\n        user_obj            = populate_user(access_token, db_record.users),\n        task_obj            = populate_taskobj(page_id, db_record.tasks);\n        \n    msg.db_get_page     = payload ;\n    msg.method          = \"GET\";\n    msg.url             = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?key=[\"'+ page_id +'\", \"'+ user_obj._id +'\", \"'+ task_obj._id +'\"]&reduce=true';\n}else{\n    msg.all_pages_request = false ;\n    if( page_id !== 1 || page_id !== 11 ){\n        var db_record           = populate_records(payload.rows),\n            user_obj            = populate_user(access_token, db_record.users),\n            task_obj            = populate_taskobj(page_id, db_record.tasks);\n            \n        msg.db_get_page     = payload ;\n        msg.method          = \"GET\";\n        msg.url             = 'https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?key=[\"'+ page_id +'\", \"'+ user_obj._id +'\", \"'+ task_obj._id +'\"]&reduce=true';\n    }else{\n        msg.db_get_page     = payload ;\n        msg.method          = \"GET\";\n        msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false\";\n    }        \n}    \n\n// node.warn(\"before count >>>>>>>>>>>>\");\n// node.warn(msg);\nnode.warn(\"after populate the all result >>>\");\nnode.warn(new Date());\nnode.warn(new Date().getTime());\nreturn msg;\n\n\nfunction populate_records(list){\n    var users = [], task_table = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n    }\n    \n    return {users: users, tasks: task_table} ;\n}\n\nfunction populate_user(access_token, users){\n    var obj = {} ,\n        phone = body.phone ;\n        \n    for(var i in users){\n        if(\n            (access_token === users[i].access_token) ||\n            (phone == users[i].virtual_phone.toString())\n            ){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1796.8333435058594,
        "y": 572.3333511352539,
        "wires": [
            [
                "9005f6af.57ea68"
            ]
        ]
    },
    {
        "id": "9005f6af.57ea68",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "Count view",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/page_counts?reduce=false",
        "tls": "",
        "x": 1967.3334655761719,
        "y": 573.6666584014893,
        "wires": [
            [
                "d38f86d4.3856a8"
            ]
        ]
    },
    {
        "id": "b9ef6f80.eb9b1",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_selected_user_task\";\nmsg.method          = \"GET\";\nmsg.detail_obj      = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2830.8021030426025,
        "y": 174.57424926757812,
        "wires": [
            [
                "47dad7f1.96d4e8"
            ]
        ]
    },
    {
        "id": "47dad7f1.96d4e8",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2995.802177429199,
        "y": 170.24088287353516,
        "wires": [
            [
                "a4b64678.912108"
            ]
        ]
    },
    {
        "id": "a4b64678.912108",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate",
        "func": "var detail_obj = msg.detail_obj,\n    payload    = msg.payload ;\n\nif(isEmpty(payload)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload = {status: 400, error: true, msg: \"`access_token` is required to update detail\", data: body};\n}else{\n    msg.api_status  = \"API_ERROR\";\n    var user_tasks  = populate_user_task(payload.rows, detail_obj);\n    msg.payload     = {detail_obj: detail_obj, subscribed_users: user_tasks};\n}    \nreturn msg;\n\nfunction populate_user_task(lists, obj){\n    var user_tasks = [];\n    \n    for(var itr in lists){\n        if(\n            ( if_exists_in_arr(lists[itr].value.task_id, obj.task_id) )&&\n            (lists[itr].value.page_id  == obj.page_id)\n        ){\n            lists[itr].value.synchronized = 0;\n            lists[itr].value.status       = 0;\n            user_tasks.push(lists[itr].value);\n        }\n    }\n    return user_tasks;\n}\n\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3184.8021965026855,
        "y": 117.57430720329285,
        "wires": [
            [
                "cedd9c33.0f069",
                "3fe194ce.c5304c"
            ]
        ]
    },
    {
        "id": "10ee25dc.1f551a",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "Bulk Update",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3567.802215576172,
        "y": 53.90766406059265,
        "wires": [
            [
                "ea798a93.b276a8"
            ]
        ]
    },
    {
        "id": "cedd9c33.0f069",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "Notify socket server",
        "method": "POST",
        "ret": "obj",
        "url": "https://socket-server.mybluemix.net/accept_request",
        "tls": "",
        "x": 3457.469528198242,
        "y": 138.90762209892273,
        "wires": [
            [
                "ea798a93.b276a8"
            ]
        ]
    },
    {
        "id": "3fe194ce.c5304c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\nmsg.method      = \"POST\";\n\nnode.warn(\">>>>>>>>>>>>>>>>>>>>>>>>\");\nnode.warn(msg.payload);\n\nmsg.payload     = {\n  docs: msg.payload   \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3411.4688720703125,
        "y": 68.57432436943054,
        "wires": [
            [
                "10ee25dc.1f551a"
            ]
        ]
    },
    {
        "id": "ea798a93.b276a8",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3707.0007934570312,
        "y": 118.00008964538574,
        "wires": []
    },
    {
        "id": "c8e697b5.8cbfb8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "msg.url = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_data\";\nmsg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1985.4999694824219,
        "y": 149.66666412353516,
        "wires": [
            [
                "963697ec.033ba8"
            ]
        ]
    },
    {
        "id": "963697ec.033ba8",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2146.500045776367,
        "y": 142.00001907348633,
        "wires": [
            [
                "2e78e0d1.6e91c"
            ]
        ]
    },
    {
        "id": "60ebc840.c4c168",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "After update_create_user_task",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 4741.500930786133,
        "y": 404.33334255218506,
        "wires": []
    },
    {
        "id": "79a95d3b.fee184",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "create_optional_task",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3478.1668701171875,
        "y": 232.33333730697632,
        "wires": []
    },
    {
        "id": "aa6e064d.f28708",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "addDetail payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2854.500099182129,
        "y": 327.3333282470703,
        "wires": []
    },
    {
        "id": "3216a994.9589e6",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "Under Timeout processor",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 4368.166923522949,
        "y": 248.00004482269287,
        "wires": []
    },
    {
        "id": "277523b2.49c11c",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 4144.499923706055,
        "y": 193.33333778381348,
        "wires": [
            [
                "7936c18d.ddbd1"
            ],
            [
                "3216a994.9589e6"
            ]
        ]
    },
    {
        "id": "6ba779a9.034fd8",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "add_assistant_into_group",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1336.1667442321777,
        "y": 1736.000099182129,
        "wires": [
            [
                "886709f4.a03f88"
            ]
        ]
    },
    {
        "id": "886709f4.a03f88",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_groups_users",
        "tls": "",
        "x": 1549.2421989440918,
        "y": 1774.9767475128174,
        "wires": [
            [
                "16f97a7.65a3686"
            ]
        ]
    },
    {
        "id": "16f97a7.65a3686",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload ,\n    req_user_id     = msg.req_body.table_data.user_id,\n    req_group_id    = msg.req_body.table_data.group_id,\n    access_token    = msg.access_token;\n    \nif(isEmpty(payload.rows)){\n    msg.statusCode = 400;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant views\", result: null};\n    return msg;\n}else{\n    if(isEmpty(req_user_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`user_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_id)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`group_id` is must required to add user into group.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(access_token)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"`access_token` is mising.\", result: null};\n        return msg;\n    }\n    \n    var db_records      = populate_record(payload.rows),\n        req_user_obj    = populate_requested_user(db_records.users, req_user_id),\n        req_group_obj   = populate_requested_group(db_records.groups, req_group_id);\n        \n    if(isEmpty(req_user_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find user with requested `user_id`.\", result: null};\n        return msg;\n    }\n    \n    if(isEmpty(req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"Unable to find group with requested `group_id`.\", result: null};\n        return msg;\n    }\n    \n    if( check_user_already_exists(req_user_obj, req_group_obj)){\n        msg.statusCode = 400;\n        msg.api_status = \"API_ERROR\";\n        msg.payload    = {status: 400, msg: \"User already added into this group.\", result: null};\n        return msg;\n    }else{\n        msg.statusCode = 200;\n        msg.api_status = \"API_SUCCESS\";\n        if(isEmpty(req_user_obj.data)) {\n            var obj = {};\n            obj[req_group_id] = true ;\n            req_user_obj.data = {\n                groups : obj\n            };\n        }else{\n            req_user_obj.data.groups[req_group_id] = true ;    \n        }\n        \n        msg.payload   = req_user_obj;\n        \n        node.warn(msg);\n        return msg;\n    }\n}\n    \n\n\nfunction check_user_already_exists(user, group){\n    var group_id    = group.group_id , user_group = {};\n    if(isEmpty(user.data)){\n        user_group  = {\n            data : {\n                groups : {\n                    \n                }\n            }\n        };\n    }else{\n        user_group  = user.data.groups;\n    }\n        \n        \n    if(group_id in user_group){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nfunction populate_requested_group(list, group_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(group_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == group_id){\n            obj = {\n                group_id    : list[itr]._id,\n                group_name  : list[itr].group_name\n            };\n        }\n    }\n    return obj;\n}\n\nfunction populate_requested_user(list, user_id){\n    var obj = {};\n    \n    if(isEmpty(list)) return obj;\n    if(isEmpty(user_id)) return obj;\n    \n    for(var itr in list){\n        if(list[itr]._id == user_id){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var groups = [], users = [];\n    \n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {users: users, groups: groups};\n}\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1748.2578353881836,
        "y": 1801.632924079895,
        "wires": [
            [
                "9352089d.bbab88"
            ]
        ]
    },
    {
        "id": "9352089d.bbab88",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1915.4999694824219,
        "y": 1866.3332901000977,
        "wires": [
            [
                "94a56e0d.26fb2"
            ],
            [
                "37915376.17a00c",
                "3f8da897.79be98",
                "532e4d79.fc2404"
            ]
        ]
    },
    {
        "id": "3f8da897.79be98",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2098.5001220703125,
        "y": 1857.0004081726074,
        "wires": []
    },
    {
        "id": "37915376.17a00c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "response",
        "func": "msg.payload = {\n    status: 200,\n    msg   : \"User added into group successfully\",\n    data  : msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2084.500045776367,
        "y": 1900.0002756118774,
        "wires": [
            [
                "4545e48a.b62b3c"
            ]
        ]
    },
    {
        "id": "4545e48a.b62b3c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2233.5001258850098,
        "y": 1899.0003328323364,
        "wires": []
    },
    {
        "id": "94a56e0d.26fb2",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2070.5000400543213,
        "y": 1820.0001096725464,
        "wires": []
    },
    {
        "id": "532e4d79.fc2404",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2101.8333702087402,
        "y": 1963.6670846939087,
        "wires": []
    },
    {
        "id": "a8a5a4a.1688658",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "User Update Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2268.1668014526367,
        "y": 559.3334074020386,
        "wires": []
    },
    {
        "id": "6b8489f9.54ef98",
        "type": "function",
        "z": "5aaca332.83ed4c",
        "name": "send sms code",
        "func": "var user_data = msg.payload;\nvar code = user_data.code || 1234;\nmsg.topic = user_data.virtual_phone || 12145644732;\nmsg.payload = \"Your verification code for the Dri List app is : \" + code;\n\n\nmsg.api_response = {\n    \"page_id\":      11,\n    \"code\" : user_data.code\n};\n        \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620.333324432373,
        "y": 492.0000305175781,
        "wires": [
            [
                "d3259aa5.9d1bc8",
                "7e0b20cc.4e882",
                "f14aafbb.502ce"
            ]
        ]
    },
    {
        "id": "f14aafbb.502ce",
        "type": "twilio out",
        "z": "5aaca332.83ed4c",
        "service": "_ext_",
        "twilio": "2ff3abf2.78fcf4",
        "from": "+12317146495",
        "number": "",
        "name": "SMS verify Code",
        "x": 873.3333129882812,
        "y": 472,
        "wires": []
    },
    {
        "id": "d3259aa5.9d1bc8",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "Responded via Twilio",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 884.3333129882812,
        "y": 516,
        "wires": []
    },
    {
        "id": "7e0b20cc.4e882",
        "type": "change",
        "z": "5aaca332.83ed4c",
        "name": "change",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 841.2005004882812,
        "y": 416.16796875,
        "wires": [
            [
                "707c9287.c5a9fc"
            ]
        ]
    },
    {
        "id": "707c9287.c5a9fc",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "API Result",
        "x": 1019.3333129882812,
        "y": 416.25,
        "wires": []
    },
    {
        "id": "ad780b1b.e3c6f8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 295.00010681152344,
        "y": 742.9999923706055,
        "wires": []
    },
    {
        "id": "ce8c5ebc.2e07d",
        "type": "http in",
        "z": "3d6329c5.e74616",
        "name": "Recieve Twilio Errors",
        "url": "/twilio_error",
        "method": "post",
        "swaggerDoc": "",
        "x": 129.5,
        "y": 40,
        "wires": [
            [
                "499c2631.2dde98",
                "a0f421be.f3901"
            ]
        ]
    },
    {
        "id": "499c2631.2dde98",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 326.5,
        "y": 40.99999237060547,
        "wires": []
    },
    {
        "id": "12b93aaf.ae4ca5",
        "type": "cloudant in",
        "z": "3d6329c5.e74616",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 450.83343505859375,
        "y": 791.3333320617676,
        "wires": [
            [
                "7e24d844.c0f3c8"
            ]
        ]
    },
    {
        "id": "9873f820.67d978",
        "type": "inject",
        "z": "3d6329c5.e74616",
        "name": "Inject",
        "topic": "start",
        "payload": "{\"From\": \"919815098150\", \"Body\": \"My reservations for monday?\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 82.83341217041016,
        "y": 801.0000076293945,
        "wires": [
            [
                "b27ddb2a.4eb5a8"
            ]
        ]
    },
    {
        "id": "b27ddb2a.4eb5a8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "msg ",
        "func": "var content = msg.payload ,\n    obj   = check_valid_phone(content);\n\n\nnode.warn(\"When Twilwio SMS comes to system >>>>\");    \nnode.warn(msg.payload);\n\n\nvar payload = {\n    \"phone\": obj.phone,\n    \"body\" : obj.body\n};\n\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\nmsg.req_body = obj ;\nreturn msg;\n\n\nfunction check_valid_phone(obj){\n    return {\n        phone: Number(obj.From.replace('+', '').trim()) ,\n        body : obj.Body \n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 294.8334503173828,
        "y": 790.3333740234375,
        "wires": [
            [
                "12b93aaf.ae4ca5"
            ]
        ]
    },
    {
        "id": "7e24d844.c0f3c8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\n//user = {}; //test obj used when we need to add details and task for stumped category if the user is already registred with system.\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload = {\n        _id         : randomString(32),\n        table       : \"users\",\n        access_token:  token(),\n        firstname   :  parseInt(phone),\n        lastname    :   \"\",\n        phone       :  parseInt(phone),\n        virtual_phone: parseInt(phone),\n        security_level: 0,\n        code:         rand(),\n        type: {\n            \"public\": \"public\"\n        },\n        data: {},\n        device_id: null,\n        push_accepted: 0\n    };\n    msg.userObj = msg.payload ;\n}else{\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.userObj = user ;\n}\n\nmsg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\nmsg.method  = \"GET\";\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 638.8334503173828,
        "y": 793.3333740234375,
        "wires": [
            [
                "17618957.5d3447"
            ]
        ]
    },
    {
        "id": "17618957.5d3447",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 829.5001678466797,
        "y": 781.0001096725464,
        "wires": [
            [
                "571abf69.934f9"
            ],
            [
                "a01278b4.048078"
            ]
        ]
    },
    {
        "id": "6950da92.7dba04",
        "type": "http in",
        "z": "3d6329c5.e74616",
        "name": "",
        "url": "/user_chatbot_response",
        "method": "post",
        "swaggerDoc": "",
        "x": 126.83332824707031,
        "y": 1220.0000324249268,
        "wires": [
            [
                "ebcb0060.d0c45",
                "f21ad68f.ee8c68"
            ]
        ]
    },
    {
        "id": "bf4e799.74f8288",
        "type": "comment",
        "z": "3d6329c5.e74616",
        "name": "Respond back to user via Roger user.",
        "info": "",
        "x": 181.83334350585938,
        "y": 1177.000055948893,
        "wires": []
    },
    {
        "id": "afd8e753.1a3748",
        "type": "http in",
        "z": "3d6329c5.e74616",
        "name": "Get SMS",
        "url": "/twilio_sms",
        "method": "post",
        "swaggerDoc": "",
        "x": 82.66672134399414,
        "y": 745.6666193008423,
        "wires": [
            [
                "ad780b1b.e3c6f8",
                "a85d3a20.db06d8",
                "b27ddb2a.4eb5a8"
            ]
        ]
    },
    {
        "id": "7be02fcb.91051",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload , //should be IBM Watson node response\n    req_body    = msg.req_body;\n    \n    //payload.daata = \"\";\n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic   = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n         msg.adminData = {topic: 12145644732, body: \"Please wait…\"};\n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n         msg.adminData = {topic: 12145644732, body: payload.data};\n    }\n\nmsg.userObj.data[\"fa1785333117ba7c06b9020a6d3c0079\"] = {\n        \"context\": payload.context\n    };\n\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1405.6668891906738,
        "y": 1035.3336601257324,
        "wires": [
            [
                "aed4184f.f6a6d8",
                "b729030c.08eac",
                "fa9be66.f4e2418"
            ]
        ]
    },
    {
        "id": "aed4184f.f6a6d8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_obj    = msg.task_obj,\n    new_details = [],\n    userObj     = msg.userObj;\n\nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 10000\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar company_detail  = populate_company_detail() ,\n    watson_res  = populate_watson_response(chatbot, userObj), //show watson response under sms user\n    user_data   = populate_user_data(req_body, userObj); //to show detail under sms user\n    \nnew_details.push(company_detail);\nnew_details.push(watson_res);\nnew_details.push(user_data);\nnew_details.push(userObj); //save Watson context \n\nmsg.payload = {\n    docs: new_details\n};\n\nnode.warn(msg);\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\", task_obj._id], //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 2000\n    };    \n    \n    msg.user_page = obj;\n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };\n    \n    msg.company_detail = obj;\n    return obj;\n}\n\nfunction populate_user_data(req_body, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"], //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 5,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()  \n        \n    };   \n    return obj;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1638.3337783813477,
        "y": 1042.3334293365479,
        "wires": [
            [
                "a796323f.8b848",
                "8727d9db.f96218",
                "260bd43c.86c21c"
            ]
        ]
    },
    {
        "id": "a603ffaf.d83bb",
        "type": "comment",
        "z": "3d6329c5.e74616",
        "name": "Respond via users from their chatbot screens",
        "info": "",
        "x": 182,
        "y": 1700.04709815979,
        "wires": []
    },
    {
        "id": "64297f10.c26bf",
        "type": "http in",
        "z": "3d6329c5.e74616",
        "name": "",
        "url": "/ask_chatbot",
        "method": "post",
        "swaggerDoc": "",
        "x": 102.0078125,
        "y": 1745.2267475128174,
        "wires": [
            [
                "d899c5b0.5f8bc8",
                "824d3039.0314b"
            ]
        ]
    },
    {
        "id": "a0f421be.f3901",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 328.8333435058594,
        "y": 89.33333587646484,
        "wires": []
    },
    {
        "id": "ce64bfdd.18e53",
        "type": "cloudant in",
        "z": "3d6329c5.e74616",
        "name": "isUserExists",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 451.75787353515625,
        "y": 1793.0006103515625,
        "wires": [
            [
                "a67d8456.15e118"
            ]
        ]
    },
    {
        "id": "a67d8456.15e118",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "isUserExists ?",
        "func": "var user        = msg.payload,\n    phone       = msg.req_body.phone;\n\nif(isEmpty(user)){\n    //when user number doesn't exists in database\n    msg.api_status = \"USER_NOT_EXISTS\";\n    msg.payload    = {status: 400, msg: \"User doesn't exists\", data: null};\n}else{\n    msg.userObj = user ;\n    //when user number exists in database find stored task for that user.\n    msg.api_status = \"USER_EXISTS\";\n    msg.url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\n    msg.method  = \"GET\";\n}\n\n\nreturn msg;\n\nfunction rand() {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\nfunction token() {\n    return new Date().getTime() + \".\" +Math.random().toString(36).substr(2) ;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 639.7578125,
        "y": 1791.00048828125,
        "wires": [
            [
                "fc94bca9.29f52"
            ]
        ]
    },
    {
        "id": "d899c5b0.5f8bc8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 318.5911636352539,
        "y": 1746.6672554016113,
        "wires": []
    },
    {
        "id": "824d3039.0314b",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "msg",
        "func": "var payload = msg.payload;\nmsg.payload = {\n    query: \"table:users AND virtual_phone: \"+ payload.phone,\n    sort: \"_id<string>\"\n};\n\nmsg.req_body = payload ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 296.5911865234375,
        "y": 1793.6671142578125,
        "wires": [
            [
                "ce64bfdd.18e53"
            ]
        ]
    },
    {
        "id": "7a9c2425.65378c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records      = populate_record(payload.rows),\n    stumped_task    = populate_stumped_task(db_records.task_table, \"StumpedTask\"),\n    timeout_obj     = populate_obj(db_records.timeout, stumped_task.timeout_id); //static timeout_obj for ReminderBot company\n\n\nmsg.task_obj    = populate_task(db_records.task_table, msg.req_body.phone);\nmsg.userObj     = isEmpty(msg.userObj) ? {} : msg.userObj[0] ;\nmsg.timeout_obj = timeout_obj ;\nmsg.method      = \"POST\";\nmsg.url         = \"https://play-timeout.mybluemix.net/chatbot\";\nmsg.payload     = {\n  text :   textMsg ,\n  context : getContext(msg.userObj)\n};\nreturn msg;\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\n\nfunction populate_stumped_task(task_tables, task_name){\n    var task_table = {};\n    if(isEmpty(task_tables)) return task_table;\n    if(isEmpty(task_name)) return task_name ;\n    \n    for(var itr in task_tables){\n        if(task_tables[itr].task_name == task_name){\n            task_table = task_tables[itr];\n        }\n    }\n    \n    return task_table;\n}\n\n\nfunction getContext(user){\n    if(isEmpty(user.data)){\n        return {\n            first_name : user.firstname.toString(),\n            last_name  : user.lastname.toString(),\n            phone     : user.virtual_phone.toString(),\n            timeStamp : new Date().getTime()\n        };\n    }else{\n        if(isEmpty(user.data[\"fa1785333117ba7c06b9020a6d3c0079\"])){\n            return {\n                first_name : user.firstname.toString(),\n                last_name  : user.lastname.toString(),\n                phone     : user.virtual_phone.toString(),\n                timeStamp : new Date().getTime()\n            };\n        }else{\n            var context = user.data[\"fa1785333117ba7c06b9020a6d3c0079\"].context;\n            if(!isEmpty(context)){\n                if(new Date().getTime() > ( Number(context.timeStamp) +  10800000 )){\n                    return {\n                        first_name : user.firstname.toString(),\n                        last_name  : user.lastname.toString(),\n                        phone     : user.virtual_phone.toString(),\n                        timeStamp : new Date().getTime()\n                    };\n                }else{\n                    context.first_name = user.firstname.toString() || context.first_name ;\n                    context.last_name  = user.lastname.toString() || context.last_name ;\n                    context.phone     = user.virtual_phone.toString() || context.phone ;\n                    context.timeStamp = new Date().getTime();\n                    return context ;\n                }\n            }else{\n                return {\n                    first_name : user.firstname.toString(),\n                    last_name  : user.lastname.toString(),\n                    phone     : user.virtual_phone.toString(),\n                    timeStamp : new Date().getTime()\n                };\n            }\n        }\n    }\n}\n\nfunction populate_task(list, task_name){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_detail(list, task_arr){\n    var obj = {}; //company_bot, first_responder, second_responder\n    for(var i =0; i<list.length; i++){\n        if( if_exists_in_arr(task_arr._id, list[i].task_id) ){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\nfunction populate_record(list){\n    var timeout = [], users = [], groups = [], details = [], task_table = [], sorted_detail = [];\n    for(var itr in list){ \n        \n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"task_table\"){\n            task_table.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {groups: groups, timeout: timeout, users: users, details:sorted_detail, task_table:task_table};\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1109.33349609375,
        "y": 875.666748046875,
        "wires": [
            [
                "16bcd8f4.ee5307"
            ]
        ]
    },
    {
        "id": "a01278b4.048078",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 935.5003128051758,
        "y": 879.0001621246338,
        "wires": [
            [
                "7a9c2425.65378c"
            ]
        ]
    },
    {
        "id": "571abf69.934f9",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 938.5001754760742,
        "y": 694.3333339691162,
        "wires": [
            [
                "5c862abb.63fc04"
            ]
        ]
    },
    {
        "id": "d4ac771a.bb7bc8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    //payload.data = null ; //for the being all the IBM Watson messages are stumped.\n    if(isEmpty(payload.data)){\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\" ;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }else{\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: msg.payload};\n    }\nmsg.userObj.data[\"fa1785333117ba7c06b9020a6d3c0079\"] = {\n    \"context\": payload.context \n};\n\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1578.666618347168,
        "y": 695.6667166948318,
        "wires": [
            [
                "64ace391.712f7c",
                "a06b7d54.2dcd8",
                "d4ff830e.f3b98"
            ]
        ]
    },
    {
        "id": "4ace20dd.cf936",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2000.1667022705078,
        "y": 640.3333921432495,
        "wires": [
            [
                "2c5d6a12.654b46"
            ]
        ]
    },
    {
        "id": "260bd43c.86c21c",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1831.3339500427246,
        "y": 1037.6667699813843,
        "wires": [
            [
                "e54bb866.075438"
            ]
        ]
    },
    {
        "id": "a06b7d54.2dcd8",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1802.666732788086,
        "y": 636.6667051315308,
        "wires": []
    },
    {
        "id": "a7744c45.3fb2a",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 2044.833724975586,
        "y": 578.666710972786,
        "wires": []
    },
    {
        "id": "9338fb5c.8fe298",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n// as Client said to stop this SMS to himself. \nvar data = msg.adminData;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = data.body  ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1828.8337059020996,
        "y": 580.666710972786,
        "wires": [
            [
                "a7744c45.3fb2a"
            ]
        ]
    },
    {
        "id": "5acd7fe3.d988",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n\n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                node.warn(\"comes in when record is future one\")\n                //if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                //}\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    \n    if(isEmpty(groupUsers)) return obj;\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(group_id)) return obj;\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(!isEmpty(users[counter].data)){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2374.5006942749023,
        "y": 754.3333865404129,
        "wires": [
            [
                "777f176c.b3b6c8",
                "21bfbb6f.10b074"
            ]
        ]
    },
    {
        "id": "476a170a.9128e8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2159.1666870117188,
        "y": 754.0000506639481,
        "wires": [
            [
                "5acd7fe3.d988"
            ]
        ]
    },
    {
        "id": "8c1798c4.d32cd8",
        "type": "inject",
        "z": "3d6329c5.e74616",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1997.50044631958,
        "y": 789.0002098083496,
        "wires": [
            [
                "476a170a.9128e8"
            ]
        ]
    },
    {
        "id": "777f176c.b3b6c8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2597.166603088379,
        "y": 807.3333941698074,
        "wires": []
    },
    {
        "id": "21bfbb6f.10b074",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2595.4998931884766,
        "y": 753.6667586565018,
        "wires": [
            [
                "a0912bd9.4d88d8",
                "6f71e17e.1b7bf"
            ]
        ]
    },
    {
        "id": "6f71e17e.1b7bf",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2763.833480834961,
        "y": 778.6667577028275,
        "wires": [
            [
                "ff8a9c57.06bd3"
            ]
        ]
    },
    {
        "id": "be2332e0.16839",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2985.8334312438965,
        "y": 1067.666742324829,
        "wires": []
    },
    {
        "id": "e263b8a8.4abdc8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2230.333381652832,
        "y": 1032.999979019165,
        "wires": [
            [
                "c06ddac6.3d9ef8"
            ]
        ]
    },
    {
        "id": "9836bd28.d8fc1",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2648.666435241699,
        "y": 1075.6665754318237,
        "wires": [
            [
                "7f26b27a.1d7a2c",
                "61a6a5c5.668a9c"
            ]
        ]
    },
    {
        "id": "e4b4af45.92a26",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2653.3330993652344,
        "y": 1031.3332805633545,
        "wires": []
    },
    {
        "id": "61a6a5c5.668a9c",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2818.9997596740723,
        "y": 1077.6666612625122,
        "wires": [
            [
                "be2332e0.16839"
            ]
        ]
    },
    {
        "id": "1802e0cc.adf64f",
        "type": "inject",
        "z": "3d6329c5.e74616",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2046.3334846496582,
        "y": 1008.3332595825195,
        "wires": [
            [
                "e263b8a8.4abdc8"
            ]
        ]
    },
    {
        "id": "a0912bd9.4d88d8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nnode.warn(\"notification >>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2764.833480834961,
        "y": 736.3333407640457,
        "wires": [
            [
                "60fe295a.0a3bb8"
            ]
        ]
    },
    {
        "id": "60fe295a.0a3bb8",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 2942.833480834961,
        "y": 734.3333464860916,
        "wires": [
            [
                "36df8695.ac9fca"
            ],
            [
                "51226d03.962824"
            ],
            [
                "8521a34a.547eb"
            ],
            [
                "e0f8ca95.1b5708"
            ],
            [
                "a547a40.832546"
            ]
        ]
    },
    {
        "id": "36df8695.ac9fca",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "PUSH",
        "func": "var company_detail  = msg.company_detail ,\n    user_page       = msg.user_page,\n    user            = msg.userObj ,\n    push_data       = msg.payload;\n    \nmsg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": \"Group 1 - \" + user.virtual_phone + \" \" + push_data.msg \n\t\t}, \n\t\t\"target\": {\n\t\t\t\"deviceIds\": isArray(push_data.push) ? push_data.push : [push_data.push]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : company_detail.to_page_id ,\n\t\t\t\t\t\"user_page_id\": 18\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"user_page_id\"  : 18 ,\n\t\t\t\t\t\"page_id\": company_detail.to_page_id,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nreturn msg;\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3182.500114440918,
        "y": 554.3333673477173,
        "wires": [
            [
                "79fb1143.762f"
            ]
        ]
    },
    {
        "id": "51226d03.962824",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3182.8333282470703,
        "y": 684.3333855867386,
        "wires": [
            [
                "f904bd35.373ec"
            ]
        ]
    },
    {
        "id": "8521a34a.547eb",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3179.833381652832,
        "y": 743.3334094285965,
        "wires": [
            []
        ]
    },
    {
        "id": "e0f8ca95.1b5708",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3180.833381652832,
        "y": 791.3334122896194,
        "wires": [
            []
        ]
    },
    {
        "id": "f904bd35.373ec",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3371.6666717529297,
        "y": 720.6667186021805,
        "wires": [
            [
                "23c4d80d.f16a68"
            ],
            []
        ]
    },
    {
        "id": "23c4d80d.f16a68",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3539.6673889160156,
        "y": 714.666726231575,
        "wires": [
            [
                "5cf0af27.5b008",
                "91b25e9d.7419f",
                "1a9f5947.8f19f7"
            ]
        ]
    },
    {
        "id": "5cf0af27.5b008",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3451.6666717529297,
        "y": 641.6667186021805,
        "wires": [
            [
                "f904bd35.373ec"
            ]
        ]
    },
    {
        "id": "1a9f5947.8f19f7",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3752.1665802001953,
        "y": 712.666710972786,
        "wires": []
    },
    {
        "id": "91b25e9d.7419f",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3730.99991607666,
        "y": 664.0000754594803,
        "wires": []
    },
    {
        "id": "800f2f1c.daaef",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 2996.666748046875,
        "y": 1121.6666259765625,
        "wires": [
            [
                "1cd60a3.7f1f2f6"
            ],
            [
                "10a0441.d3628bc"
            ],
            [
                "2aa164b1.023b3c"
            ],
            [
                "f2a5e356.71c12"
            ]
        ]
    },
    {
        "id": "10a0441.d3628bc",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3222.666774749756,
        "y": 1102.66663646698,
        "wires": [
            [
                "9bcbafa6.99757"
            ]
        ]
    },
    {
        "id": "2aa164b1.023b3c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3221.666774749756,
        "y": 1179.6666402816772,
        "wires": [
            []
        ]
    },
    {
        "id": "f2a5e356.71c12",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3222.666774749756,
        "y": 1267.666645526886,
        "wires": [
            []
        ]
    },
    {
        "id": "9bcbafa6.99757",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3411.5001182556152,
        "y": 1138.9999694824219,
        "wires": [
            [
                "6f29950.5f43f6c"
            ],
            []
        ]
    },
    {
        "id": "5716291f.a35788",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3491.5001182556152,
        "y": 1059.9999694824219,
        "wires": [
            [
                "9bcbafa6.99757"
            ]
        ]
    },
    {
        "id": "6f29950.5f43f6c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "payload",
        "func": "msg.topic   = msg.payload[msg.counter];\nmsg.payload = \"There is a new message under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3579.500835418701,
        "y": 1132.9999771118164,
        "wires": [
            [
                "5716291f.a35788",
                "4458ee95.2e48",
                "54dfd6bd.125dd8"
            ]
        ]
    },
    {
        "id": "54dfd6bd.125dd8",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3792.000026702881,
        "y": 1130.9999618530273,
        "wires": []
    },
    {
        "id": "4458ee95.2e48",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3770.8333625793457,
        "y": 1082.3333263397217,
        "wires": []
    },
    {
        "id": "7f26b27a.1d7a2c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nnode.warn(\"notification >>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2824.0007362365723,
        "y": 1122.6666707992554,
        "wires": [
            [
                "b0ef0315.5e746",
                "800f2f1c.daaef"
            ]
        ]
    },
    {
        "id": "be55a6f1.a5d078",
        "type": "delay",
        "z": "3d6329c5.e74616",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1986.166748046875,
        "y": 738.6666870117188,
        "wires": [
            [
                "476a170a.9128e8"
            ]
        ]
    },
    {
        "id": "c11a38fd.082048",
        "type": "comment",
        "z": "3d6329c5.e74616",
        "name": "Process Timeout at each 5 min",
        "info": "",
        "x": 136.1666717529297,
        "y": 190.3333282470703,
        "wires": []
    },
    {
        "id": "2ba5bf66.53aa1",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1082.833381652832,
        "y": 223.04690265655518,
        "wires": [
            [
                "6e0aa70f.eca128"
            ]
        ]
    },
    {
        "id": "90d66704.3f6658",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1081.833381652832,
        "y": 300.04690647125244,
        "wires": [
            []
        ]
    },
    {
        "id": "79b405c7.4cc46c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1084.8334045410156,
        "y": 357.0469627380371,
        "wires": [
            []
        ]
    },
    {
        "id": "6e0aa70f.eca128",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1271.6667251586914,
        "y": 259.38023567199707,
        "wires": [
            [
                "6bb1eb64.51e694"
            ],
            []
        ]
    },
    {
        "id": "6bb1eb64.51e694",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1439.6674423217773,
        "y": 253.3802433013916,
        "wires": [
            [
                "7daff103.e6dea",
                "cd53652c.c056b8",
                "4dc91e79.3b2bb"
            ]
        ]
    },
    {
        "id": "7daff103.e6dea",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1351.6667251586914,
        "y": 180.38023567199707,
        "wires": [
            [
                "6e0aa70f.eca128"
            ]
        ]
    },
    {
        "id": "4dc91e79.3b2bb",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 1663.0001678466797,
        "y": 281.3802661895752,
        "wires": []
    },
    {
        "id": "cd53652c.c056b8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1641.8334197998047,
        "y": 235.71359825134277,
        "wires": []
    },
    {
        "id": "eef75422.5a7b88",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 902.8334274291992,
        "y": 274.04687118530273,
        "wires": [
            [
                "d8696f.ed1ee69"
            ],
            [
                "2ba5bf66.53aa1"
            ],
            [
                "90d66704.3f6658"
            ],
            [
                "79b405c7.4cc46c"
            ],
            [
                "f3f0b1a7.b32b9"
            ]
        ]
    },
    {
        "id": "f3f0b1a7.b32b9",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1074.8334045410156,
        "y": 488.38033962249756,
        "wires": []
    },
    {
        "id": "6571c141.cbeed",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 724.8334274291992,
        "y": 276.04686546325684,
        "wires": [
            [
                "eef75422.5a7b88"
            ]
        ]
    },
    {
        "id": "1fa85edd.011d11",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 723.8334274291992,
        "y": 318.3802824020386,
        "wires": [
            [
                "f3f0b1a7.b32b9"
            ]
        ]
    },
    {
        "id": "32ee390f.e2a6b6",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 554.1667861938477,
        "y": 414.04695892333984,
        "wires": []
    },
    {
        "id": "8e6d611.60287a",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 89.16663360595703,
        "y": 310.71356201171875,
        "wires": [
            [
                "b5c7f447.1ed778"
            ]
        ]
    },
    {
        "id": "ea19ba20.50fd88",
        "type": "comment",
        "z": "3d6329c5.e74616",
        "name": "Respond when SMS Comes to Company virtual_number.",
        "info": "",
        "x": 228.8333740234375,
        "y": 651.0000400543213,
        "wires": []
    },
    {
        "id": "c06ddac6.3d9ef8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    if(isEmpty(groupUsers)) return obj;\n    \n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(group_id)) return obj;\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(!isEmpty(users[counter].data)){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2438.9999961853027,
        "y": 1049.6666688919067,
        "wires": [
            [
                "e4b4af45.92a26",
                "9836bd28.d8fc1"
            ]
        ]
    },
    {
        "id": "b5c7f447.1ed778",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n    msg.company_page_id = null;\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    \n                    msg.company_page_id = details[itr].page_id ;\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    \n    if(isEmpty(groupUsers)) return obj;\n    \n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    if(isEmpty(group_id)) return obj;\n    \n    for(var counter in users){\n        if(!isEmpty(users[counter].data)){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 300.833251953125,
        "y": 310.66669273376465,
        "wires": [
            [
                "32ee390f.e2a6b6",
                "66784766.de7828"
            ]
        ]
    },
    {
        "id": "e54bb866.075438",
        "type": "delay",
        "z": "3d6329c5.e74616",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2046.3335361480713,
        "y": 1057.0001459121704,
        "wires": [
            [
                "e263b8a8.4abdc8"
            ]
        ]
    },
    {
        "id": "b0ef0315.5e746",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Notification Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2992.833511352539,
        "y": 1237.333366394043,
        "wires": []
    },
    {
        "id": "d43fd40e.f6f688",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "populate_records",
        "func": "var db_records  = msg.payload,\n    body        = msg.req_body,\n    name        = isEmpty(body.responder_user) ? \"Call Back\" : body.responder_user.firstname + \" \" + body.responder_user.lastname;\n\nif(isEmpty(db_records)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Unable to populate cloudant view to get data\", data: null};\n}else{\n    var task_obj    = populate_tasks(db_records.rows, body.task_name);\n    if(isEmpty(task_obj)){\n        msg.api_status = \"API_ERROR\";\n        msg.statusCode = 400 ;\n        msg.payload    = {status: 400, msg: \"Unable to get the task_ids with task_name\", data: null};\n    }else{\n        msg.api_status  = \"API_SUCCESS\";\n        msg.user_obj     = populate_userObj(db_records.rows, body.task_name);\n        msg.payload     = {\n            \"table\": \"details\",\n            \"task_id\": [task_obj._id],\n            \"child_task_id\": null,\n            \"user_id\": msg.user_obj._id ,\n            \"from_user_id\": {\n                \"user_id\": body.responder_user.user_id, \n                \"first_name\": body.responder_user.firstname,\n                \"lastname\" : body.responder_user.lastname,\n                \"phone\": body.responder_user.phone\n            },\n            \"page_id\": task_obj.page_id,\n            \"from_page_id\": task_obj.from_page_id,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg,\n                \"annotation\": populate_Char(name.split(\" \"))\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.user_response = {   //this object is saved to list on user screen for whom message is .\n            \"table\": \"details\",\n            \"task_id\": [\"18_0\"],\n            \"child_task_id\": null,\n            \"user_id\": msg.user_obj._id ,\n            \"from_user_id\": {\n                \"user_id\": msg.user_obj._id, \n                \"first_name\": msg.user_obj.firstname,\n                \"lastname\" : msg.user_obj.lastname,\n                \"phone\": msg.user_obj.phone\n            },\n            \"page_id\": 18,\n            \"from_page_id\": 0,\n            \"to_page_id\": 0,\n            \"synchronized\": 0,\n            \"processed\": 2,\n            \"status\": 2,\n            \"read\": 0,\n            \"display_if_empty\": \"true\",\n            \"date_created\": new Date().toJSON(),\n            \"offline_expiration_seconds\": 0,\n            \"priority\": 1,\n            \"type\": {\n                \"public\" : \"public\"\n            },\n            \"image\": \"\",\n            \"from_user\": {},\n            \"user_incoming\": {\n                \"note\"   : body,\n                \"message\": body.msg,\n                \"watson\" : body.msg\n            },\n            \"template\": {},\n            \"timeout\": {},\n            \"user_calculate\": {},\n            \"location\": {},\n            \"default\": {},\n            \"count_status\": {\n                \"active\": 1,\n                \"unread\": 0\n              },\n            \"count\": {\n                \"active\": 1,\n                \"unread\": 1\n            },\n            \"count_if\": {\n                \"active\": 1,\n                \"unread\": 0\n            },\n            \"createdAt\": new Date().getTime()\n        };\n        msg.api_response = {status: 200, msg: \"Record updated successfully\", data: msg.payload};\n    }\n}\nvar stumped_task        = populate_tasks(db_records.rows, \"StumpedTask\");\nmsg.task_obj            = task_obj ;\nmsg.timeout_obj         = populate_obj(db_records.rows, stumped_task.timeout_id); //static timeout_obj for ReminderBot company\nnode.warn(msg);\nreturn msg;\n\nfunction populate_Char(arr){\n  var str = \"\";\n  for(var itr in arr){\n    if(arr[itr]){\n      str += arr[itr].substr(0,1);\n    }\n  }\n  return \"..(\" + str + \")\";\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n   node.warn(\"list >>>>>>>>>>>>\");\n   node.warn(list);\n   for(var itr in list){\n        if(list[itr].value.table == \"timeout\"){\n            if(list[itr].value._id == id){\n                return list[itr].value;\n            }\n        }\n    }\n    return {};\n}\n\nfunction populate_userObj(list, phone_number){\n    if(isEmpty(list)) return {};\n    if(isEmpty(phone_number)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"users\"){\n            if(Number(list[itr].value.virtual_phone) == Number(phone_number)){\n                return list[itr].value;\n            }\n        }\n    }\n    return {};\n}\n\n\nfunction populate_tasks(list, task_name){\n    if(isEmpty(list)) return {};\n    if(isEmpty(task_name)) return {};\n    var task_obj = {};\n    for(var itr in list){\n        if(list[itr].value.table == \"task_table\"){\n            if(list[itr].value.task_name.toString() == task_name.toString()){\n                task_obj = list[itr].value;\n            }\n        }\n    }\n    return task_obj;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 729.8334045410156,
        "y": 1221.9999904632568,
        "wires": [
            [
                "f6fe3ff.d685bc",
                "a3c53db7.6ecef"
            ]
        ]
    },
    {
        "id": "c16959b9.3b2f88",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 1083.666648864746,
        "y": 1174.999984741211,
        "wires": []
    },
    {
        "id": "de49c80e.7e9cb8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot",
        "tls": "",
        "x": 528.6667098999023,
        "y": 1221.666657447815,
        "wires": [
            [
                "d43fd40e.f6f688"
            ]
        ]
    },
    {
        "id": "ebcb0060.d0c45",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "req payload",
        "func": "msg.req_body    = msg.payload ;\nmsg.url         = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot\";\nmsg.method      = \"GET\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 353.8333435058594,
        "y": 1219.9999914169312,
        "wires": [
            [
                "de49c80e.7e9cb8"
            ]
        ]
    },
    {
        "id": "f6fe3ff.d685bc",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 903.8333511352539,
        "y": 1221.666657447815,
        "wires": [
            [
                "c16959b9.3b2f88"
            ],
            [
                "3cee9b9.5180e64",
                "fc3971af.37805",
                "63e81063.c925b",
                "fc62543b.0b0e18",
                "ff7a5484.4e2198",
                "58e60cbd.16c644"
            ]
        ]
    },
    {
        "id": "fc62543b.0b0e18",
        "type": "cloudant out",
        "z": "3d6329c5.e74616",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1103.833641052246,
        "y": 1275.0002355575562,
        "wires": []
    },
    {
        "id": "641e6107.33004",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 1352.5001602172852,
        "y": 1228.3332405090332,
        "wires": []
    },
    {
        "id": "63e81063.c925b",
        "type": "change",
        "z": "3d6329c5.e74616",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1143.500156402588,
        "y": 1227.6666240692139,
        "wires": [
            [
                "641e6107.33004"
            ]
        ]
    },
    {
        "id": "58e60cbd.16c644",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS Response",
        "func": "var body    = msg.req_body;\nmsg.topic   = body.task_name;\nmsg.payload = body.msg;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1119.4999771118164,
        "y": 1397.3335580825806,
        "wires": [
            [
                "a091fbc.6b17008"
            ]
        ]
    },
    {
        "id": "a091fbc.6b17008",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "",
        "x": 1374.5,
        "y": 1386.000286102295,
        "wires": []
    },
    {
        "id": "99bc1237.9be3f",
        "type": "interval",
        "z": "3d6329c5.e74616",
        "name": "interval",
        "interval": "5",
        "onstart": true,
        "msg": "ping",
        "showstatus": true,
        "unit": "minutes",
        "statusformat": "YYYY-MM-D HH:mm:ss",
        "x": 59,
        "y": 245.33334350585938,
        "wires": [
            [
                "8e6d611.60287a"
            ]
        ]
    },
    {
        "id": "16bcd8f4.ee5307",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1249.8333015441895,
        "y": 941.3333835601807,
        "wires": [
            [
                "7be02fcb.91051"
            ]
        ]
    },
    {
        "id": "7de3928.060c96c",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1442.3333587646484,
        "y": 632.3333617448807,
        "wires": [
            [
                "d4ac771a.bb7bc8"
            ]
        ]
    },
    {
        "id": "66784766.de7828",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 555.4998397827148,
        "y": 293.3802833557129,
        "wires": [
            [
                "1fa85edd.011d11",
                "6571c141.cbeed"
            ]
        ]
    },
    {
        "id": "8727d9db.f96218",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Add Details Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1849.8336181640625,
        "y": 990.3333473205566,
        "wires": []
    },
    {
        "id": "3cee9b9.5180e64",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "push",
        "func": "var body    = msg.req_body;\n    userObj = msg.user_obj;\n\nif(isEmpty(userObj)){\n    msg.api_status  = \"API_ERROR\";\n    msg.statusCode  = 400;\n    msg.payload     = {status: 400, msg: \"Unable to get User object via using usernumber:- \" + body.task_name, data: null};\n}else{\n    if(isEmpty(userObj.device_id) || userObj.device_id == \"Web View\"){\n        msg.api_status  = \"API_ERROR\";\n        msg.statusCode  = 400;\n        msg.payload     = {status: 400, msg: \"No Device id to send push notification\", data: null};\n    }else{\n\n        msg.api_status  = \"API_SUCCESS\";\n        msg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\n        //msg.url     = \"http://mastersoftwaretechnologies.com:6005/send_push_notification\";\n        msg.method = \"POST\";\n        \n        msg.payload = {\n            \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n            \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n            \"payload\": {\n        \t\t\"message\": {\n        \t\t\t\"alert\": body.msg\n        \t\t}, \n        \t\t\"target\": {\n        \t\t\t\"deviceIds\": [userObj.device_id]\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"apns\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"page_id\"  : 18,\n        \t\t\t\t\t\"user_page_id\": 18\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"gcm\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"user_page_id\"  : 18,\n        \t\t\t\t\t\"page_id\": 18,\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        };\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1091.8333168029785,
        "y": 1465.333583831787,
        "wires": [
            [
                "6af3c81a.1e5b18"
            ]
        ]
    },
    {
        "id": "6af3c81a.1e5b18",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1225.4999923706055,
        "y": 1464.0002145767212,
        "wires": [
            [
                "b39a89a1.867c48"
            ],
            [
                "2aa9a588.5f2d8a"
            ]
        ]
    },
    {
        "id": "b39a89a1.867c48",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1402.4999923706055,
        "y": 1440.3335580825806,
        "wires": []
    },
    {
        "id": "ff7a5484.4e2198",
        "type": "change",
        "z": "3d6329c5.e74616",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "user_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1146.499984741211,
        "y": 1335.0002422332764,
        "wires": [
            [
                "69bd49d6.aade48"
            ]
        ]
    },
    {
        "id": "69bd49d6.aade48",
        "type": "cloudant out",
        "z": "3d6329c5.e74616",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 1351.5000305175781,
        "y": 1334.6666641235352,
        "wires": []
    },
    {
        "id": "2aa9a588.5f2d8a",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1400.333251953125,
        "y": 1502,
        "wires": [
            [
                "5ac9bef0.4fbd9"
            ]
        ]
    },
    {
        "id": "5ac9bef0.4fbd9",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "MasterBot Respond",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1607.333351135254,
        "y": 1502.0000896453857,
        "wires": []
    },
    {
        "id": "24a6d420.cd09cc",
        "type": "http in",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "url": "/master_table",
        "method": "get",
        "swaggerDoc": "",
        "x": 100.83332824707031,
        "y": 78.66666412353516,
        "wires": [
            [
                "ed8ff2a0.cc8d7"
            ]
        ]
    },
    {
        "id": "ed8ff2a0.cc8d7",
        "type": "cloudant in",
        "z": "5e22f743.a6a0b8",
        "name": "master_table",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_all_",
        "design": "",
        "index": "",
        "x": 307.8333435058594,
        "y": 78.33333587646484,
        "wires": [
            [
                "64fee065.22d7a"
            ]
        ]
    },
    {
        "id": "64fee065.22d7a",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 472.8333435058594,
        "y": 78.66666412353516,
        "wires": []
    },
    {
        "id": "5c862abb.63fc04",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    phone   = msg.req_body.phone,\n    userObj = msg.userObj,\n    payload = msg.payload;\n\nif(isEmpty(payload.rows)){\n    node.warn(\"comes when Cloudant db doesn't return response\");\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to populate view to process_timeout\", data: null};\n}else{\n    var db_records      = populate_records(payload.rows),\n        stumped_task    = populate_stumped_task(db_records.task_table, \"StumpedTask\"),\n        timeout_obj     = populate_obj(db_records.timeout, stumped_task.timeout_id), //static timeout_obj for ReminderBot company\n        details         = populate_details(db_records.groups, timeout_obj);\n\n    msg.save_msg_detail = save_detail_for_user(textMsg, userObj);\n    msg.details_arr     = details;\n    msg.timeout_obj     = timeout_obj;\n}\n\nnode.warn(msg);\nreturn msg;\n\nfunction populate_stumped_task(task_tables, task_name){\n    var task_table = {};\n    if(isEmpty(task_tables)) return task_table;\n    if(isEmpty(task_name)) return task_name ;\n    \n    for(var itr in task_tables){\n        if(task_tables[itr].task_name == task_name){\n            task_table = task_tables[itr];\n        }\n    }\n    \n    return task_table;\n}\n\nfunction populate_records(list){\n    var timeout = [], users = [], groups = [], details = [], task_table = [];\n    for(var itr in list){ \n        \n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"task_table\"){\n            task_table.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {groups: groups, timeout: timeout, users: users, details:details, task_table:task_table};\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_details(list, timeout){\n    var details = [];\n    \n    if(isEmpty(list)) return [];\n\n    //original user detail for company\n    var original_to_page_id = new Date().getTime() + 600;\n    var original_detail     = create_original_detail(original_to_page_id, timeout);\n    details.push(original_detail);\n    \n    return details;\n}\n\nfunction create_original_detail(to_page_id, timeout){\n    var detail_obj = {};\n    \n    detail_obj._id                  = randomString(32);\n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"26\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 26; //Company stumped category page_id\n    detail_obj.from_page_id                     = 2;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\",\n        \"company_bot_detail\": \"company_bot_detail\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : (userObj.firstname + userObj.lastname ) || phone\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n    detail_obj.myTimeout                        = timeout;\n    \n    msg.company_detail = detail_obj;\n    return detail_obj;\n}\n\nfunction save_detail_for_user(msg, userObj){\n    var detail_obj = {};\n    detail_obj._id                  = randomString(32);\n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"18_0\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = null; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 18; //Company stumped category page_id\n    detail_obj.from_page_id                     = 5;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : msg\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n\n    return [detail_obj];\n}\n\nfunction populate_assistants(users, group_id){\n    var list = [];\n    \n    if(isEmpty(users)) return list;\n    if(isEmpty(group_id)) return list;\n    \n    for(var itr in users){\n        if(users[itr].data){\n            if(group_id in users[itr].data.groups){\n                list.push(users[itr]);\n            }\n        }\n    }\n    return list;\n}\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1142.9999237060547,
        "y": 695.6667147874832,
        "wires": [
            [
                "9f2187e2.4a3308"
            ]
        ]
    },
    {
        "id": "9f2187e2.4a3308",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Optional Task",
        "func": "var details     = JSON.parse(JSON.stringify(msg.details_arr)),\n    userObj     = msg.userObj,\n    new_tasks   = [];\n\nfor(var itr in details){\n    var obj = {\n        \"_id\": randomString(32),\n        \"table\": \"task_table\",\n        \"user_id\": details[itr].user_id,\n        \"task_name\": details[itr].user_incoming.message, \n        \"page_id\": details[itr].to_page_id,\n        \"from_page_id\": details[itr].page_id,\n        \"parent_id\": details[itr].task_id,\n        \"header_template_id\": \"99_h\",\n        \"detail_template_id\": \"99_d\",\n        \"footer_template_id\": \"99_f\",\n        \"timeout_id\": details[itr].myTimeout,\n        \"location_ids\": {},\n        \"child_default_task_id\": null,\n        \"child_default_task_name\": null,\n        \"date_created\": new Date().toJSON(),\n        \"category\": \"stumped\",\n        \"status\": \"true\",\n        \"additional_data_fn\": null,\n        \"optional_data\": {},\n        \"required_data\": {},\n        \"offline_expiration_time\": 0,\n        \"display_if_empty\": \"true\",\n        \n        \"type\": details[itr].type,\n        \"image\": \"\"\n    };\n    new_tasks.push(obj);\n}\n\nmsg.task_arr = new_tasks;\n\nvar textMsg = msg.req_body.body;\nmsg.method = \"POST\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot\";\nmsg.payload= {\n    text : textMsg,\n    context : {\n        first_name: userObj.firstname || \"Anynomous\",\n        last_name : userObj.lastname  || \"User\",\n        phone     : userObj.phone     || \"\",\n        timeStamp : new Date().getTime()\n    }\n};\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1341.9999351501465,
        "y": 695.6667100191116,
        "wires": [
            [
                "7de3928.060c96c"
            ]
        ]
    },
    {
        "id": "64ace391.712f7c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response ,\n    userObj     = msg.userObj ,\n    task_obj    = isEmpty(msg.task_arr) ? {} :  msg.task_arr[0] , \n    new_details = [],\n    req_body    = msg.req_body;\n\nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        //\"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 10000\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar watson_res      = populate_watson_response(chatbot, userObj),\n    company_detail  = populate_company_detail();\n    \nmsg.save_msg_detail.push(watson_res);\nnew_details.push(company_detail);\nnew_details.push(userObj); //save Watson context ;\n\nmsg.new_details = new_details;\nmsg.payload = {\n    docs: flatten([msg.details_arr, msg.task_arr, msg.new_details, msg.save_msg_detail])\n};\nnode.warn(msg);\nreturn msg;\n\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_obj._id]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 2000\n    }; \n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        //\"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };\n    return obj;\n}\n\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1804.6667709350586,
        "y": 714.6666688919067,
        "wires": [
            [
                "e931b792.3d5468",
                "4ace20dd.cf936",
                "be55a6f1.a5d078"
            ]
        ]
    },
    {
        "id": "ff8a9c57.06bd3",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2952.500030517578,
        "y": 801.3334113359451,
        "wires": []
    },
    {
        "id": "a547a40.832546",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3191.500057220459,
        "y": 841.3334141969681,
        "wires": []
    },
    {
        "id": "c824032e.2a235",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "update_message_schedule",
        "func": "var payload_data = msg.payload_data;\nif(payload_data.type == \"old_message\"){\n    msg.process_type = \"update_schedule\";\n    msg.payload = {\n        query : \"table:details AND _id:\" + payload_data.detail_id ,\n        sort  : \"_id<string>\"\n    };    \n}else{\n    msg.process_type = \"new_schedule\";\n    msg.payload = {\n        query : \"table:users\" ,\n        sort  : \"_id<string>\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1319.4999771118164,
        "y": 2009.00022315979,
        "wires": [
            [
                "a7fd174.0853de8",
                "40594293.4be51c"
            ]
        ]
    },
    {
        "id": "b0135d4.f3d16a",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1670.5,
        "y": 2055.667236328125,
        "wires": [
            [
                "d6ff2c3a.a1085"
            ]
        ]
    },
    {
        "id": "d6ff2c3a.a1085",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "payload",
        "func": "var payload_data = msg.payload_data;\n    scheduled_date = populate_scheduled_time(payload_data);\n    \nif(isEmpty(msg.payload)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400 ;\n    msg.payload    = {status: 400, msg: \"Unable to find details for this msg\", data: null};\n}else{\n    msg.api_status = \"API_SUCCESS\";\n    var detail_obj = msg.payload[0];\n    \n    if(isEmpty(detail_obj.user_incoming)){\n        msg.api_status = \"API_ERROR\";\n        msg.statusCode = 400 ;\n        msg.payload    = {status: 400, msg: \"Unable to udpate details msg\", data: null};\n    }else{\n        msg.api_status = \"API_SUCCESS\";\n        detail_obj.user_incoming.message = payload_data.message ;\n        detail_obj.processed = 0 ;\n        detail_obj.status = 1 ;\n        detail_obj.due_date = scheduled_date;\n        msg.payload = detail_obj;\n        \n        msg.api_response = {status:200, msg: \"Record updated successfully\", data: detail_obj};\n    }\n\n}\nreturn msg;\n\nfunction populate_scheduled_time(data){\n    var moment   = global.get('moment'),\n    momentTz = global.get('moment_tz');\n    \n    if(isEmpty(data.timzone)){\n\t\tdata.timzone = \"America/New_York\";\n\t}else{\n\t\tdata.timzone = sechduleData.timzone;\n\t}\n\treturn moment().tz(data.timzone).valueOf();\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1833.5000686645508,
        "y": 2055.3336791992188,
        "wires": [
            [
                "988833b0.368ff"
            ]
        ]
    },
    {
        "id": "988833b0.368ff",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1982.5001907348633,
        "y": 2063.666990876198,
        "wires": [
            [
                "37e6fcd7.017834"
            ],
            [
                "5edbfee3.b5d97",
                "23827a59.dcaa56"
            ]
        ]
    },
    {
        "id": "5edbfee3.b5d97",
        "type": "cloudant out",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 2173.8333702087402,
        "y": 2059.0002059936523,
        "wires": []
    },
    {
        "id": "23827a59.dcaa56",
        "type": "change",
        "z": "1bc13036.e3b82",
        "name": "response",
        "rules": [
            {
                "t": "move",
                "p": "api_response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2164.8333740234375,
        "y": 2108.3337059020996,
        "wires": [
            [
                "a9c5c175.260f9"
            ]
        ]
    },
    {
        "id": "a9c5c175.260f9",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2322.8334522247314,
        "y": 2105.666812300682,
        "wires": []
    },
    {
        "id": "8dd5267c.aabde8",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "logger 1",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1406.1668167114258,
        "y": 634.6667013168335,
        "wires": []
    },
    {
        "id": "b4d044f3.6326c8",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3539.167713165283,
        "y": 486.66691541671753,
        "wires": []
    },
    {
        "id": "671b04ed.68853c",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "update_my_user_task",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2615.9995307922363,
        "y": 510.333215713501,
        "wires": [
            [
                "57b704e4.9102ec",
                "6acadba6.de4814"
            ],
            [
                "6acadba6.de4814"
            ]
        ]
    },
    {
        "id": "57b704e4.9102ec",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "insert user_task",
        "func": "msg.payload = msg.updated_user_task;\nnode.warn(\"msg.payload >>>>>>>>>>>>>\");\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2806.8327140808105,
        "y": 451.66645908355713,
        "wires": [
            [
                "9a79a4a4.a862d8"
            ]
        ]
    },
    {
        "id": "9a79a4a4.a862d8",
        "type": "cloudant out",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "payonly": true,
        "operation": "insert",
        "x": 3007.9988975524902,
        "y": 450.3331661224365,
        "wires": []
    },
    {
        "id": "d3cbca16.a2aee8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2490.5000915527344,
        "y": 492.3333568572998,
        "wires": [
            [
                "f919442b.0f6998"
            ],
            [
                "671b04ed.68853c"
            ]
        ]
    },
    {
        "id": "f919442b.0f6998",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2619.8335762023926,
        "y": 459.00001430511475,
        "wires": []
    },
    {
        "id": "6acadba6.de4814",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "isUpdateUserTasks",
        "property": "isUpdateUserTasks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2822.5008430480957,
        "y": 507.3334140777588,
        "wires": [
            [
                "2e9f2b10.8a15d4"
            ],
            []
        ]
    },
    {
        "id": "2e9f2b10.8a15d4",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3016.501667022705,
        "y": 493.66683530807495,
        "wires": [
            [
                "70475134.b5a74"
            ]
        ]
    },
    {
        "id": "70475134.b5a74",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "payload",
        "func": "var content          = msg.payload_content;\n    users_all_task   = simplfyUserTask(msg.payload);\n\nvar updated_user_task = populate_updated_user_task(content.user_task_list, users_all_task);\n\nif(!isEmpty(updated_user_task)){\n    msg.payload = { \"docs\": updated_user_task };   \n}else{\n    var obj = [];\n    for(var i=0; i<content.user_task_list.length; i++){\n        obj.push({\n            table           : \"user_task\",\n        \ttask_id \t\t: content.user_task_list[i].task_id,\n        \tuser_id\t\t\t: content.user_task_list[i].user_id,\n        \tpage_id         : parseInt(content.user_task_list[i].page_id),\n        \tupdate_read     : 0,\n        \tupdate_active   : 0, \n        \tsynchronized    : 1,\n            status          : 1, \n        \tdate_updated\t: null,\t\n        \tparent_id\t\t: content.user_task_list[i].task_id,\n        \tancestors       : content.user_task_list[i].ancestors, \n        \tcount_status\t: {\n        \t   active       : 1,\n        \t   unread       : 1,\n        \t},\n        \tcount\t\t\t: {\n        \t    active      : 1,\n        \t    unread      : content.user_task_list[i].unread,\n        \t},\n        \tcount_if\t\t: {\n        \t    active      : 1,\n        \t    unread      : 1\n        \t},\n        \ttemplates\t\t: {},\n        \ttimeout\t\t\t: {},\n        \tcreatedAt       : new Date().getTime()\n        });\n    }\n    msg.payload = { \"docs\": obj };   \n}\n\nreturn msg;\n\nfunction simplfyUserTask(user_task){\n    if(isEmpty(user_task)){\n        return [];\n    }else{\n        var d = [], rows = user_task.rows;\n        for(var i=0; i<rows.length; i++){\n            d.push(rows[i].value);\n        }\n        return d;\n    }    \n}\n\nfunction populate_updated_user_task(user_task_list, users_all_task){\n\n    if(!isEmpty(user_task_list) && !isEmpty(user_task_list)){\n        var user_task = [];\n\n        for(var i=0; i<users_all_task.length; i++){\n            for(j=0; j<user_task_list.length; j++){\n                if(\n                    (users_all_task[i].user_id == user_task_list[j].user_id) &&\n                    (users_all_task[i].task_id == user_task_list[j].task_id) &&\n                    (users_all_task[i].page_id == user_task_list[j].page_id)  \n                ){\n                    users_all_task[i].synchronized = 1 ;\n                    users_all_task[i].status       = 1 ;\n                    users_all_task[i].count.unread = user_task_list[j].unread ;\n                    users_all_task[i].date_updated = new Date().getTime();\n                    \n                    //push to new array which is going to update into db.\n                    user_task.push(users_all_task[i]);\n                }\n            }\n        }\n        return user_task ;\n    }else{\n        return null;\n    }\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3176.8347969055176,
        "y": 493.3335223197937,
        "wires": [
            [
                "76e5d666.571e88",
                "c4b54b65.01a2b8"
            ]
        ]
    },
    {
        "id": "c4b54b65.01a2b8",
        "type": "http request",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 3356.168918609619,
        "y": 488.00023889541626,
        "wires": [
            [
                "b4d044f3.6326c8"
            ]
        ]
    },
    {
        "id": "76e5d666.571e88",
        "type": "debug",
        "z": "5e22f743.a6a0b8",
        "name": "bulk payload",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3333.1678352355957,
        "y": 434.00005865097046,
        "wires": []
    },
    {
        "id": "f2514518.886918",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2646.666748046875,
        "y": 550.6667566299438,
        "wires": []
    },
    {
        "id": "d1930383.32eaa",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "response",
        "func": "msg.payload = msg.api_response;\n\nnode.warn(\"final response >>>>\");\nnode.warn(new Date());\nnode.warn(new Date().getTime());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2502.666084289551,
        "y": 550.3332595825195,
        "wires": [
            [
                "f2514518.886918"
            ]
        ]
    },
    {
        "id": "a7fd174.0853de8",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "process_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update_schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "new_schedule",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1508,
        "y": 2055,
        "wires": [
            [
                "b0135d4.f3d16a"
            ],
            [
                "44918d37.8418e4"
            ]
        ]
    },
    {
        "id": "476d402f.1ea1b",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload         = msg.payload_data,\n    users           = msg.payload,\n    company_bot     = populate_company(msg.access_token, users),\n    user_obj        = populate_user(payload, users),\n    scheduled_time  = populate_scheduled_time(payload),\n    company_screen  = populate_company_data(payload),\n    user_screen     = populate_user_data(payload),\n    final_result    = [] ;\n    \n    \nfinal_result.push(company_screen);\nfinal_result.push(user_screen);\nmsg.user_obj = user_obj;\nmsg.payload = {\n    \"docs\": final_result\n};\nmsg.response = {\n    company_detail : company_screen,\n    user_detail : user_screen\n};\nreturn msg;\n\nfunction populate_company(access_token, list){\n    var obj = {};\n    \n    if(isEmpty(access_token)) return obj;\n    if(isEmpty(list))return obj;\n    \n    for(var itr in list){\n        if(list[itr].access_token == access_token){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user(task_obj, list){\n    var obj= {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(task_obj)) return obj;\n    \n    for(var itr in list){\n        if(Number(list[itr].virtual_phone) == Number(task_obj.task_name)){\n            obj = list[itr];\n        }\n    }\n    return obj;\n}\n\nfunction populate_company_data(data){\n    var name = company_bot.firstname + \" \" + company_bot.lastname;\n    return {\n        \"table\": \"details\",\n        \"task_id\": [data.task_id],\n        \"child_task_id\": null,\n        \"user_id\": user_obj._id ,\n        \"from_user_id\": {\n            \"user_id\": company_bot._id, \n            \"first_name\": company_bot.firstname,\n            \"lastname\" : company_bot.lastname,\n            \"phone\": company_bot.phone\n        },\n        \"page_id\": data.page_id,\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 1,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"date_created\": new Date().toJSON(),\n        \"due_date\": scheduled_time,\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\" : \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\"   : data,\n            \"message\": data.message,\n            \"watson\" : data.message,\n            \"annotation\": populate_Char(name.split(\" \"))\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {\n            \"active\": 1,\n            \"unread\": 0\n          },\n        \"count\": {\n            \"active\": 1,\n            \"unread\": 1\n        },\n        \"count_if\": {\n            \"active\": 1,\n            \"unread\": 0\n        },\n        \"createdAt\": scheduled_time\n    };\n}\n\nfunction populate_user_data(data){\n    return {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"],\n        \"child_task_id\": null,\n        \"user_id\": user_obj._id ,\n        \"from_user_id\": {\n            \"user_id\": user_obj._id, \n            \"first_name\": user_obj.firstname,\n            \"lastname\" : user_obj.lastname,\n            \"phone\": user_obj.virtual_phone\n        },\n        \"page_id\": 18,\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 2,\n        \"status\": 2,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"due_date\": scheduled_time,\n        \"priority\": 1,\n        \"type\": {\n            \"public\" : \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\"   : data,\n            \"message\": data.message,\n            \"watson\" : data.message\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {\n            \"active\": 1,\n            \"unread\": 0\n          },\n        \"count\": {\n            \"active\": 1,\n            \"unread\": 1\n        },\n        \"count_if\": {\n            \"active\": 1,\n            \"unread\": 0\n        },\n        \"createdAt\": scheduled_time\n    };\n}\n\nfunction populate_scheduled_time(data){\n    var moment   = global.get('moment'),\n        momentTz = global.get('moment_tz');\n    \n    if(isEmpty(data.timzone)){\n\t\tdata.timzone = \"America/New_York\";\n\t}else{\n\t\tdata.timzone = sechduleData.timzone;\n\t}\n\t\n\treturn moment(data.sechduleDate).tz(data.timzone).valueOf(); \n}\n\n\nfunction populate_Char(arr){\n  var str = \"\";\n  for(var itr in arr){\n    if(arr[itr]){\n      str += arr[itr].substr(0,1);\n    }\n  }\n  return \"..(\" + str + \")\";\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1854.0000267028809,
        "y": 2138.000047683716,
        "wires": [
            [
                "4897f233.34073c",
                "c6a3d659.c945f8",
                "db57422a.801b7"
            ]
        ]
    },
    {
        "id": "44918d37.8418e4",
        "type": "cloudant in",
        "z": "1bc13036.e3b82",
        "name": "",
        "cloudant": "",
        "database": "master_table",
        "service": "dev-platform-cloudantNoSQLDB",
        "search": "_idx_",
        "design": "filterBy",
        "index": "filterBy",
        "x": 1670.5000114440918,
        "y": 2104.6667098999023,
        "wires": [
            [
                "476d402f.1ea1b"
            ]
        ]
    },
    {
        "id": "c6a3d659.c945f8",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2053.8336143493652,
        "y": 2173.333547592163,
        "wires": [
            [
                "1c3ff683.960139"
            ]
        ]
    },
    {
        "id": "1c3ff683.960139",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "res",
        "func": "msg.payload = {\n    status: 200,\n    msg: \"Message schedule successfully.\",\n    payload: msg.response\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2216.8333435058594,
        "y": 2192.9999771118164,
        "wires": [
            [
                "545dc30f.ba9d4c",
                "dbafcdad.f8fd5"
            ]
        ]
    },
    {
        "id": "545dc30f.ba9d4c",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2358.833637237549,
        "y": 2170.6667976379395,
        "wires": []
    },
    {
        "id": "ff7f2320.a0c9c",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "delete_schedule_message",
        "func": "node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1327.166748046875,
        "y": 2234.0000381469727,
        "wires": [
            [
                "b41f0574.6e0308"
            ]
        ]
    },
    {
        "id": "b41f0574.6e0308",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/get_data_for_chatbot",
        "tls": "",
        "x": 1519.88671875,
        "y": 2292.6796875,
        "wires": [
            [
                "27fc8bf7.5570b4"
            ]
        ]
    },
    {
        "id": "27fc8bf7.5570b4",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "populate_records",
        "func": "var payload     = msg.payload ,\n    db_records  = populate_db_records(payload.rows),\n    req_data    = msg.payload_data ;      \n\n    var company_detail  = populate_company_detail(req_data, db_records.details),\n        user_detail     = populate_user_detail(req_data, db_records.details);\n\nnode.warn(company_detail);\nnode.warn(user_detail);\n\nif(isEmpty(company_detail) && isEmpty(user_detail)){\n    msg.api_status = \"API_ERROR\";\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to delete record\", data: null};\n}else{\n    msg.api_status      = \"API_SUCCESS\";\n    msg.statusCode      = 200;\n    msg.url             = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs\";\n    msg.method          = \"POST\";\n    msg.payload         = {\n        docs : [{\n            \"_id\": company_detail._id,\n            \"_rev\": company_detail._rev,\n            \"_deleted\": true\n        },{\n            \"_id\": user_detail._id,\n            \"_rev\": user_detail._rev,\n            \"_deleted\": true\n        }]  \n    };\n    msg.api_response    = {status: 200, msg: \"Record deleted successfully\", data: null};\n}\nreturn msg;\n\nfunction populate_company_detail(req_data, details){\n    var obj = {};\n    if(isEmpty(req_data)) return obj;\n    if(isEmpty(details)) return obj;\n    \n    for(var itr in details){\n        if(details[itr]._id == req_data.detail_id){\n            obj = details[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_user_detail(req_data, details){\n    var obj = {};\n    if(isEmpty(req_data)) return obj;\n    if(isEmpty(details)) return obj;\n    \n    for(var itr in details){\n        var message     = isEmpty(details[itr].user_incoming) ? null : details[itr].user_incoming.message ,\n            dateStamp   = isEmpty(req_data.sechduleDate) ? new Date().getTime() : new Date(req_data.sechduleDate).getTime();\n            \n        if( (message == req_data.message) && (details[itr].createdAt == dateStamp) ){\n            obj =   details[itr] ;\n        }\n    }\n    return obj;\n}\n\nfunction populate_db_records(list){\n    var details = [], users = [];\n\n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1712.875,
        "y": 2292.23046875,
        "wires": [
            [
                "4adbd246.5c00fc"
            ]
        ]
    },
    {
        "id": "4adbd246.5c00fc",
        "type": "switch",
        "z": "1bc13036.e3b82",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1896.8828430175781,
        "y": 2432.1681051254272,
        "wires": [
            [
                "2a8dcc2a.cb6f94"
            ],
            [
                "d813c6de.570288"
            ]
        ]
    },
    {
        "id": "2a8dcc2a.cb6f94",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2033.1328430175781,
        "y": 2397.6368551254272,
        "wires": []
    },
    {
        "id": "d813c6de.570288",
        "type": "http request",
        "z": "1bc13036.e3b82",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2055.1291999816895,
        "y": 2467.6763162612915,
        "wires": [
            [
                "c1ad7c92.e5232"
            ]
        ]
    },
    {
        "id": "c1ad7c92.e5232",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "res",
        "func": "if(msg.payload.error) {\n    msg.payload = {status: msg.statusCode, msg: \"Unable to delete record.\", data:null};\n}else{\n    msg.payload = msg.api_response;    \n}\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2211.140655517578,
        "y": 2468.9845113754272,
        "wires": [
            [
                "9f98da26.8d8f88"
            ]
        ]
    },
    {
        "id": "9f98da26.8d8f88",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2346.140655517578,
        "y": 2468.3985738754272,
        "wires": []
    },
    {
        "id": "aee26cf5.06819",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 1533.833885192871,
        "y": 494.66678047180176,
        "wires": []
    },
    {
        "id": "2bd3da91.104616",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1397.833641052246,
        "y": 529.0001544952393,
        "wires": [
            [
                "aee26cf5.06819"
            ],
            [
                "448d2c48.319d14"
            ]
        ]
    },
    {
        "id": "9caf7b90.abc7a8",
        "type": "http response",
        "z": "5aaca332.83ed4c",
        "name": "response",
        "x": 694.125,
        "y": 1036.8984375,
        "wires": []
    },
    {
        "id": "5e8713e4.0cfe9c",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "Watson",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 979.8334732055664,
        "y": 2183.000615119934,
        "wires": [
            [
                "53e2b3bc.affa2c"
            ]
        ]
    },
    {
        "id": "53e2b3bc.affa2c",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload , //should be IBM Watson node response\n    req_body    = msg.req_body;\n    \n    //payload.daata = \"\";\n    if(isEmpty(payload.data)){\n        //send dummy response to user and store details to details table\n        msg.topic   = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\";        \n    }else{\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n    }\nmsg.userObj.data[\"fa1785333117ba7c06b9020a6d3c0079\"] = {\n    \"context\": payload.context\n};\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1189.6668548583984,
        "y": 2181.0007667541504,
        "wires": [
            [
                "fae5c3ca.98c73",
                "7220db5.8a69624",
                "5e04480a.49bff8",
                "b8c6b27f.3f3fc"
            ]
        ]
    },
    {
        "id": "b8c6b27f.3f3fc",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1438.6672401428223,
        "y": 2155.666834831238,
        "wires": []
    },
    {
        "id": "5e04480a.49bff8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response,\n    req_body    = msg.req_body,\n    task_obj    = msg.task_obj,\n    new_details = [],\n    userObj     = msg.userObj;\n\n\nmsg.timeout_obj   = task_obj.timeout_id;\nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 10000\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar company_detail  = populate_company_detail() ,\n    watson_res  = populate_watson_response(chatbot, userObj), //show watson response under sms user\n    user_data   = populate_user_data(req_body, userObj); //to show detail under sms user\n    \nnew_details.push(company_detail);\nnew_details.push(watson_res);\nnew_details.push(user_data);\nnew_details.push(userObj); //save Watson context ;\n\nmsg.payload = {\n    docs: new_details\n};\n\nnode.warn(msg);\nreturn msg;\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\", task_obj._id], //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 2000\n    };    \n    \n    msg.user_page  = obj ;\n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };\n\n    msg.company_detail  = obj ;\n    return obj;\n}\n\nfunction populate_user_data(req_body, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": [\"18_0\"], //under masterbot user sub_category task_id\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 5,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body\n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()  \n        \n    };   \n    return obj;\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1442.333381652832,
        "y": 2199.0004484057426,
        "wires": [
            [
                "2166b118.bdcd3e",
                "a4cb71d.a38c09"
            ]
        ]
    },
    {
        "id": "a4cb71d.a38c09",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 1652.3335981369019,
        "y": 2198.3340606689453,
        "wires": [
            [
                "e7b5fa49.6aa3b8"
            ]
        ]
    },
    {
        "id": "e7b5fa49.6aa3b8",
        "type": "delay",
        "z": "3d6329c5.e74616",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1870.333215713501,
        "y": 2192.6669723391533,
        "wires": [
            [
                "347e0e7e.7dd812"
            ]
        ]
    },
    {
        "id": "27fad3ad.160d6c",
        "type": "inject",
        "z": "3d6329c5.e74616",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 1878.333095550537,
        "y": 2244.0000650286674,
        "wires": [
            [
                "347e0e7e.7dd812"
            ]
        ]
    },
    {
        "id": "347e0e7e.7dd812",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2072.3331298828125,
        "y": 2212.666955947876,
        "wires": [
            [
                "c58aada1.8deaf"
            ]
        ]
    },
    {
        "id": "c58aada1.8deaf",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n            \n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                }\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2276.999870300293,
        "y": 2212.3335971832275,
        "wires": [
            [
                "5df75b8.0edeaa4",
                "c0e0a501.277298"
            ]
        ]
    },
    {
        "id": "5df75b8.0edeaa4",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2485.333351135254,
        "y": 2203.000256538391,
        "wires": []
    },
    {
        "id": "c0e0a501.277298",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2483.6667823791504,
        "y": 2146.3336849212646,
        "wires": [
            [
                "25500915.cbc8c6",
                "580d89d4.db66d8"
            ]
        ]
    },
    {
        "id": "580d89d4.db66d8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2644.999855041504,
        "y": 2120.3335285186768,
        "wires": [
            [
                "a4819850.c1e7e8"
            ]
        ]
    },
    {
        "id": "25500915.cbc8c6",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = populate_device_ids(responder_group.push);\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = populate_phone_numbers(responder_group.sms);\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = populate_email_address(responder_group.email);\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = populate_apps(responder_group.app);\n    }\n}\n\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = user_calculate.delivery_user_special;\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = user_calculate.delivery_user_special;\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2650.000831604004,
        "y": 2165.33353805542,
        "wires": [
            [
                "eff680bf.9773a",
                "1aec3659.51969a"
            ]
        ]
    },
    {
        "id": "1aec3659.51969a",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 2822.6668434143066,
        "y": 2164.333493232727,
        "wires": [
            [
                "4d859fcc.7babc"
            ],
            [
                "904e1def.e30d6"
            ],
            [
                "d032d2aa.1c223"
            ],
            [
                "28d9dc45.6ba424"
            ]
        ]
    },
    {
        "id": "a4819850.c1e7e8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "req logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 2819.833450317383,
        "y": 2051.3337349891663,
        "wires": []
    },
    {
        "id": "eff680bf.9773a",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2813.8334465026855,
        "y": 2237.0002942085266,
        "wires": []
    },
    {
        "id": "28d9dc45.6ba424",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3048.6668701171875,
        "y": 2310.3335127830505,
        "wires": [
            []
        ]
    },
    {
        "id": "d032d2aa.1c223",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3047.6668701171875,
        "y": 2222.333507537842,
        "wires": [
            []
        ]
    },
    {
        "id": "904e1def.e30d6",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3048.6668701171875,
        "y": 2145.3335037231445,
        "wires": [
            [
                "26f2b7d1.b244c8"
            ]
        ]
    },
    {
        "id": "fc24e85f.ee7958",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3317.500213623047,
        "y": 2102.6668367385864,
        "wires": [
            [
                "26f2b7d1.b244c8"
            ]
        ]
    },
    {
        "id": "26f2b7d1.b244c8",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3237.500213623047,
        "y": 2181.6668367385864,
        "wires": [
            [
                "d770ab74.2fb318"
            ],
            []
        ]
    },
    {
        "id": "d756a920.ed9018",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3618.0001220703125,
        "y": 2173.666829109192,
        "wires": []
    },
    {
        "id": "f7221e98.ba486",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3596.8334579467773,
        "y": 2125.0001935958862,
        "wires": []
    },
    {
        "id": "d770ab74.2fb318",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "payload",
        "func": "msg.topic   = msg.payload[msg.counter];\nmsg.payload = \"There is a new message under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3405.500930786133,
        "y": 2175.666844367981,
        "wires": [
            [
                "fc24e85f.ee7958",
                "d756a920.ed9018",
                "f7221e98.ba486"
            ]
        ]
    },
    {
        "id": "b45bb684.5815c8",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 1638.000400543213,
        "y": 2250.0005168914795,
        "wires": []
    },
    {
        "id": "fae5c3ca.98c73",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1461.000400543213,
        "y": 2251.1958293914795,
        "wires": [
            [
                "b45bb684.5815c8"
            ]
        ]
    },
    {
        "id": "ae0dfa99.0439b8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "Cloudant",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/timeout_processing_data",
        "tls": "",
        "x": 979.0314178466797,
        "y": 1803.046833872795,
        "wires": [
            [
                "2c6d08b3.68c588"
            ]
        ]
    },
    {
        "id": "45055018.8c78",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "parseChatBotResponse",
        "func": "var payload     = msg.payload ,\n    req_body    = msg.req_body;\n    \n    //payload.data = null ; //for the being all the IBM Watson messages are stumped.\n    if(isEmpty(payload.data)){\n        //send sms to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = \"Please wait…\" ;\n        msg.adminData = {topic: 12145644732, body: payload.data};\n    }else{\n        //send dummy response to user and store details to details table\n        msg.topic = req_body.phone || 12145644732;\n        msg.payload = payload.data;\n        msg.adminData = {topic: 12145644732, body: msg.payload};\n    }\nmsg.userObj.data[\"fa1785333117ba7c06b9020a6d3c0079\"] = {\n    \"context\": payload.context \n};\n\nmsg.chatbot_response = payload;\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1617.1980514526367,
        "y": 1799.3801678419113,
        "wires": [
            [
                "beafe898.806f28",
                "9794e52c.77be38",
                "8525252d.dc0b48"
            ]
        ]
    },
    {
        "id": "a9cbdddc.23b18",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2068.698799133301,
        "y": 1645.0472927093506,
        "wires": [
            [
                "ca693b9a.1416e8"
            ]
        ]
    },
    {
        "id": "9794e52c.77be38",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1846.198112487793,
        "y": 1676.380226135254,
        "wires": []
    },
    {
        "id": "a5353a8b.2ec008",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Step 2 timeout processing",
        "func": "var payload     = msg.payload ;\n    db_records  = populate_records(payload.rows);\n\nmsg.isDetailProcessed = false;\n\n    if(isEmpty(db_records)){\n        msg.payload = \"Unable to populate records via using cloudant db.\";\n    }else{\n        var details = db_records.details,\n            users   = db_records.users;\n            \n        var processed_details = process_details_with_timeout(details);\n        if(!isEmpty(processed_details)){\n            msg.isDetailProcessed = true;\n            msg.payload = {\n                docs: processed_details\n            } ;\n        }else{\n            msg.payload = \"There is not details to processed.\";\n        }\n    }\nreturn msg;\n\nfunction process_details_with_timeout(details){\n    var updated_details = [];\n    if(isEmpty(details)) return updated_details;\n    \n    for(var itr in details){\n        if( !isEmpty(details[itr].timeout) && (details[itr].processed === 0) ){\n            var newDetailObj = JSON.parse(JSON.stringify(details[itr]));\n\n            //check If added detail delivery_due_date is a past date or not ?\n            if(checkPastDeliveryDue(details[itr].due_date)){\n\n                if(\"company_bot_detail\" in details[itr].type){\n                    var company_timeout = JSON.parse(JSON.stringify(newDetailObj.timeout)),\n                        temp_obj        = JSON.parse(JSON.stringify(company_timeout));\n                    \n                    for(var loop in company_timeout){\n                        var ctimeoutObj     = company_timeout[loop];\n                        var cgroupUsers     = populate_group_users(ctimeoutObj.delivery_user_types);\n                        \n                        temp_obj[loop].delivery_user_ids        = populate_delivery_ids(cgroupUsers);\n                        temp_obj[loop].delivery_user_special    = cgroupUsers ;\n                        temp_obj[loop].message_id               = details[itr]._id;\n                        temp_obj[loop].from_user_id             = details[itr].user_incoming.note;\n                    }\n                    newDetailObj.processed      = 1;\n                    newDetailObj.status         = 2; //2 refres to complete\n                    newDetailObj.category       = \"message\";\n                    newDetailObj.user_calculate = temp_obj;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }else{\n                \n                    var timeoutObj   = details[itr].timeout,\n                        groupUsers   = populate_group_users(timeoutObj.delivery_user_types);\n                    \n                    newDetailObj.processed                      = 1;\n                    newDetailObj.status                         = 2;\n                    newDetailObj.category                       = \"message\";\n                    newDetailObj.timeout.delivery_user_ids      = populate_delivery_ids(groupUsers) ;\n                    newDetailObj.timeout.delivery_user_special  = groupUsers;\n                    newDetailObj.timeout.message_id             = details[itr]._id;\n                    newDetailObj.timeout.from_user_id           = details[itr].user_incoming.note;\n    \n                    newDetailObj.user_calculate = newDetailObj.timeout;\n                    newDetailObj.timeout        = {};\n                    updated_details.push(newDetailObj);\n                }\n            }\n            \n            if(checkFutureDeliveryDue(details[itr].due_date)){\n                node.warn(\"comes in when record is future one\")\n                //if(newDetailObj.status === 0) {\n                    newDetailObj.status = 1;\n                    updated_details.push(newDetailObj);\n                //}\n            }\n        }\n    }\n    \n    return updated_details;\n}\n\nfunction populate_group_users(list){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(itr !== \"public\"){\n            obj = populate_user(itr);\n        }\n    }\n    return obj;\n}\n\nfunction populate_delivery_ids(groupUsers){\n    var obj ={};\n    for(var itr in groupUsers){\n        obj[itr] = itr;\n    }\n    return obj;\n}\n\nfunction populate_user(group_id){\n    var obj = {};\n    if(isEmpty(users)) return obj;\n    \n    for(var counter in users){\n        if(users[counter].data){\n            if(!isEmpty(users[counter].data.groups)){\n                if(group_id in users[counter].data.groups){\n                    obj[users[counter]._id] = {    \n                        user_id   : users[counter]._id,\n                        firstname : users[counter].firstname ? users[counter].firstname : \"\",\n                        lastname  : users[counter].lastname ? users[counter].lastname : \"\",\n                        email     : users[counter].email ? users[counter].email : \"\",\n                        device_id : users[counter].device_id ? users[counter].device_id : \"\",\n                        phone     : users[counter].virtual_phone  \n                    };\n                }\n            }\n        }\n    }\n    return obj;\n}\n\nfunction checkPastDeliveryDue(due_date){\n    var current_date = new Date().getTime();\n    //return true;\n    //return (due_date > new Date()) ; //120000 is default which is 120 sec or 2 minutes \n    return current_date > due_date ; //confirms the past_due records not the future one records\n}\n\nfunction checkFutureDeliveryDue(due_date){\n    var current_data = new Date().getTime();\n    return (due_date > current_data);\n}\n\nfunction populate_records(list){\n    var details = [], users = [];\n    if(isEmpty(list)) return {};\n    \n    for(var itr in list){\n        if(list[itr].value.table == \"details\"){\n            details.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n    }\n    \n    return {details: details, users: users};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2445.032190322876,
        "y": 1780.0469589233398,
        "wires": [
            [
                "a7983b5c.fdd3b8",
                "5b3f4ff0.f743c"
            ]
        ]
    },
    {
        "id": "601c9802.435db8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_view/add_detail_to_task",
        "tls": "",
        "x": 2246.69815826416,
        "y": 1697.7136392593384,
        "wires": [
            [
                "a5353a8b.2ec008"
            ]
        ]
    },
    {
        "id": "546846cf.3f3da8",
        "type": "inject",
        "z": "3d6329c5.e74616",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 2054.0321350097656,
        "y": 1731.7137994766235,
        "wires": [
            [
                "601c9802.435db8"
            ]
        ]
    },
    {
        "id": "a7983b5c.fdd3b8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2668.6981887817383,
        "y": 1852.0469408035278,
        "wires": []
    },
    {
        "id": "5b3f4ff0.f743c",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isDetailProcessed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2670.0315170288086,
        "y": 1733.3802690505981,
        "wires": [
            [
                "1a6bd6de.e7af69",
                "ab04d5a0.6465d8"
            ]
        ]
    },
    {
        "id": "ab04d5a0.6465d8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_bulk_docs",
        "tls": "",
        "x": 2828.365104675293,
        "y": 1758.3802680969238,
        "wires": [
            [
                "30a9dc47.6ec134"
            ]
        ]
    },
    {
        "id": "1a6bd6de.e7af69",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "notification",
        "func": "var payload         = msg.payload.docs,\n    responder_group = populate_group(payload);\n\nif(isEmpty(responder_group)){\n    msg.type        = \"NONE\";\n    msg.payload     = \"No need to send any kind of notification\";\n}else{\n    if(!isEmpty(responder_group.push)){\n        msg.type    = \"PUSH\";\n        msg.payload = {\n            push: populate_device_ids(responder_group.push.users),\n            msg : responder_group.push.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.sms)){\n        msg.type   = \"SMS\";\n        msg.payload = {\n            sms : populate_phone_numbers(responder_group.sms.users),\n            msg : responder_group.sms.msg\n        };\n    }\n    \n    if(!isEmpty(responder_group.email)){\n        msg.type    = \"EMAIL\";\n        msg.payload = {\n            email: populate_email_address(responder_group.email.users),\n            msg : responder_group.email.msg\n            \n        };\n    }\n    \n    if(!isEmpty(responder_group.app)){\n        msg.type    = \"APP\";\n        msg.payload = {\n            app: populate_apps(responder_group.app.users),\n            msg : responder_group.app.msg\n        };\n    }\n}\n\nnode.warn(\"notification >>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction populate_device_ids(users){\n    var device_ids = [];\n    if(isEmpty(users))  return device_ids;\n    \n    for(var itr in users){\n        if(\n            (users[itr].device_id !== \"Web View\") && !(isEmpty(users[itr].device_id)) \n        ){\n            device_ids.push(users[itr].device_id);\n        }\n    }\n    return device_ids;\n}\n\nfunction populate_phone_numbers(users){\n    var numbers = [];\n    if(isEmpty(users))  return numbers;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].phone)) && (users[itr].phone.toString().length > 5) ){\n            numbers.push(Number(users[itr].phone));\n        }\n    }\n    return numbers;\n}\n\nfunction populate_email_address(users){\n    var email_address = [];\n    if(isEmpty(users))  return email_address;\n    \n    for(var itr in users){\n        if( !(isEmpty(users[itr].email))  ){\n            email_address.push(users[itr].email);\n        }\n    }\n    return email_address;\n}\n\nfunction populate_apps(users){\n    return users;\n}\n\nfunction populate_group(list){\n    var push_notification = {}, sms_notification = {}, email_notification = {}, app_notification ={};\n    if(isEmpty(list)) return obj;\n    \n    for(var itr in list){\n        if(!(\"company_bot_detail\" in list[itr].type)){\n            if(!isEmpty(list[itr].user_calculate)){\n                var user_calculate = list[itr].user_calculate;\n                if(user_calculate.delivery_via == \"sms\"){\n                    sms_notification = {\n                        users: user_calculate.delivery_user_special ,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"push\"){\n                    push_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"email\"){\n                    email_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n                \n                if(user_calculate.delivery_via == \"app\"){\n                    app_notification = {\n                        users: user_calculate.delivery_user_special,\n                        msg  : list[itr].user_incoming.message\n                    };\n                }\n            }\n        }\n    }\n    return {push: push_notification, sms:sms_notification, email:email_notification, app:app_notification};\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2839.365104675293,
        "y": 1716.046851158142,
        "wires": [
            [
                "9bdc65a0.bd0088"
            ]
        ]
    },
    {
        "id": "9bdc65a0.bd0088",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EMAIL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 5,
        "x": 3017.365104675293,
        "y": 1714.046856880188,
        "wires": [
            [
                "4754047c.d26bec"
            ],
            [
                "620c8dc6.7a7e94"
            ],
            [
                "55b45bf1.bcb084"
            ],
            [
                "eced5809.cde2b8"
            ],
            [
                "327be42c.64289c"
            ]
        ]
    },
    {
        "id": "620c8dc6.7a7e94",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "SMS",
        "func": "msg.phone_array_length = msg.payload.sms.length;\nmsg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3274.365421295166,
        "y": 1667.0469131469727,
        "wires": [
            [
                "c3fe0a67.817da8"
            ]
        ]
    },
    {
        "id": "55b45bf1.bcb084",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "EMAIL",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3271.3654747009277,
        "y": 1726.0469369888306,
        "wires": [
            []
        ]
    },
    {
        "id": "eced5809.cde2b8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "APP",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3272.3654747009277,
        "y": 1774.0469398498535,
        "wires": [
            []
        ]
    },
    {
        "id": "c3fe0a67.817da8",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "phone_array_length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 3463.1987648010254,
        "y": 1703.3802461624146,
        "wires": [
            [
                "a59d65a6.37f678"
            ],
            []
        ]
    },
    {
        "id": "a59d65a6.37f678",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "payload",
        "func": "msg.topic   = msg.payload.sms[msg.counter];\nmsg.payload = \"There is a new message `\"+  msg.payload.msg +\"`under ReminderBot company. Please check it once. Thanks!!!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3631.1994819641113,
        "y": 1697.380253791809,
        "wires": [
            [
                "9abc05b.07df4f8",
                "e896ded5.0b8d",
                "6159b3fd.f856ec"
            ]
        ]
    },
    {
        "id": "9abc05b.07df4f8",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "counter",
        "func": "msg.counter++;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3543.1987648010254,
        "y": 1624.3802461624146,
        "wires": [
            [
                "c3fe0a67.817da8"
            ]
        ]
    },
    {
        "id": "6159b3fd.f856ec",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Send to Assistants",
        "x": 3843.698673248291,
        "y": 1695.38023853302,
        "wires": []
    },
    {
        "id": "e896ded5.0b8d",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "SMS Logger",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 3822.532009124756,
        "y": 1646.7136030197144,
        "wires": []
    },
    {
        "id": "12b1f84c.488b18",
        "type": "delay",
        "z": "3d6329c5.e74616",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2053.698474884033,
        "y": 1690.3803052902222,
        "wires": [
            [
                "601c9802.435db8"
            ]
        ]
    },
    {
        "id": "e4b4d9c5.791088",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "Chatbot",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1500.8647918701172,
        "y": 1736.0468128919601,
        "wires": [
            [
                "45055018.8c78"
            ]
        ]
    },
    {
        "id": "2c6d08b3.68c588",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "User detail payload",
        "func": "var textMsg = msg.req_body.body,\n    phone   = msg.req_body.phone,\n    userObj = msg.userObj,\n    payload = msg.payload;\n\nif(isEmpty(payload.rows)){\n    node.warn(\"comes when Cloudant db doesn't return response\");\n    msg.statusCode = 400;\n    msg.payload    = {status: 400, msg: \"Unable to populate view to process_timeout\", data: null};\n}else{\n    var db_records = populate_records(payload.rows),\n        timeout_obj= populate_obj(db_records.timeout, \"d33d30da003eb304713c70a0f9a1e228\"), //static timeout_obj for ReminderBot company\n        details    = populate_details(db_records.groups, timeout_obj);\n}\n\nmsg.save_msg_detail = save_detail_for_user(textMsg, userObj);\nmsg.details_arr     = details;\nmsg.timeout_obj     = timeout_obj;\n\nnode.warn(msg);\nreturn msg;\n\nfunction populate_records(list){\n    var timeout = [], users = [], groups = [];\n    for(var itr in list){ \n        if(list[itr].value.table == \"timeout\"){\n            timeout.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"users\"){\n            users.push(list[itr].value);\n        }\n        \n        if(list[itr].value.table == \"group_table\"){\n            groups.push(list[itr].value);\n        }\n    }\n    return {groups: groups, timeout: timeout, users: users};\n}\n\nfunction populate_obj(list, id){\n    var obj = {};\n    if(isEmpty(list)) return obj;\n    if(isEmpty(id)) return obj;\n    for(var itr in list){\n        if(list[itr]._id == id){\n            obj = list[itr];\n        }\n    }\n    \n    return obj;\n}\n\nfunction populate_details(list, timeout){\n    var details = [];\n    \n    if(isEmpty(list)) return [];\n\n    /**\n     *  As per discussed with Roger , No need to show users number under First and\n     *  Second responder screen 2 Sept. via skype chat\n     * */\n    // for(var itr in timeout_list){ //processing timeout_obj list \n    //     var detail_obj = {};\n            \n    //         detail_obj.table                = \"details\";\n    //         detail_obj.task_id              = [timeout_list[itr].delivery_task_id]; //ReminderBot categorty and Stumped Category screens\n    //         detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n    //         detail_obj.user_id              = userObj._id;\n    //         detail_obj.from_user_id         = {\n    //             user_id   : userObj._id,\n    //             phone     : userObj.virtual_phone,\n    //             firstname : userObj.firstname,\n    //             lastname  : userObj.lastname,\n    //             type      : userObj.type,\n    //         };\n    //         detail_obj.page_id                          = new Date().getTime(); //masterbot category page_id\n    //         detail_obj.from_page_id                     = 2;\n    //         detail_obj.to_page_id                       = new Date().getTime() + 500;\n    //         detail_obj.synchronized                     = 0;\n    //         detail_obj.processed                        = 1;\n    //         detail_obj.status                           = 1;\n    //         detail_obj.read                             = 1;\n    //         detail_obj.display_if_empty                 = \"true\";\n    //         detail_obj.date_created                     = new Date().toJSON();\n    //         detail_obj.offline_expiration_seconds       = 0;\n    //         detail_obj.priority                         = 1;\n    //         detail_obj.category                         = \"stumped\";\n    //         detail_obj.type                             = timeout_list[itr].delivery_user_types;\n    //         detail_obj.type.public                      = \"public\";\n    //         detail_obj.image                            = \"\";\n    //         detail_obj.from_user                        = {};\n    //         detail_obj.user_incoming                    = {\n    //             note        : phone,\n    //             message     : (userObj.firstname + userObj.lastname ) || phone\n    //         };\n    //         detail_obj.template                         = {};\n    //         detail_obj.timeout                          = {};\n    //         detail_obj.user_calculate                   = {};\n    //         detail_obj.location                         = {};\n    //         detail_obj.default                          = {};\n    //         detail_obj.count_status                     = {\n    //             active: 1,\n    //             unread: 0\n    //         };\n    //         detail_obj.count                            = {\n    //             active: 1,\n    //             unread: 1\n    //         };\n    //         detail_obj.count_if                         = {\n    //             active: 1,\n    //             unread: 0\n    //         };\n    //         detail_obj.createdAt                        = new Date().getTime();\n    //         detail_obj.myTimeout                        = timeout_list[itr];\n        \n    //     details.push(detail_obj);\n    // }\n    \n    //original user detail for company\n    var original_to_page_id = new Date().getTime() + 600;\n    var original_detail     = create_original_detail(original_to_page_id, timeout);\n    details.push(original_detail);\n    \n    return details;\n}\n\nfunction create_original_detail(to_page_id, timeout){\n    var detail_obj = {};\n    \n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"26\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = \"47126a7129fa090a23a20d53c0025d87\"; //child text task\n    detail_obj.user_id              = \"0a9b50963bc76018418ffd857d551ced\";\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 26; //Company stumped category page_id\n    detail_obj.from_page_id                     = 2;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\",\n        \"company_bot_detail\": \"company_bot_detail\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : (userObj.firstname + userObj.lastname ) || phone\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n    detail_obj.myTimeout                        = timeout;\n    \n    return detail_obj;\n}\n\nfunction save_detail_for_user(msg, userObj){\n    var detail_obj = {};\n    \n    detail_obj.table                = \"details\";\n    detail_obj.task_id              = [\"18_0\"]; //ReminderBot categorty and Stumped Category screens\n    detail_obj.child_task_id        = null; //child text task\n    detail_obj.user_id              = userObj._id;\n    detail_obj.from_user_id         = {\n        user_id   : userObj._id,\n        phone     : userObj.virtual_phone,\n        firstname : userObj.firstname,\n        lastname  : userObj.lastname,\n        type      : userObj.type,\n    };\n    detail_obj.page_id                          = 18; //Company stumped category page_id\n    detail_obj.from_page_id                     = 5;\n    detail_obj.to_page_id                       = new Date().getTime();\n    detail_obj.synchronized                     = 0;\n    detail_obj.processed                        = 1;\n    detail_obj.status                           = 1;\n    detail_obj.read                             = 1;\n    detail_obj.display_if_empty                 = \"true\";\n    detail_obj.date_created                     = new Date().toJSON();\n    detail_obj.offline_expiration_seconds       = 0;\n    detail_obj.priority                         = 1;\n    detail_obj.category                         = \"stumped\";\n    detail_obj.type                             = {\n        \"public\" : \"public\"\n    };\n    detail_obj.image                            = \"\";\n    detail_obj.from_user                        = {};\n    detail_obj.user_incoming                    = {\n        note        : phone,\n        message     : msg\n    };\n    detail_obj.template                         = {};\n    detail_obj.timeout                          = {};\n    detail_obj.user_calculate                   = {};\n    detail_obj.location                         = {};\n    detail_obj.default                          = {};\n    detail_obj.count_status                     = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.count                            = {\n        active: 1,\n        unread: 1\n    };\n    detail_obj.count_if                         = {\n        active: 1,\n        unread: 0\n    };\n    detail_obj.createdAt                        = new Date().getTime();\n\n    return [detail_obj];\n}\n\nfunction populate_assistants(users, group_id){\n    var list = [];\n    \n    if(isEmpty(users)) return list;\n    if(isEmpty(group_id)) return list;\n    \n    for(var itr in users){\n        if(users[itr].data){\n            if(group_id in users[itr].data.groups){\n                list.push(users[itr]);\n            }\n        }\n    }\n    return list;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1181.5313568115234,
        "y": 1799.3801659345627,
        "wires": [
            [
                "4199ddab.bae894"
            ]
        ]
    },
    {
        "id": "4199ddab.bae894",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Optional Task",
        "func": "var details     = JSON.parse(JSON.stringify(msg.details_arr)),\n    new_tasks   = [];\n\nfor(var itr in details){\n    var obj = {\n        \"_id\": randomString(32),\n        \"table\": \"task_table\",\n        \"user_id\": details[itr].user_id,\n        \"task_name\": details[itr].user_incoming.message, \n        \"page_id\": details[itr].to_page_id,\n        \"from_page_id\": details[itr].page_id,\n        \"parent_id\": details[itr].task_id,\n        \"header_template_id\": \"99_h\",\n        \"detail_template_id\": \"99_d\",\n        \"footer_template_id\": \"99_f\",\n        \"timeout_id\": details[itr].myTimeout,\n        \"location_ids\": {},\n        \"child_default_task_id\": null,\n        \"child_default_task_name\": null,\n        \"date_created\": new Date().toJSON(),\n        \"category\": \"stumped\",\n        \"status\": \"true\",\n        \"additional_data_fn\": null,\n        \"optional_data\": {},\n        \"required_data\": {},\n        \"offline_expiration_time\": 0,\n        \"display_if_empty\": \"true\",\n        \n        \"type\": details[itr].type,\n        \"image\": \"\"\n    };\n    new_tasks.push(obj);\n}\n\nmsg.task_arr = new_tasks;\n\nvar textMsg = msg.req_body.body;\nmsg.method = \"POST\";\nmsg.url    = \"https://play-timeout.mybluemix.net/chatbot\";\nmsg.payload= {\n    text : textMsg\n};\nreturn msg;\n\n\nfunction randomString(length) {\n    var result = '',\n        chars  = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    \n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1390.5313682556152,
        "y": 1799.380161166191,
        "wires": [
            [
                "e4b4d9c5.791088"
            ]
        ]
    },
    {
        "id": "beafe898.806f28",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Add Detail",
        "func": "var chatbot     = msg.chatbot_response ,\n    userObj     = msg.userObj ,\n    task_obj    = isEmpty(msg.task_arr) ? {} :  msg.task_arr[0] , \n    new_details = [],\n    req_body    = msg.req_body;\n\nmsg.timeout_obj   = task_obj.timeout_id;\nvar timeout_list  = task_obj.timeout_id.timeout_list ;\n\nfor(var itr in timeout_list){\n    var obj = {\n        \"table\": \"details\",\n        //\"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": timeout_list[itr].delivery_due ? timeout_list[itr].delivery_due + new Date().getTime(): 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list[itr],\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 10000\n    };    \n    new_details.push(obj);\n}//loop end braces\n\nvar watson_res      = populate_watson_response(chatbot, userObj),\n    company_detail  = populate_company_detail();\n    \nmsg.save_msg_detail.push(watson_res);\nnew_details.push(company_detail);\n\nmsg.new_details = new_details;\nmsg.payload = {\n    docs: flatten([msg.details_arr, msg.task_arr, msg.new_details, msg.save_msg_detail])\n};\nnode.warn(msg);\nreturn msg;\n\n\nfunction populate_watson_response(chatbot, userObj){\n    var obj = {\n        \"table\": \"details\",\n        \"task_id\": flatten([\"18_0\", task_obj._id]), //under user Screen which send text message\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": 18, // masterbot user_sub category page_id\n        \"from_page_id\": 0,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        \"due_date\" : 0,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": {\n            \"public\": \"public\"\n        },\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname) ,\n            \"message\": chatbot.data,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": {},\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime() + 2000\n    };  \n    \n    msg.user_page = obj;\n    return obj;\n}\n\nfunction populate_company_detail(){\n    var obj = {\n        \"table\": \"details\",\n        //\"task_id\": set_task_id(task_arr[itr], company_task_id), //under masterbot user sub_category task_id\n        \"task_id\": task_obj._id , //there is not need to created assistant details\n        \"child_task_id\": null,\n        \"user_id\": userObj._id,\n        \"from_user_id\": {\n          user_id: userObj._id,\n          phone: userObj.virtual_phone,\n          firstname: userObj.firstname,\n          lastname : userObj.lastname,\n          type     : userObj.type,\n        },\n        \"page_id\": task_obj.page_id, // masterbot user_sub category page_id\n        \"from_page_id\": task_obj.from_page_id,\n        \"to_page_id\": 0,\n        \"synchronized\": 0,\n        \"processed\": 0,\n        \"status\": 0,\n        \"read\": 0,\n        \"display_if_empty\": \"true\",\n        //\"due_date\" : isEmpty(task_arr[itr].myTimeout) ? 0 : new Date().getTime() + task_arr[itr].myTimeout.delivery_due || 120000, //timeout process would be valid after 2 minutes\n        \"due_date\": 0 ,\n        \"date_created\": new Date().toJSON(),\n        \"offline_expiration_seconds\": 0,\n        \"priority\": 1,\n        \"type\": task_obj.type,\n        \"image\": \"\",\n        \"from_user\": {},\n        \"user_incoming\": {\n            \"note\":  (userObj.firstname + userObj.lastname),\n            \"message\": req_body.body,\n            \"watson\" : (chatbot.data == \"Watson Stumped\" ? null : chatbot.data) , \n        },\n        \"template\": {},\n        \"timeout\": timeout_list,\n        \"user_calculate\": {},\n        \"location\": {},\n        \"default\": {},\n        \"count_status\": {},\n        \"count\": {},\n        \"count_if\": {},\n        \"createdAt\": new Date().getTime()\n    };\n    \n    msg.company_detail = obj;\n    return obj;\n}\n\n\nfunction flatten(arr) {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1849.198143005371,
        "y": 1734.3803081512451,
        "wires": [
            [
                "a9cbdddc.23b18",
                "12b1f84c.488b18",
                "2a29b213.f5112e"
            ]
        ]
    },
    {
        "id": "30a9dc47.6ec134",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3011.031463623047,
        "y": 1905.0468624830246,
        "wires": []
    },
    {
        "id": "327be42c.64289c",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "Logger",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 3283.0321502685547,
        "y": 1824.0469417572021,
        "wires": []
    },
    {
        "id": "fc94bca9.29f52",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_NOT_EXISTS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER_EXISTS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 803.8336124420166,
        "y": 1916.9999828338623,
        "wires": [
            [
                "ae0dfa99.0439b8"
            ],
            [
                "11000695.df8e69"
            ]
        ]
    },
    {
        "id": "4452119f.88d6",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 2063.6667518615723,
        "y": 1864.0001187324524,
        "wires": []
    },
    {
        "id": "8525252d.dc0b48",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "API_RESPONSE",
        "func": "var chat_response = msg.chatbot_response;\n\nmsg.payload = {status:200, error: false, msg: \"Chatbot respond successfully!\", data: chat_response.data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1869.666732788086,
        "y": 1861.1955409049988,
        "wires": [
            [
                "4452119f.88d6"
            ]
        ]
    },
    {
        "id": "df6b13c0.dfae5",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "+12145644732",
        "name": "Send to Roger",
        "x": 1880.6666259765625,
        "y": 886.3333129882812,
        "wires": []
    },
    {
        "id": "55c0567f.b2c718",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Send SMS To Roger",
        "func": "//{topic: 12145644732, body: payload.data};\n// as client said to stopt this notification.\n\nvar data = msg.adminData;\n\nmsg.topic   = data.topic || 12145644732 ;\nmsg.payload = data.body  ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1664.6666069030762,
        "y": 888.3333129882812,
        "wires": [
            [
                "df6b13c0.dfae5"
            ]
        ]
    },
    {
        "id": "9f94d6f8.610798",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2313.8335609436035,
        "y": 680.000020980835,
        "wires": []
    },
    {
        "id": "ca693b9a.1416e8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2234.3337593078613,
        "y": 1640.6669178009033,
        "wires": []
    },
    {
        "id": "d1aabe0b.1ae01",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1986.3334465026855,
        "y": 2091.9999170303345,
        "wires": []
    },
    {
        "id": "69c86b25.1adc34",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1794.666748046875,
        "y": 2100,
        "wires": [
            [
                "d1aabe0b.1ae01"
            ]
        ]
    },
    {
        "id": "2166b118.bdcd3e",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    company_detail  = msg.company_detail ,\n    user_page       = msg.user_page,\n    bot_data        = msg.chatbot_response,\n    gorup_ids       = populate_group_ids(timeout_list);\n    \n    \nmsg.url     = \"https://socket-server.mybluemix.net/notify_connected_users\";\n//msg.url     = \"http://mastersoftwaretechnologies.com:6050/notify_connected_users\";\n\nmsg.method  = \"POST\";\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\":[user_page.page_id || 18 , company_detail.page_id],\n        \"bot_data\": bot_data,\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\n\nnode.warn(\"inside logger fn\");\nnode.warn(JSON.stringify(msg.payload));\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1624.3335075378418,
        "y": 2097.333137512207,
        "wires": [
            [
                "69c86b25.1adc34"
            ]
        ]
    },
    {
        "id": "a796323f.8b848",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    task_obj        = msg.task_obj,\n    bot_data        = msg.chatbot_response,\n    gorup_ids       = populate_group_ids(timeout_list);\n    \n    \nmsg.url     = \"https://socket-server.mybluemix.net/notify_connected_users\";\n//msg.url     = \"http://mastersoftwaretechnologies.com:6005/notify_connected_users\";\nmsg.method  = \"POST\";\n\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\": [18, task_obj.page_id],\n        \"bot_data\": bot_data,\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1811.3335227966309,
        "y": 1095.6666489839554,
        "wires": [
            [
                "364f05d6.bd724a"
            ]
        ]
    },
    {
        "id": "364f05d6.bd724a",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1963.6667022705078,
        "y": 1108.3333187103271,
        "wires": [
            [
                "f0168606.2969e8"
            ]
        ]
    },
    {
        "id": "f0168606.2969e8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2144.500202178955,
        "y": 1109.6666756868362,
        "wires": []
    },
    {
        "id": "b1fc2ae9.c7bcb8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2148.333251953125,
        "y": 684.3333129882812,
        "wires": [
            [
                "9f94d6f8.610798"
            ]
        ]
    },
    {
        "id": "e931b792.3d5468",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    company_detail  = msg.company_detail ,\n    bot_data        = msg.chatbot_response,\n    gorup_ids       = populate_group_ids(timeout_list);\n\nmsg.url     = \"https://socket-server.mybluemix.net/notify_connected_users\";\n//msg.url     = \"http://mastersoftwaretechnologies.com:6005/notify_connected_users\";\nmsg.method  = \"POST\";\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\":[18 , company_detail.page_id],\n        \"bot_data\": bot_data,\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1977.9999542236328,
        "y": 684.6666260957718,
        "wires": [
            [
                "b1fc2ae9.c7bcb8"
            ]
        ]
    },
    {
        "id": "2c5d6a12.654b46",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2160.500030517578,
        "y": 637.3333206176758,
        "wires": []
    },
    {
        "id": "2a29b213.f5112e",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    company_detail  = msg.company_detail ,\n    user_page       = msg.user_page,\n    gorup_ids       = populate_group_ids(timeout_list);\n    \n    \nmsg.url     = \"https://socket-server.mybluemix.net/notify_connected_users\";\nmsg.method  = \"POST\";\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\":[user_page.page_id || 18 , company_detail.page_id],\n        \"user_id\": msg.userObj._id,\n        \"phone\": msg.userObj.virtual_phone\n    },\n    \"other_user\": {}\n};\nreturn msg;\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2051.0002212524414,
        "y": 1789.0000982284546,
        "wires": [
            [
                "2e538e07.a89ae2"
            ]
        ]
    },
    {
        "id": "2e538e07.a89ae2",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2221.3335189819336,
        "y": 1788.666785120964,
        "wires": [
            [
                "a190e95c.eed498"
            ]
        ]
    },
    {
        "id": "a190e95c.eed498",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2396.0005798339844,
        "y": 1844.000259399414,
        "wires": []
    },
    {
        "id": "fc3971af.37805",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "logger",
        "func": "var timeoutObj      = msg.timeout_obj,\n    timeout_list    = timeoutObj.timeout_list ,\n    task_obj        = msg.task_obj,\n    body            = msg.req_body,\n    gorup_ids       = populate_group_ids(timeout_list);\n    \n    \nmsg.url     = \"https://socket-server.mybluemix.net/added_data_from_operator\";\nmsg.method  = \"POST\";\n\nmsg.payload = {\n    \"app\": {},\n    \"platform\": {\n        \"isPageRefresh\": true, \n        \"group_ids\": gorup_ids,\n        \"page_ids\": [18, task_obj.page_id],\n        \"msgBody\": body.msg,\n        \"user_id\": msg.user_obj._id\n    },\n    \"other_user\": {}\n};\n\nnode.warn(msg);\nreturn msg;\n\n\n\n\nfunction populate_group_ids(timeoutList){\n    var group_ids = [];\n    \n    for(var itr in timeoutList){\n        if(!isEmpty(timeoutList[itr].delivery_user_types)){\n            var obj = timeoutList[itr].delivery_user_types;\n            group_ids.push(Object.keys(obj)[0]);\n        }\n    }\n    \n    return group_ids;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1095.666648864746,
        "y": 1555.0000114440918,
        "wires": [
            [
                "9dbdfbdf.6964e8"
            ]
        ]
    },
    {
        "id": "9dbdfbdf.6964e8",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1265.9999237060547,
        "y": 1548.6666868925095,
        "wires": [
            [
                "b586a55b.7b4be8"
            ]
        ]
    },
    {
        "id": "b586a55b.7b4be8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1443.8334045410156,
        "y": 1560.0000629425049,
        "wires": []
    },
    {
        "id": "b729030c.08eac",
        "type": "twilio out",
        "z": "3d6329c5.e74616",
        "service": "_ext_",
        "twilio": "80db99b9.2656f8",
        "from": "",
        "number": "",
        "name": "Chabot SMS ",
        "x": 1634.6673965454102,
        "y": 958.0000848770142,
        "wires": []
    },
    {
        "id": "a85d3a20.db06d8",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 295.8333435058594,
        "y": 706.3333206176758,
        "wires": []
    },
    {
        "id": "9066159b.679cd8",
        "type": "inject",
        "z": "15a80fee.a1bde",
        "name": "start",
        "topic": "start",
        "payload": "start",
        "payloadType": "flow",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140.83334350585938,
        "y": 136.00001525878906,
        "wires": [
            [
                "717f8a45.0ba6f4"
            ]
        ]
    },
    {
        "id": "717f8a45.0ba6f4",
        "type": "function",
        "z": "15a80fee.a1bde",
        "name": "payload",
        "func": "msg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": \"This message is send from node-red server. Thanks!\"\n\t\t}, \n\t\t\"target\": {\n\t\t\t\"deviceIds\": [\"1099CA5A-EAFC-499A-953D-10D8850CB34B\"] \n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"       : 18 \n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"       : 18 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 286.8333339691162,
        "y": 136.6666808128357,
        "wires": [
            [
                "7851422f.aedb5c"
            ]
        ]
    },
    {
        "id": "7851422f.aedb5c",
        "type": "http request",
        "z": "15a80fee.a1bde",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 464.83331298828125,
        "y": 136.6667022705078,
        "wires": [
            [
                "600b60a7.58845"
            ]
        ]
    },
    {
        "id": "600b60a7.58845",
        "type": "debug",
        "z": "15a80fee.a1bde",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 661.8333129882812,
        "y": 135.33335876464844,
        "wires": []
    },
    {
        "id": "194c9eb7.f51971",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "chatbot_payload",
        "func": "var textMsg = msg.req_body.body,\n    payload  = msg.payload;\n\nvar db_records = populate_record(payload.rows);\n\n\nmsg.task_obj    = populate_task(db_records.tasks, msg.req_body.phone);\nmsg.userObj     = isEmpty(msg.userObj) ? {} : msg.userObj[0] ;\n\n\nif(isEmpty(msg.task_obj)){\n    msg.api_status  = \"API_ERROR\";\n    msg.payload     = {status: 400, msg: \"Unable to get the Task Obj with Phone number\", data: null};\n}else{\n    \n    node.warn(\"msg.userObj >>>>>>>>>\");\n    node.warn(msg.userObj);\n    \n    msg.api_status  = \"API_SUCCESS\";\n    msg.method      = \"POST\";\n    msg.url         = \"https://play-timeout.mybluemix.net/chatbot\";\n    msg.payload     = {\n        text: textMsg ,\n        context : getContext(msg.userObj)\n    };\n}\nreturn msg;\n\nfunction getContext(user){\n    if(isEmpty(user.data)){\n        return {\n            first_name : user.firstname.toString(),\n            last_name  : user.lastname.toString(),\n            phone     : user.virtual_phone.toString(),\n            timeStamp : new Date().getTime()\n        };\n    }else{\n        if(isEmpty(user.data[\"fa1785333117ba7c06b9020a6d3c0079\"])){\n            return {\n                first_name : user.firstname.toString(),\n                last_name  : user.lastname.toString(),\n                phone     : user.virtual_phone.toString(),\n                timeStamp : new Date().getTime()\n            };\n        }else{\n            var context = user.data[\"fa1785333117ba7c06b9020a6d3c0079\"].context;\n            if(!isEmpty(context)){\n                if(new Date().getTime() > ( Number(context.timeStamp) +  10800000 )){\n                    return {\n                        first_name : user.firstname.toString(),\n                        last_name  : user.lastname.toString(),\n                        phone     : user.virtual_phone.toString(),\n                        timeStamp : new Date().getTime()\n                    };\n                }else{\n                    context.first_name = user.firstname.toString() || context.first_name ;\n                    context.last_name  = user.lastname.toString() || context.last_name ;\n                    context.phone     = user.virtual_phone.toString() || context.phone ;\n                    context.timeStamp = new Date().getTime();\n                    return context ;\n                }\n            }else{\n                return {\n                    first_name : user.firstname.toString(),\n                    last_name  : user.lastname.toString(),\n                    phone     : user.virtual_phone.toString(),\n                    timeStamp : new Date().getTime()\n                };\n            }\n        }\n    }\n}\n\n\nfunction populate_task(list, task_name){\n    var obj = {};\n    for(var i =0; i<list.length; i++){\n        if(task_name == list[i].task_name){\n            obj = list[i];\n        }\n    }\n    return obj;\n}\n\n\nfunction populate_record(list){\n    var details=[], task_table = [], sorted_detail = [];\n\n    for(var i=0; i<list.length; i++){\n        if(list[i].value.table == \"details\"){\n            details.push(list[i].value);\n        }\n        \n        if(list[i].value.table == \"task_table\"){\n            task_table.push(list[i].value);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n        \t\treturn (a.createdAt - b.createdAt);\t\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {details: sorted_detail, tasks: task_table} ;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 965.6668853759766,
        "y": 2060.000121116638,
        "wires": [
            [
                "a109a786.c7e088"
            ]
        ]
    },
    {
        "id": "11000695.df8e69",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 951.1668014526367,
        "y": 1970.6667432785034,
        "wires": [
            [
                "194c9eb7.f51971"
            ]
        ]
    },
    {
        "id": "a109a786.c7e088",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "api_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "API_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "API_SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1121.1666564941406,
        "y": 2106.6667251586914,
        "wires": [
            [
                "2a951f8.59da3e"
            ],
            [
                "5e8713e4.0cfe9c"
            ]
        ]
    },
    {
        "id": "2a951f8.59da3e",
        "type": "http response",
        "z": "3d6329c5.e74616",
        "name": "",
        "x": 1257.1666564941406,
        "y": 2058.333381652832,
        "wires": []
    },
    {
        "id": "79fb1143.762f",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3351.333251953125,
        "y": 549.6666259765625,
        "wires": [
            [
                "f3968cce.9a3f2"
            ]
        ]
    },
    {
        "id": "f3968cce.9a3f2",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3540.3332748413086,
        "y": 548.3332796096802,
        "wires": []
    },
    {
        "id": "1cd60a3.7f1f2f6",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "PUSH",
        "func": "    var task_obj        = msg.task_obj,\n        user            = msg.userObj ,\n        push_data       = msg.payload;\n\nmsg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": \"Group 1 - \" + user.virtual_phone + \" \" + push_data.msg\n\t\t}, \n\t\t\"target\": {\n\t\t\t\"deviceIds\": isArray(push_data.push) ? push_data.push : [push_data.push]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"user_page_id\"  : 18 ,\n\t\t\t\t\t\"page_id\": task_obj.to_page_id,\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"user_page_id\"  : 18 ,\n\t\t\t\t\t\"page_id\": task_obj.page_id,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nreturn msg;\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3219.66650390625,
        "y": 991,
        "wires": [
            [
                "2ea49b04.8b6784"
            ]
        ]
    },
    {
        "id": "2ea49b04.8b6784",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3388.499641418457,
        "y": 986.3332586288452,
        "wires": [
            [
                "e017284e.732b88"
            ]
        ]
    },
    {
        "id": "e017284e.732b88",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3577.4996643066406,
        "y": 984.9999122619629,
        "wires": []
    },
    {
        "id": "d8696f.ed1ee69",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "PUSH",
        "func": "var page_id         = msg.company_page_id ,\n    push_data       = msg.payload;\n    \nmsg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": \"Group 2 - \" + push_data.msg\n\t\t}, \n\t\t\"target\": {      \n\t\t\t\"deviceIds\": isArray(push_data.push) ? push_data.push : [push_data.push]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : page_id || 2 ,\n\t\t\t\t\t\"user_page_id\": 18\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : page_id || 2 ,\n\t\t\t\t\t\"user_page_id\": 18\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nreturn msg;\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1083.333236694336,
        "y": 119.66666889190674,
        "wires": [
            [
                "181e650.1e3a59b"
            ]
        ]
    },
    {
        "id": "181e650.1e3a59b",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1252.166374206543,
        "y": 114.99992752075195,
        "wires": [
            [
                "e23e7442.46e9b8"
            ]
        ]
    },
    {
        "id": "e23e7442.46e9b8",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1441.1663970947266,
        "y": 113.66658115386963,
        "wires": []
    },
    {
        "id": "4754047c.d26bec",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "PUSH",
        "func": "var company_detail  = msg.company_detail ,\n    user_page       = msg.user_page,\n    push_data       = msg.payload;\n    \nmsg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": push_data.msg\n\t\t}, \n\t\t\"target\": {\n\t\t\t\"deviceIds\": isArray(push_data.push) ? push_data.push : [push_data.push]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : company_detail.to_page_id ,\n\t\t\t\t\t\"user_page_id\": user_page.page_id\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"user_page_id\"  : user_page.page_id ,\n\t\t\t\t\t\"page_id\": company_detail.to_page_id,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nreturn msg;\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3269.6666984558105,
        "y": 1568.333342552185,
        "wires": [
            [
                "2bf6b0c2.f7481"
            ]
        ]
    },
    {
        "id": "2bf6b0c2.f7481",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3438.4998359680176,
        "y": 1563.6666011810303,
        "wires": [
            [
                "aae022b7.abe9c"
            ]
        ]
    },
    {
        "id": "aae022b7.abe9c",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3627.499858856201,
        "y": 1562.333254814148,
        "wires": []
    },
    {
        "id": "4d859fcc.7babc",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "PUSH",
        "func": "var company_detail  = msg.company_detail ,\n    user_page       = msg.user_page,\n    chatbot_data    = msg.chatbot_response,\n    push_data       = msg.payload;\n\nnode.warn(\"msg >>>>>>>>>>>>>>>>\");    \nnode.warn(msg);\n\nmsg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\n//msg.url = \"http://mastersoftwaretechnologies.com:6005/send_push_notification\";\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n    \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n    \"payload\": {\n\t\t\"message\": {\n\t\t\t\"alert\": chatbot_data.data\n\t\t}, \n\t\t\"target\": {\n\t\t\t\"deviceIds\": isArray(push_data) ? push_data : [push_data]\n\t\t},\n\t\t\"settings\": {\n\t\t\t\"apns\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"page_id\"  : company_detail.page_id ,\n\t\t\t\t\t\"user_page_id\": user_page.page_id\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"gcm\": {\n\t\t\t\t\"payload\": {\n\t\t\t\t\t\"isPageRefresh\" : true,\n\t\t\t\t\t\"user_page_id\"  : user_page.page_id ,\n\t\t\t\t\t\"page_id\": company_detail.page_id,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nnode.warn(\"Before msg return >>>>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction isArray(obj){\n    if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 3044.0001831054688,
        "y": 2041.3333711624146,
        "wires": [
            [
                "2e304528.d630da",
                "335e948d.fdd8fc"
            ]
        ]
    },
    {
        "id": "335e948d.fdd8fc",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 3212.833320617676,
        "y": 2036.6666297912598,
        "wires": [
            [
                "3c9212af.928c7e"
            ]
        ]
    },
    {
        "id": "3c9212af.928c7e",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3401.8333435058594,
        "y": 2035.3332834243774,
        "wires": []
    },
    {
        "id": "a854cc6a.9631",
        "type": "debug",
        "z": "5aaca332.83ed4c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 892.8333435058594,
        "y": 696.6666669845581,
        "wires": []
    },
    {
        "id": "d38f86d4.3856a8",
        "type": "switch",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "property": "all_pages_request",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 2119.9514656066895,
        "y": 573.0453128814697,
        "wires": [
            [
                "4107fbed.f0bb14"
            ],
            [
                "c99c92c1.9833a"
            ]
        ]
    },
    {
        "id": "c99c92c1.9833a",
        "type": "function",
        "z": "5e22f743.a6a0b8",
        "name": "all_pages_request",
        "func": "var payload             = msg.db_get_page ,\n    counts              = msg.payload ,\n    req_obj             = msg.payload_content,\n    db_record           = populate_records(payload.rows),\n    user_obj            = populate_user(req_obj, db_record.users);\n    \nif(isEmpty(user_obj)){\n    msg.statusCode = 400 ;\n    msg.api_status = \"API_ERROR\";\n    msg.payload    = {status: 400, msg: \"Unable to populate user via using `access_token` or `phone`.\", data: null};\n}else{\n    var user_tasks = populate_user_task_pages(db_record.user_tasks, user_obj);\n    msg.payload    = {status: 200, error:false, msg: \"Record fetched successfully\", records: populated_pages(user_tasks, db_record) };\n}\nreturn msg;\n\n\nfunction populate_user_task_pages(usersTasks, user){ //list, object\n    if(isEmpty(usersTasks)) return [];\n    if(isEmpty(user)) return [];\n    \n    var result = [];\n    for(var itr in usersTasks){\n        if(usersTasks[itr].user_id == user._id){\n            result.push(usersTasks[itr]);\n        }\n    }\n    return result;\n}\n\nfunction populate_records(list){\n    var users = [], templates = [], details=[], task_table = [], user_task = [], sorted_detail = [];\n    for(var i=0; i<list.length; i++){\n        if(list[i].doc.table == \"template\"){\n            templates.push(list[i].doc);\n        }\n        if(list[i].doc.table == \"details\"){\n            details.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"task_table\"){\n            task_table.push(list[i].doc);\n        }\n\n        if(list[i].doc.table == \"users\"){\n            users.push(list[i].doc);\n        }\n        \n        if(list[i].doc.table == \"user_task\"){\n            user_task.push(list[i].doc);\n        }\n    }\n    \n    if(!isEmpty(details)){\n        sorted_detail =  details.sort(function(a,b){\n            sorted_detail = sorted_detail.sort(function(a,b){\n            \tif(typeof a.page_id === 'number'){\n            \t\treturn (a.page_id - b.page_id);\t\n            \t}else{\n            \t\treturn (a.createdAt - b.createdAt);\t\n            \t}\n            });\n        });\n    }else{\n        sorted_detail = details ;\n    }\n    \n    return {users: users, templates: templates, details: sorted_detail, tasks: task_table, user_tasks: user_task} ;\n}\n\nfunction populate_user(body, users){\n    var obj             = {} ,\n        access_token    = body.access_token,\n        phone           = body.phone ;\n        \n    for(var i in users){\n        if(\n            (access_token == users[i].access_token) ||\n            (phone == users[i].virtual_phone.toString())\n            ){\n            obj = users[i];\n        }\n    }\n    return obj;\n}\n\nfunction populated_pages(user_tasks, db_obj){\n    var pages = [] , req_page = {};\n    \n    for(var i=0; i < user_tasks.length; i++){\n        var task_obj        =  populate_taskobj(user_tasks[i].page_id, db_obj.tasks);\n        if(!isEmpty(task_obj)){\n            var details     =  populate_details(task_obj._id, db_obj.details),\n            prepare_task    =  formulate_task(task_obj, db_obj),\n            prepare_details =  formulate_details(details);  \n                    \n            pages.push({\n                page_id :  user_tasks[i].page_id,\n                user    :  user_obj || {},\n                task    :  prepare_task,\n                detail  :  getpage(prepare_details)\n        \t});\n        }\n    }\n        \n    return {req_page : req_page, pages: pages};\n}\n\nfunction getpage(details){\n    var result  = populate_counts(details),\n        detail  = result.detail_array;\n         \n    if(detail.length){\n        return detail ;\n    }else{\n        return [] ;\n    }\n}\n\nfunction populate_counts(details){\n    var detailArr=[];\n\n    for(var loop in details){\n        var isUserTaskExits = checkFromUserTaskList(details[loop], db_record.user_tasks); \n        \n        if( isEmpty(isUserTaskExits) ){ //check if already user_task is not present for that user. if not then do the following steps\n        \n            populate_ancestors(details[loop].page_id, db_record.tasks, \"page_id\"); //calculating ancestor task with request page_id\n            populate_decendents(details[loop].page_id, db_record.details); //calculating sub childs _id with current requested page_id\n\n            msg.updated_user_task = {   // create user_task record if user_task is not present in database \n              table           : \"user_task\",\n            \ttask_id \t\t    : details[loop].task_id[0],\n            \tuser_id\t\t\t : user_obj._id,\n            \tpage_id         : parseInt(details[loop].page_id),\n            \tsynchronized    : 1,\n              status          : 0, \n            \tdate_updated\t : null,\t\n            \tparent_id\t\t : details[loop].task_id[0],\n            \tancestors       : ancestor_conts_array, \n            \tdecendents      : decendent_counts_array,\n            \tcount_status\t : {\n            \t   active       : 1,\n            \t   unread       : 0,\n            \t},\n            \tcount\t\t\t    : {\n            \t    active      : 1,\n            \t    unread      : 0,\n            \t},\n            \tcount_if\t\t    : {\n            \t    active      : 1,\n            \t    unread      : 0\n            \t},\n            \ttemplates\t\t : {},\n            \ttimeout\t\t\t : {},\n            \tcreatedAt       : new Date().getTime()\n            };\n            \n            details[loop].count.active = 0;     //when user_task is not present for that detail\n            details[loop].count.unread = 0;     // just set default values for active and unread\n            detailArr.push(details[loop]);      // and push into detailArr to sent response to client.\n        }else{ //when already user_task present for that user. just get_active and unread counts from cloudant view i.e counts.rows\n            msg.updated_user_task = {};\n            var detail_count = populateDetailObjWithCounts(counts.rows, details[loop]);\n            details[loop].count.active = detail_count.active; \n            details[loop].count.unread = detail_count.unread;\n            detailArr.push(details[loop]); \n        }\n    }\n\n    if(!isEmpty(msg.updated_user_task))  msg.update_my_user_task = true;\n    return {detail_array: detailArr};\n}\n\n\nfunction populateDetailObjWithCounts(rows, detail_obj){                  //this function accepts cloudant view rows and particular details obj\n    var obj = {active: 0, unread: 0};\n\n    if(isEmpty(rows)) return obj;\n    if(isEmpty(detail_obj)) return obj;\n    \n    for(var itr in rows){\n        if(\n            (rows[itr].key[1] == detail_obj.user_id) &&                  //key[1] should contains user_id in user_task count cloudant_view\n            ( if_exists_in_arr(rows[itr].key[2], detail_obj.task_id) )   // for refrence check cloudant view page_count \n        ){                                                               // for e.g emit([doc.ancestors[i], doc.user_id, doc.task_id], {active: doc.count.active, unread: doc.count.unread});\n            obj.active += rows[itr].value.active ;\n            obj.unread += rows[itr].value.unread ;\n        }\n    }\n    \n    return obj;\n}\n\nfunction checkFromUserTaskList(obj, user_tasks){\n    var res = {};\n    if(isEmpty(obj)) return res;\n    if(isEmpty(user_tasks)) return res;\n    \n    for(var loop in user_tasks){\n        if(\n            (user_tasks[loop].user_id == user_obj._id) &&\n            (if_exists_in_arr(user_tasks[loop].task_id, obj.task_id ))\n        ){\n            res = user_tasks[loop];\n        }\n    }\n    return res;\n}\n\nfunction populate_ancestors(id, task_arr, type){\n    if(type == \"page_id\"){\n        for(var index in task_arr){\n            if(task_arr[index].page_id == id){\n                if( !if_exists_in_arr( task_arr[index].parent_id, ancestor_conts_array ) ){\n                    ancestor_conts_array.push(task_arr[index].parent_id.toString());\n                }\n                populate_ancestors( task_arr[index].parent_id, db_record.tasks, \"parent_id\"); \n            }\n        }    \n    }else{\n        for(var itr in task_arr){\n            if(task_arr[itr]._id == id){\n                if(!isEmpty(task_arr[itr].parent_id)) {\n                    if( !if_exists_in_arr( task_arr[itr].parent_id, ancestor_conts_array ) ){\n                        ancestor_conts_array.push(task_arr[itr].parent_id.toString());\n                        populate_ancestors( task_arr[itr].parent_id, db_record.tasks, \"parent_id\");\n                    }\n                }\n            }\n        }    \n    }\n}\n\nfunction populate_decendents(id, details_arr){\n    for(var index in details_arr){\n        if(id == details_arr[index].page_id){\n            if(checkIsPrivate(details_arr[index])) {\n                if(!if_exists_in_arr( details_arr[index]._id, decendent_counts_array)){\n                    decendent_counts_array.push(details_arr[index]._id.toString());\n                }\n            }\n\n            if( \n                !isEmpty(details_arr[index].to_page_id) && \n                ( parseInt(details_arr[index].to_page_id) === 0) &&\n                checkIsPrivate(details_arr[index])\n            ){\n                populate_decendents(details_arr[index].to_page_id, db_record.deatils);\n            }\n        }\n    }\n}\n\n\nfunction checkIsPrivate(detail){\n\n    if(isEmpty(user_obj)){\n        return false;\n    }else{\n        if((\"private\" in detail.type)){\n            if(user_obj._id == detail.user_id){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            if(!isEmpty(user_obj.data)){\n                var obj2 = detail.type ,\n                     obj1 = user_obj.data.groups;\n                \n                if(isEmpty(obj1) || isEmpty(obj2)) return true;\n                \n                return Object.keys( obj1 ).every( function( prop ) {\n             \t\treturn obj2.hasOwnProperty( prop );\n             \t});\n            }else{\n                return true;\n            }\n        }\n    }\n}\n\nfunction formulate_details(detail_data){\n    var detailRecord = {\n        \"_id\": \t\"\",\n        \"image\":\t\t\"\",\n        \"to_page_id\": \t\"\",\n        \"user_id\": \t\t\"\",\n        \"task_id\":      \"\",\n        \"page_id\":      \"\",\n        \"from_user_id\": \"\",\n        \"display_if_empty\": \"\",\n        \"processed\": \"\",\n        \"status\": \"\",\n    \t\"user_incoming\":{},\n        \"watson_incoming\":{},\n        \"type\":         {},\n        \"createdAt\": \"\",\n        \"from_user\":    {},\n        \"count\":{\"active\":0, \"unread\":0}\n    }, detailObj= [] ;\n    \n    if(detail_data.length){\n        if(!isEmpty(user_obj)){\n            for(var d=0; d<detail_data.length; d++){\n\n                if( (user_obj._id === detail_data[d].user_id) || (user_obj._id == checkFromUserId(detail_data[d]) )){\n                    //when user owns detail record\n                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                }\n                else{\n\n                    if((\"public\" in detail_data[d].type) ){ //check if user is admin or detail is public then display\n\n                        detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                    }else { \n\n                        if((\"admin\" in user_obj.type)){\n                            if( (\"public\" in detail_data[d].type)) {\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else if(hasSameProps(user_obj.data, detail_data[d].type)){\n                                detailObj.push( get_obj_data(detailRecord, detail_data[d]) );\n                            }else{\n                                if(detail_data[d].user_id == \"fa1785333117ba7c06b9020a6d3c0079\"){ //if record is created super company\n                                    detailObj.push( get_obj_data(detailRecord, detail_data[d]) );    \n                                }else{\n                                    detail_data.splice(d, 0);\n                                }\n                            }\n                        }else{\n                            detail_data.splice(d, 0);\n                        }\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }else{\n            //when we don't have any user info while using access_token\n            for(var k=0; k<detail_data.length; k++){\n                if(check_isDisplay(detail_data[k].display_if_empty)){\n                    detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                }else{\n                    var find_any_child = populate_child_detail(db_record.details, detail_data[k].to_page_id);\n                    if(find_any_child.length){\n                        detailObj.push( get_obj_data(detailRecord, detail_data[k]) );\n                    }else{\n                        detail_data.splice(k, 0);\n                    }\n                }\n            }\n            detailObj = removeEmptyArrayElements(detailObj);         \n        }\n    }\n\n    return detailObj;\n}\n\nfunction hasSameProps( obj1, obj2 ) {\n    var isExists = false;\n    \n    if(!isEmpty(obj1)){\n        obj1 = obj1.groups ;\n        if(!isEmpty(obj1)){\n            isExists = Object.keys( obj1 ).every( function( prop ) {\n     \t\t    return obj2.hasOwnProperty( prop );\n     \t    });    \n        }\n    }\n    \n \treturn isExists;\n}\n\nfunction checkFromUserId(detail_obj){\n    if(isEmpty(detail_obj.from_user_id)){\n        return null;\n    }else{\n        if(Object.prototype.toString.call(detail_obj.from_user_id) === \"[object Object]\"){\n            return detail_obj.from_user_id.user_id;\n        }else{\n            return detail_obj.from_user_id;\n        }\n    }\n}\n\nfunction populate_child_detail(details, to_page_id){\n    var arr = [];\n    for(var i=0; i<details.length; i++){\n        if( details[i].page_id === to_page_id ){\n            arr.push(details[i]);\n        }\n    }\n    return arr;\n}\n\nfunction formulate_task(task_obj, db_data){\n    var template_data       = db_data.templates ,\n    task_data               = task_obj,\n    templateObj             = {},\n    header_template_id      = task_data.header_template_id,\n    detail_template_id      = task_data.detail_template_id,\n    footer_template_id      = task_data.footer_template_id;\n    \n    for(var ind=0; ind<template_data.length; ind++){\n        if(header_template_id == template_data[ind]._id){\n            templateObj.header = template_data[ind];\n        }\n        if(detail_template_id == template_data[ind]._id){\n            templateObj.detail = template_data[ind];\n        }\n        if(footer_template_id == template_data[ind]._id){\n            templateObj.footer = template_data[ind];\n        }\n    }\n\n    var taskObj = {\n        \"task_id\":\t\t    task_data._id,\n        \"task_name\":\t\ttask_data.task_name,\n        \"page_id\":          task_data.page_id,\n        \"parent_id\":        task_data.parent_id,\n        \"template\": \t\ttemplateObj,\n        \"from_page_id\":\t\ttask_data.from_page_id,\n        \"child_task_id\":    task_data.child_default_task_id,\n        \"date_created\":     task_data.date_created\n    };\n    \n    return taskObj;\n}\n\nfunction populate_details(id, arr){\n\n    var result = [];\n    \n    if(isEmpty(id)) return result;\n    \n    if(isEmpty(arr)){\n        return result;\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(if_exists_in_arr(id, arr[i].task_id)){\n                result.push(arr[i]);\n            }\n        }\n    }    \n    \n    return result;\n}\n\nfunction populate_taskobj(id, arr){\n    if(isEmpty(id)) return {};\n    \n    if(isEmpty(arr)){\n        return {};\n    }else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i].page_id == id){\n                return arr[i];\n            }\n        }\n    }\n}\n\nfunction populate_user_task(user, user_tasks){\n    var users_task = [];\n    \n    for(var i=0; i<user_tasks.length; i++){\n        if( \n            (user_tasks[i].user_id == user._id) &&\n            (parseInt(user_tasks[i].synchronized) === 0)\n        ){\n            users_task.push(user_tasks[i]);\n        }\n    }\n    \n    return users_task;\n}\n\nfunction removeEmptyArrayElements(arr) { \n   if (!isArray(arr)) {\n      return arr;\n   } else {\n       return arr.filter( function(elem) { \n          return elem !== null ;\n       } ).map(removeEmptyArrayElements);\n   }\n}\n\nfunction get_obj_data(obj1, obj2){\n\tvar obj = {};\n\tfor (var key in obj1) {\n\t\tif(obj2.hasOwnProperty(key))\n\t\t\tobj[key] = obj2[key];\n\t\telse\n\t\t    obj[key] = obj1[key];\n\t}\n\treturn obj;\n}\n\nfunction if_exists_in_arr(key, array){\n    return array.indexOf(key) > -1;\n}\n\nfunction isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2361.1290130615234,
        "y": 614.4688606262207,
        "wires": [
            [
                "652d4274.117dcc"
            ]
        ]
    },
    {
        "id": "652d4274.117dcc",
        "type": "http response",
        "z": "5e22f743.a6a0b8",
        "name": "",
        "x": 2549.140640258789,
        "y": 613.8829231262207,
        "wires": []
    },
    {
        "id": "d4ff830e.f3b98",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Chatbot push",
        "func": "var user = msg.userObj ,\n    data = msg.payload ;\n\nif(isEmpty(user)){\n    node.warn(\"When user is empty no need to send push notificaiton\");\n    msg.isSendPush = false;\n}else{\n    if(isEmpty(user.device_id)){\n        node.warn(\"`device_id` is empty no need to send push notification\");\n        msg.isSendPush = false;\n    }else{\n        msg.isSendPush = true;\n        msg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\n        msg.method = \"POST\";\n        \n        msg.payload = {\n            \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n            \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n            \"payload\": {\n        \t\t\"message\": {\n        \t\t\t\"alert\": data\n        \t\t}, \n        \t\t\"target\": {\n        \t\t\t\"deviceIds\": [user.device_id]\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"apns\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"page_id\"  : 18,\n        \t\t\t\t\t\"user_page_id\": 18\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"gcm\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"user_page_id\"  : 18,\n        \t\t\t\t\t\"page_id\": 18,\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        };\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1808.6290130615234,
        "y": 531.9765968322754,
        "wires": [
            [
                "b9672583.ac35e8"
            ]
        ]
    },
    {
        "id": "b9672583.ac35e8",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isSendPush",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1980.6329231262207,
        "y": 516.3906602859497,
        "wires": [
            [
                "ba35018f.7cadd"
            ],
            [
                "b28b710b.c9bc1"
            ]
        ]
    },
    {
        "id": "ba35018f.7cadd",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2137.640625,
        "y": 471.91796875,
        "wires": [
            [
                "e3683445.19fc18"
            ]
        ]
    },
    {
        "id": "b28b710b.c9bc1",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2140.640739440918,
        "y": 523.4062843322754,
        "wires": []
    },
    {
        "id": "e3683445.19fc18",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2311.875114440918,
        "y": 471.4219093322754,
        "wires": []
    },
    {
        "id": "fa9be66.f4e2418",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Chatbot push",
        "func": "var user = msg.userObj ,\n    data = msg.payload ;\n\nif(isEmpty(user)){\n    node.warn(\"When user is empty no need to send push notificaiton\");\n    msg.isSendPush = false;\n}else{\n    if(isEmpty(user.device_id)){\n        node.warn(\"`device_id` is empty no need to send push notification\");\n        msg.isSendPush = false;\n    }else{\n        msg.isSendPush = true;\n        msg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\n        msg.method = \"POST\";\n        \n        msg.payload = {\n            \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n            \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n            \"payload\": {\n        \t\t\"message\": {\n        \t\t\t\"alert\": data\n        \t\t}, \n        \t\t\"target\": {\n        \t\t\t\"deviceIds\": [user.device_id]\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"apns\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"page_id\"  : 18,\n        \t\t\t\t\t\"user_page_id\": 18\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"gcm\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"user_page_id\"  : 18,\n        \t\t\t\t\t\"page_id\": 18,\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        };\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1654.2658157348633,
        "y": 1172.7500286102295,
        "wires": [
            [
                "4ab40e8f.850c9"
            ]
        ]
    },
    {
        "id": "4ab40e8f.850c9",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isSendPush",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1814.269947052002,
        "y": 1172.1641073226929,
        "wires": [
            [
                "4a4575dd.2cc9ec"
            ],
            [
                "75f47b2c.17b924"
            ]
        ]
    },
    {
        "id": "4a4575dd.2cc9ec",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1972.2777633666992,
        "y": 1164.691466331482,
        "wires": [
            [
                "89af6337.cc7b5"
            ]
        ]
    },
    {
        "id": "75f47b2c.17b924",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1977.2777938842773,
        "y": 1221.1797332763672,
        "wires": []
    },
    {
        "id": "89af6337.cc7b5",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2146.512252807617,
        "y": 1164.1954069137573,
        "wires": []
    },
    {
        "id": "7220db5.8a69624",
        "type": "function",
        "z": "3d6329c5.e74616",
        "name": "Chatbot push",
        "func": "var user = msg.userObj ,\n    data = msg.payload ;\n\nif(isEmpty(user)){\n    node.warn(\"When user is empty no need to send push notificaiton\");\n    msg.isSendPush = false;\n}else{\n    if(isEmpty(user.device_id)){\n        node.warn(\"`device_id` is empty no need to send push notification\");\n        msg.isSendPush = false;\n    }else{\n        msg.isSendPush = true;\n        msg.url = \"https://socket-server.mybluemix.net/send_push_notification\";\n        //msg.url = \"http://mastersoftwaretechnologies.com:6050/send_push_notification\";\n        msg.method = \"POST\";\n        \n        msg.payload = {\n            \"push_url\": \"https://imfpush.ng.bluemix.net/imfpush/v1/apps/f9fb70f7-e91f-4e62-b713-a609fb81be59/messages\",\n            \"appSecrect\": \"f8af03f8-ebc1-4e90-b6c7-c0cd0afc3e69\",\n            \"payload\": {\n        \t\t\"message\": {\n        \t\t\t\"alert\": data\n        \t\t}, \n        \t\t\"target\": {\n        \t\t\t\"deviceIds\": [user.device_id]\n        \t\t},\n        \t\t\"settings\": {\n        \t\t\t\"apns\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"page_id\"  : 18,\n        \t\t\t\t\t\"user_page_id\": 18\n        \t\t\t\t}\n        \t\t\t},\n        \t\t\t\"gcm\": {\n        \t\t\t\t\"payload\": {\n        \t\t\t\t\t\"isPageRefresh\" : true,\n        \t\t\t\t\t\"user_page_id\"  : 18,\n        \t\t\t\t\t\"page_id\": 18,\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\n        \t}\n        };\n    }\n}\n\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1453.265625,
        "y": 2324.25,
        "wires": [
            [
                "81d56b14.62b948"
            ]
        ]
    },
    {
        "id": "81d56b14.62b948",
        "type": "switch",
        "z": "3d6329c5.e74616",
        "name": "",
        "property": "isSendPush",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1613.2697563171387,
        "y": 2323.6640787124634,
        "wires": [
            [
                "e5868e0.05d0f7"
            ],
            [
                "b8bcbda5.6e294"
            ]
        ]
    },
    {
        "id": "e5868e0.05d0f7",
        "type": "http request",
        "z": "3d6329c5.e74616",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1771.277572631836,
        "y": 2316.1914377212524,
        "wires": [
            [
                "3d673824.0c9f18"
            ]
        ]
    },
    {
        "id": "b8bcbda5.6e294",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1776.277603149414,
        "y": 2372.6797046661377,
        "wires": []
    },
    {
        "id": "3d673824.0c9f18",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1945.512062072754,
        "y": 2315.695378303528,
        "wires": []
    },
    {
        "id": "2e304528.d630da",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 3210.833755493164,
        "y": 1986.8925428390503,
        "wires": []
    },
    {
        "id": "d4fe8857.bbbf08",
        "type": "http in",
        "z": "15a80fee.a1bde",
        "name": "paginated_data",
        "url": "/get_paginated_data",
        "method": "post",
        "swaggerDoc": "",
        "x": 109,
        "y": 291,
        "wires": [
            [
                "434bb4e0.f94f9c"
            ]
        ]
    },
    {
        "id": "434bb4e0.f94f9c",
        "type": "function",
        "z": "15a80fee.a1bde",
        "name": "payload",
        "func": "var payload = msg.payload ;\n\nvar url     = \"https://30175cba-a69e-4ff0-9a79-788abcf0f585-bluemix.cloudant.com/master_table/_design/filterBy/_search/filterBy\",\n    limit   = payload.limit || 20,\n    query   = payload.query,\n    sort    = \"_id<string>\",\n    bookmark= payload.bookmark ;\n    \nif(isEmpty(bookmark)){\n    msg.url = url + '?q=' + query + '&limit=' + limit + '&include_docs=true&sort=\"' + sort + '\"';    \n}else{\n    msg.url = url + '?q=' + query + '&limit=' + limit + '&include_docs=true&sort=\"' + sort + '\"&bookmark=\"' + bookmark + '\"';\n}\n\nmsg.method = \"GET\";\n// if(isEmpty(msg.payload)){\n//     msg.payload = {\n//     \t\"query\": \"table:users\",\n//     \t\"sort\": \"_id<string>\",\n//     \t\"limit\": 3,\n//     \t\"include_docs\": true\n//     };\n// }\nnode.warn(\"url >>>\");\nnode.warn(msg);\nreturn msg;\n\nfunction isEmpty(obj){\n\n    if(Object.prototype.toString.call(obj) === \"[object Object]\"){\n        if( Object.keys(obj).length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else if(Object.prototype.toString.call(obj) === \"[object Array]\"){\n        if( obj.length ){\n            return false;\n        }else{\n            return true;\n        }\n    }else{\n        if( obj ){\n            return false;\n        }else{\n            return true;\n        }\n    }   \n}",
        "outputs": 1,
        "noerr": 0,
        "x": 279,
        "y": 289,
        "wires": [
            [
                "715ef260.9b123c"
            ]
        ]
    },
    {
        "id": "715ef260.9b123c",
        "type": "http request",
        "z": "15a80fee.a1bde",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 436,
        "y": 290,
        "wires": [
            [
                "48a4ee46.4714f",
                "86fb28d7.9ee4d8"
            ]
        ]
    },
    {
        "id": "48a4ee46.4714f",
        "type": "http response",
        "z": "15a80fee.a1bde",
        "name": "",
        "x": 605,
        "y": 268,
        "wires": []
    },
    {
        "id": "86fb28d7.9ee4d8",
        "type": "debug",
        "z": "15a80fee.a1bde",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 623.0000343322754,
        "y": 339.000018119812,
        "wires": []
    },
    {
        "id": "a3c53db7.6ecef",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 908.8333854675293,
        "y": 1159.3333282470703,
        "wires": []
    },
    {
        "id": "f21ad68f.ee8c68",
        "type": "debug",
        "z": "3d6329c5.e74616",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 333.5000190734863,
        "y": 1272.6667022705078,
        "wires": []
    },
    {
        "id": "37e6fcd7.017834",
        "type": "http response",
        "z": "1bc13036.e3b82",
        "name": "",
        "x": 2150.333251953125,
        "y": 2017.333251953125,
        "wires": []
    },
    {
        "id": "db57422a.801b7",
        "type": "function",
        "z": "1bc13036.e3b82",
        "name": "Send SMS",
        "func": "var paylaod = msg.user_obj,\n    data    = msg.payload_data ;\n\nmsg.topic = paylaod.virtual_phone || 12145644732;\nmsg.payload = data.message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2054.5,
        "y": 2241.666766166687,
        "wires": [
            [
                "fdb95224.d5836"
            ]
        ]
    },
    {
        "id": "fdb95224.d5836",
        "type": "twilio out",
        "z": "1bc13036.e3b82",
        "service": "_ext_",
        "twilio": "90ba38c0.44c918",
        "from": "",
        "number": "",
        "name": "",
        "x": 2255.1664810180664,
        "y": 2243.3335514068604,
        "wires": []
    },
    {
        "id": "40594293.4be51c",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1518.1666259765625,
        "y": 1980.3333435058594,
        "wires": []
    },
    {
        "id": "4897f233.34073c",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 2022.1666259765625,
        "y": 2292.3333740234375,
        "wires": []
    },
    {
        "id": "dbafcdad.f8fd5",
        "type": "debug",
        "z": "1bc13036.e3b82",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 2381.833553314209,
        "y": 2207.9999685287476,
        "wires": []
    }
]